
rtostest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dec4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000105c  0800e058  0800e058  0001e058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0b4  0800f0b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0b4  0800f0b4  0001f0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0bc  0800f0bc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0bc  0800f0bc  0001f0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0c0  0800f0c0  0001f0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f0c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00005108  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200052f0  200052f0  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e292  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039bb  00000000  00000000  0003e4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00041e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001890  00000000  00000000  00043838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e25  00000000  00000000  000450c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c72c  00000000  00000000  00049eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da2b2  00000000  00000000  00066619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001408cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007fa8  00000000  00000000  0014091c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e03c 	.word	0x0800e03c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e03c 	.word	0x0800e03c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef0:	f002 fbd8 	bl	80036a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef4:	f000 f890 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 fb88 	bl	800160c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000efc:	f000 f918 	bl	8001130 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f00:	f000 f9b4 	bl	800126c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f04:	f000 fa06 	bl	8001314 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000f08:	f000 faac 	bl	8001464 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000f0c:	f000 fb54 	bl	80015b8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f10:	f000 f8e0 	bl	80010d4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f14:	f000 fa52 	bl	80013bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000f18:	f00a f886 	bl	800b028 <OLED_Init>

  // for debug
  //HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
  // for real task
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 8000f1c:	2205      	movs	r2, #5
 8000f1e:	4924      	ldr	r1, [pc, #144]	; (8000fb0 <main+0xc4>)
 8000f20:	4824      	ldr	r0, [pc, #144]	; (8000fb4 <main+0xc8>)
 8000f22:	f006 f990 	bl	8007246 <HAL_UART_Receive_IT>
//	encoderRightTasHandle = osThreadNew(StartEncoderRightTask, NULL, &encoderRightTas_attributes);
//
//  /* creation of encoderLeftTask */
//  encoderLeftTaskHandle = osThreadNew(StartEncoderLeftTask, NULL, &encoderLeftTask_attributes);

    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f26:	4a24      	ldr	r2, [pc, #144]	; (8000fb8 <main+0xcc>)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4824      	ldr	r0, [pc, #144]	; (8000fbc <main+0xd0>)
 8000f2c:	f007 f9a2 	bl	8008274 <osThreadNew>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4a23      	ldr	r2, [pc, #140]	; (8000fc0 <main+0xd4>)
 8000f34:	6013      	str	r3, [r2, #0]

    /* creation of MotorTask */
    motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f36:	4a23      	ldr	r2, [pc, #140]	; (8000fc4 <main+0xd8>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <main+0xdc>)
 8000f3c:	f007 f99a 	bl	8008274 <osThreadNew>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <main+0xe0>)
 8000f44:	6013      	str	r3, [r2, #0]

    /* creation of oledTask */
    oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8000f46:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <main+0xe4>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <main+0xe8>)
 8000f4c:	f007 f992 	bl	8008274 <osThreadNew>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <main+0xec>)
 8000f54:	6013      	str	r3, [r2, #0]

    /* creation of rpiTask */
    rpiTaskHandle = osThreadNew(StartRpiTask, NULL, &rpiTask_attributes);
 8000f56:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <main+0xf0>)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4821      	ldr	r0, [pc, #132]	; (8000fe0 <main+0xf4>)
 8000f5c:	f007 f98a 	bl	8008274 <osThreadNew>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <main+0xf8>)
 8000f64:	6013      	str	r3, [r2, #0]

    /* creation of gyroTask */
    gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <main+0xfc>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4820      	ldr	r0, [pc, #128]	; (8000fec <main+0x100>)
 8000f6c:	f007 f982 	bl	8008274 <osThreadNew>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <main+0x104>)
 8000f74:	6013      	str	r3, [r2, #0]

    /* creation of bulleyesTask */
    bulleyesTaskHandle = osThreadNew(StartBulleyesTask, NULL, &bulleyesTask_attributes);
 8000f76:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <main+0x108>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <main+0x10c>)
 8000f7c:	f007 f97a 	bl	8008274 <osThreadNew>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <main+0x110>)
 8000f84:	6013      	str	r3, [r2, #0]

	/* creation of encoderRightTas */
	encoderRightTasHandle = osThreadNew(StartEncoderRightTask, NULL, &encoderRightTas_attributes);
 8000f86:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <main+0x114>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	481e      	ldr	r0, [pc, #120]	; (8001004 <main+0x118>)
 8000f8c:	f007 f972 	bl	8008274 <osThreadNew>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <main+0x11c>)
 8000f94:	6013      	str	r3, [r2, #0]

	/* creation of encoderLeftTask */
	encoderLeftTaskHandle = osThreadNew(StartEncoderLeftTask, NULL, &encoderLeftTask_attributes);
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <main+0x120>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	481d      	ldr	r0, [pc, #116]	; (8001010 <main+0x124>)
 8000f9c:	f007 f96a 	bl	8008274 <osThreadNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <main+0x128>)
 8000fa4:	6013      	str	r3, [r2, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fa6:	f007 f91b 	bl	80081e0 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000faa:	f007 f93d 	bl	8008228 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <main+0xc2>
 8000fb0:	20000424 	.word	0x20000424
 8000fb4:	200003c0 	.word	0x200003c0
 8000fb8:	0800e140 	.word	0x0800e140
 8000fbc:	08002215 	.word	0x08002215
 8000fc0:	20000404 	.word	0x20000404
 8000fc4:	0800e164 	.word	0x0800e164
 8000fc8:	08002249 	.word	0x08002249
 8000fcc:	20000408 	.word	0x20000408
 8000fd0:	0800e188 	.word	0x0800e188
 8000fd4:	08002699 	.word	0x08002699
 8000fd8:	2000040c 	.word	0x2000040c
 8000fdc:	0800e1ac 	.word	0x0800e1ac
 8000fe0:	080028d1 	.word	0x080028d1
 8000fe4:	20000410 	.word	0x20000410
 8000fe8:	0800e1d0 	.word	0x0800e1d0
 8000fec:	08002c51 	.word	0x08002c51
 8000ff0:	20000414 	.word	0x20000414
 8000ff4:	0800e1f4 	.word	0x0800e1f4
 8000ff8:	08002de5 	.word	0x08002de5
 8000ffc:	20000418 	.word	0x20000418
 8001000:	0800e218 	.word	0x0800e218
 8001004:	08002e01 	.word	0x08002e01
 8001008:	2000041c 	.word	0x2000041c
 800100c:	0800e23c 	.word	0x0800e23c
 8001010:	08002e89 	.word	0x08002e89
 8001014:	20000420 	.word	0x20000420

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	; 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	; 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f00a f9bb 	bl	800b3a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <SystemClock_Config+0xb4>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <SystemClock_Config+0xb4>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <SystemClock_Config+0xb4>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <SystemClock_Config+0xb8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <SystemClock_Config+0xb8>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <SystemClock_Config+0xb8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107c:	2310      	movs	r3, #16
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001080:	2300      	movs	r3, #0
 8001082:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fed3 	bl	8004e34 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001094:	f001 ff3c 	bl	8002f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 f936 	bl	8005324 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010be:	f001 ff27 	bl	8002f10 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	; 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_I2C1_Init+0x50>)
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <MX_I2C1_Init+0x54>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_I2C1_Init+0x50>)
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <MX_I2C1_Init+0x58>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_I2C1_Init+0x50>)
 80010f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_I2C1_Init+0x50>)
 8001112:	f002 fed1 	bl	8003eb8 <HAL_I2C_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f001 fef8 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000204 	.word	0x20000204
 8001128:	40005400 	.word	0x40005400
 800112c:	000186a0 	.word	0x000186a0

08001130 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b096      	sub	sp, #88	; 0x58
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	615a      	str	r2, [r3, #20]
 8001160:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2220      	movs	r2, #32
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f00a f91a 	bl	800b3a2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116e:	4b3d      	ldr	r3, [pc, #244]	; (8001264 <MX_TIM1_Init+0x134>)
 8001170:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <MX_TIM1_Init+0x138>)
 8001172:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001174:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <MX_TIM1_Init+0x134>)
 8001176:	22a0      	movs	r2, #160	; 0xa0
 8001178:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <MX_TIM1_Init+0x134>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001180:	4b38      	ldr	r3, [pc, #224]	; (8001264 <MX_TIM1_Init+0x134>)
 8001182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001186:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <MX_TIM1_Init+0x134>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <MX_TIM1_Init+0x134>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <MX_TIM1_Init+0x134>)
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800119a:	4832      	ldr	r0, [pc, #200]	; (8001264 <MX_TIM1_Init+0x134>)
 800119c:	f004 faa2 	bl	80056e4 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011a6:	f001 feb3 	bl	8002f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b4:	4619      	mov	r1, r3
 80011b6:	482b      	ldr	r0, [pc, #172]	; (8001264 <MX_TIM1_Init+0x134>)
 80011b8:	f005 f916 	bl	80063e8 <HAL_TIM_ConfigClockSource>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011c2:	f001 fea5 	bl	8002f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c6:	4827      	ldr	r0, [pc, #156]	; (8001264 <MX_TIM1_Init+0x134>)
 80011c8:	f004 fadb 	bl	8005782 <HAL_TIM_PWM_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011d2:	f001 fe9d 	bl	8002f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d6:	2300      	movs	r3, #0
 80011d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e2:	4619      	mov	r1, r3
 80011e4:	481f      	ldr	r0, [pc, #124]	; (8001264 <MX_TIM1_Init+0x134>)
 80011e6:	f005 fe6d 	bl	8006ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011f0:	f001 fe8e 	bl	8002f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f4:	2360      	movs	r3, #96	; 0x60
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	220c      	movs	r2, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4813      	ldr	r0, [pc, #76]	; (8001264 <MX_TIM1_Init+0x134>)
 8001216:	f005 f825 	bl	8006264 <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001220:	f001 fe76 	bl	8002f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	4619      	mov	r1, r3
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM1_Init+0x134>)
 8001248:	f005 feb8 	bl	8006fbc <HAL_TIMEx_ConfigBreakDeadTime>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001252:	f001 fe5d 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM1_Init+0x134>)
 8001258:	f002 f83c 	bl	80032d4 <HAL_TIM_MspPostInit>

}
 800125c:	bf00      	nop
 800125e:	3758      	adds	r7, #88	; 0x58
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000258 	.word	0x20000258
 8001268:	40010000 	.word	0x40010000

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	; 0x30
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2224      	movs	r2, #36	; 0x24
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f00a f891 	bl	800b3a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_TIM2_Init+0xa4>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_TIM2_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_TIM2_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_TIM2_Init+0xa4>)
 800129e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_TIM2_Init+0xa4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM2_Init+0xa4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012b0:	2303      	movs	r3, #3
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012c0:	230a      	movs	r3, #10
 80012c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012c8:	2301      	movs	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012d0:	230a      	movs	r3, #10
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM2_Init+0xa4>)
 80012dc:	f004 fcea 	bl	8005cb4 <HAL_TIM_Encoder_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012e6:	f001 fe13 	bl	8002f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM2_Init+0xa4>)
 80012f8:	f005 fde4 	bl	8006ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001302:	f001 fe05 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3730      	adds	r7, #48	; 0x30
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200002a0 	.word	0x200002a0

08001314 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2224      	movs	r2, #36	; 0x24
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f00a f83d 	bl	800b3a2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001332:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <MX_TIM3_Init+0xa4>)
 8001334:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_TIM3_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001348:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_TIM3_Init+0xa0>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001356:	2303      	movs	r3, #3
 8001358:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800135e:	2301      	movs	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001366:	230a      	movs	r3, #10
 8001368:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800136e:	2301      	movs	r3, #1
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001376:	230a      	movs	r3, #10
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_TIM3_Init+0xa0>)
 8001382:	f004 fc97 	bl	8005cb4 <HAL_TIM_Encoder_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800138c:	f001 fdc0 	bl	8002f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_TIM3_Init+0xa0>)
 800139e:	f005 fd91 	bl	8006ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013a8:	f001 fdb2 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3730      	adds	r7, #48	; 0x30
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200002e8 	.word	0x200002e8
 80013b8:	40000400 	.word	0x40000400

080013bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_TIM4_Init+0xa0>)
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <MX_TIM4_Init+0xa4>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_TIM4_Init+0xa0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <MX_TIM4_Init+0xa0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_TIM4_Init+0xa0>)
 80013ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_TIM4_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_TIM4_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80013fe:	4817      	ldr	r0, [pc, #92]	; (800145c <MX_TIM4_Init+0xa0>)
 8001400:	f004 fae0 	bl	80059c4 <HAL_TIM_IC_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800140a:	f001 fd81 	bl	8002f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4619      	mov	r1, r3
 800141c:	480f      	ldr	r0, [pc, #60]	; (800145c <MX_TIM4_Init+0xa0>)
 800141e:	f005 fd51 	bl	8006ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001428:	f001 fd72 	bl	8002f10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800142c:	2300      	movs	r3, #0
 800142e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001430:	2301      	movs	r3, #1
 8001432:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_TIM4_Init+0xa0>)
 8001444:	f004 fe72 	bl	800612c <HAL_TIM_IC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800144e:	f001 fd5f 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000330 	.word	0x20000330
 8001460:	40000800 	.word	0x40000800

08001464 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b096      	sub	sp, #88	; 0x58
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2220      	movs	r2, #32
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f009 ff80 	bl	800b3a2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014a4:	4a43      	ldr	r2, [pc, #268]	; (80015b4 <MX_TIM8_Init+0x150>)
 80014a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014a8:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014ce:	4838      	ldr	r0, [pc, #224]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014d0:	f004 f908 	bl	80056e4 <HAL_TIM_Base_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014da:	f001 fd19 	bl	8002f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014e8:	4619      	mov	r1, r3
 80014ea:	4831      	ldr	r0, [pc, #196]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014ec:	f004 ff7c 	bl	80063e8 <HAL_TIM_ConfigClockSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014f6:	f001 fd0b 	bl	8002f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014fa:	482d      	ldr	r0, [pc, #180]	; (80015b0 <MX_TIM8_Init+0x14c>)
 80014fc:	f004 f941 	bl	8005782 <HAL_TIM_PWM_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001506:	f001 fd03 	bl	8002f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001516:	4619      	mov	r1, r3
 8001518:	4825      	ldr	r0, [pc, #148]	; (80015b0 <MX_TIM8_Init+0x14c>)
 800151a:	f005 fcd3 	bl	8006ec4 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001524:	f001 fcf4 	bl	8002f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001528:	2360      	movs	r3, #96	; 0x60
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	4818      	ldr	r0, [pc, #96]	; (80015b0 <MX_TIM8_Init+0x14c>)
 800154e:	f004 fe89 	bl	8006264 <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001558:	f001 fcda 	bl	8002f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	2204      	movs	r2, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4812      	ldr	r0, [pc, #72]	; (80015b0 <MX_TIM8_Init+0x14c>)
 8001566:	f004 fe7d 	bl	8006264 <HAL_TIM_PWM_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001570:	f001 fcce 	bl	8002f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_TIM8_Init+0x14c>)
 8001598:	f005 fd10 	bl	8006fbc <HAL_TIMEx_ConfigBreakDeadTime>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80015a2:	f001 fcb5 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	3758      	adds	r7, #88	; 0x58
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000378 	.word	0x20000378
 80015b4:	40010400 	.word	0x40010400

080015b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <MX_USART3_UART_Init+0x50>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USART3_UART_Init+0x4c>)
 80015f0:	f005 fd4a 	bl	8007088 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015fa:	f001 fc89 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200003c0 	.word	0x200003c0
 8001608:	40004800 	.word	0x40004800

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <MX_GPIO_Init+0x188>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <MX_GPIO_Init+0x188>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b58      	ldr	r3, [pc, #352]	; (8001794 <MX_GPIO_Init+0x188>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b54      	ldr	r3, [pc, #336]	; (8001794 <MX_GPIO_Init+0x188>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a53      	ldr	r2, [pc, #332]	; (8001794 <MX_GPIO_Init+0x188>)
 8001648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b51      	ldr	r3, [pc, #324]	; (8001794 <MX_GPIO_Init+0x188>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <MX_GPIO_Init+0x188>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <MX_GPIO_Init+0x188>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b4a      	ldr	r3, [pc, #296]	; (8001794 <MX_GPIO_Init+0x188>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b46      	ldr	r3, [pc, #280]	; (8001794 <MX_GPIO_Init+0x188>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a45      	ldr	r2, [pc, #276]	; (8001794 <MX_GPIO_Init+0x188>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <MX_GPIO_Init+0x188>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <MX_GPIO_Init+0x188>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <MX_GPIO_Init+0x188>)
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <MX_GPIO_Init+0x188>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <MX_GPIO_Init+0x188>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a37      	ldr	r2, [pc, #220]	; (8001794 <MX_GPIO_Init+0x188>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b35      	ldr	r3, [pc, #212]	; (8001794 <MX_GPIO_Init+0x188>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80016d0:	4831      	ldr	r0, [pc, #196]	; (8001798 <MX_GPIO_Init+0x18c>)
 80016d2:	f002 fbbd 	bl	8003e50 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	213c      	movs	r1, #60	; 0x3c
 80016da:	4830      	ldr	r0, [pc, #192]	; (800179c <MX_GPIO_Init+0x190>)
 80016dc:	f002 fbb8 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e6:	482e      	ldr	r0, [pc, #184]	; (80017a0 <MX_GPIO_Init+0x194>)
 80016e8:	f002 fbb2 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f2:	482c      	ldr	r0, [pc, #176]	; (80017a4 <MX_GPIO_Init+0x198>)
 80016f4:	f002 fbac 	bl	8003e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80016f8:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80016fc:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	4821      	ldr	r0, [pc, #132]	; (8001798 <MX_GPIO_Init+0x18c>)
 8001712:	f002 fa01 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001716:	233c      	movs	r3, #60	; 0x3c
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001722:	2302      	movs	r3, #2
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	481b      	ldr	r0, [pc, #108]	; (800179c <MX_GPIO_Init+0x190>)
 800172e:	f002 f9f3 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001738:	2301      	movs	r3, #1
 800173a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4815      	ldr	r0, [pc, #84]	; (80017a0 <MX_GPIO_Init+0x194>)
 800174c:	f002 f9e4 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8001750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001756:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	480f      	ldr	r0, [pc, #60]	; (80017a4 <MX_GPIO_Init+0x198>)
 8001768:	f002 f9d6 	bl	8003b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 800176c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4807      	ldr	r0, [pc, #28]	; (80017a4 <MX_GPIO_Init+0x198>)
 8001786:	f002 f9c7 	bl	8003b18 <HAL_GPIO_Init>

}
 800178a:	bf00      	nop
 800178c:	3730      	adds	r7, #48	; 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40021000 	.word	0x40021000
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020c00 	.word	0x40020c00

080017a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	// for debug
	//HAL_UART_Receive_IT (&huart3, aRxBuffer, 1);
	// for real task
	HAL_UART_Receive_IT (&huart3, aRxBuffer, 5);
 80017b0:	2205      	movs	r2, #5
 80017b2:	4904      	ldr	r1, [pc, #16]	; (80017c4 <HAL_UART_RxCpltCallback+0x1c>)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <HAL_UART_RxCpltCallback+0x20>)
 80017b6:	f005 fd46 	bl	8007246 <HAL_UART_Receive_IT>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000424 	.word	0x20000424
 80017c8:	200003c0 	.word	0x200003c0

080017cc <delay>:
			start = 0;
 	    }
}

void delay(uint16_t time)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
 __HAL_TIM_SET_COUNTER(&htim4, 0);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <delay+0x30>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
 while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 80017de:	bf00      	nop
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <delay+0x30>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d3f9      	bcc.n	80017e0 <delay+0x14>
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000330 	.word	0x20000330

08001800 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7f1b      	ldrb	r3, [r3, #28]
 800180c:	2b01      	cmp	r3, #1
 800180e:	f040 808a 	bne.w	8001926 <HAL_TIM_IC_CaptureCallback+0x126>
 {
  if (Is_First_Captured == 0)
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d11b      	bne.n	8001852 <HAL_TIM_IC_CaptureCallback+0x52>
  {
   IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800181a:	2100      	movs	r1, #0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f004 feab 	bl	8006578 <HAL_TIM_ReadCapturedValue>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001828:	601a      	str	r2, [r3, #0]
   Is_First_Captured = 1;
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x138>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6a1a      	ldr	r2, [r3, #32]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020a 	bic.w	r2, r2, #10
 800183e:	621a      	str	r2, [r3, #32]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a1a      	ldr	r2, [r3, #32]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0202 	orr.w	r2, r2, #2
 800184e:	621a      	str	r2, [r3, #32]

   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
  }
 }
}
 8001850:	e069      	b.n	8001926 <HAL_TIM_IC_CaptureCallback+0x126>
  else if (Is_First_Captured == 1)
 8001852:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d165      	bne.n	8001926 <HAL_TIM_IC_CaptureCallback+0x126>
   IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800185a:	2100      	movs	r1, #0
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f004 fe8b 	bl	8006578 <HAL_TIM_ReadCapturedValue>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001868:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_COUNTER(htim,0);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
   if (IC_Val2 > IC_Val1)
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b31      	ldr	r3, [pc, #196]	; (800193c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	dd0d      	ble.n	800189a <HAL_TIM_IC_CaptureCallback+0x9a>
    Difference = IC_Val2 - IC_Val1;
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe4b 	bl	8000524 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	492c      	ldr	r1, [pc, #176]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001894:	e9c1 2300 	strd	r2, r3, [r1]
 8001898:	e015      	b.n	80018c6 <HAL_TIM_IC_CaptureCallback+0xc6>
   else if (IC_Val1 > IC_Val2)
 800189a:	4b28      	ldr	r3, [pc, #160]	; (800193c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x140>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	dd0f      	ble.n	80018c6 <HAL_TIM_IC_CaptureCallback+0xc6>
    Difference = (65535 - IC_Val1) + IC_Val2;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80018ae:	33ff      	adds	r3, #255	; 0xff
 80018b0:	4a23      	ldr	r2, [pc, #140]	; (8001940 <HAL_TIM_IC_CaptureCallback+0x140>)
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	4413      	add	r3, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe34 	bl	8000524 <__aeabi_i2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4920      	ldr	r1, [pc, #128]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x144>)
 80018c2:	e9c1 2300 	strd	r2, r3, [r1]
   uDistance = Difference * .0343/2;
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_TIM_IC_CaptureCallback+0x144>)
 80018c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018cc:	a318      	add	r3, pc, #96	; (adr r3, 8001930 <HAL_TIM_IC_CaptureCallback+0x130>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fe91 	bl	80005f8 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e6:	f7fe ffb1 	bl	800084c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4916      	ldr	r1, [pc, #88]	; (8001948 <HAL_TIM_IC_CaptureCallback+0x148>)
 80018f0:	e9c1 2300 	strd	r2, r3, [r1]
   Is_First_Captured = 0;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x138>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a1a      	ldr	r2, [r3, #32]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 020a 	bic.w	r2, r2, #10
 8001908:	621a      	str	r2, [r3, #32]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a12      	ldr	r2, [r2, #32]
 8001914:	621a      	str	r2, [r3, #32]
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0202 	bic.w	r2, r2, #2
 8001924:	60da      	str	r2, [r3, #12]
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	04816f00 	.word	0x04816f00
 8001934:	3fa18fc5 	.word	0x3fa18fc5
 8001938:	200004ac 	.word	0x200004ac
 800193c:	200004b0 	.word	0x200004b0
 8001940:	200004b4 	.word	0x200004b4
 8001944:	200004b8 	.word	0x200004b8
 8001948:	200004c0 	.word	0x200004c0
 800194c:	20000330 	.word	0x20000330

08001950 <HCSR04_Read>:

void HCSR04_Read (void) //Call when want to get reading from US
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195a:	480b      	ldr	r0, [pc, #44]	; (8001988 <HCSR04_Read+0x38>)
 800195c:	f002 fa78 	bl	8003e50 <HAL_GPIO_WritePin>
 delay(10);
 8001960:	200a      	movs	r0, #10
 8001962:	f7ff ff33 	bl	80017cc <delay>
 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196c:	4806      	ldr	r0, [pc, #24]	; (8001988 <HCSR04_Read+0x38>)
 800196e:	f002 fa6f 	bl	8003e50 <HAL_GPIO_WritePin>
 __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HCSR04_Read+0x3c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <HCSR04_Read+0x3c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0202 	orr.w	r2, r2, #2
 8001980:	60da      	str	r2, [r3, #12]
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40020c00 	.word	0x40020c00
 800198c:	20000330 	.word	0x20000330

08001990 <buzzerBeep>:

void buzzerBeep()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 8001994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001998:	4806      	ldr	r0, [pc, #24]	; (80019b4 <buzzerBeep+0x24>)
 800199a:	f002 fa72 	bl	8003e82 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800199e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a2:	f001 fef1 	bl	8003788 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer Off
 80019a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019aa:	4802      	ldr	r0, [pc, #8]	; (80019b4 <buzzerBeep+0x24>)
 80019ac:	f002 fa69 	bl	8003e82 <HAL_GPIO_TogglePin>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40020400 	.word	0x40020400

080019b8 <moveCarStraight>:


void moveCarStraight(double distance)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	ed87 0b00 	vstr	d0, [r7]
	distance = distance*75;
 80019c2:	a32f      	add	r3, pc, #188	; (adr r3, 8001a80 <moveCarStraight+0xc8>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019cc:	f7fe fe14 	bl	80005f8 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	e9c7 2300 	strd	r2, r3, [r7]
	pwmVal_servo = 149;
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <moveCarStraight+0xa8>)
 80019da:	2295      	movs	r2, #149	; 0x95
 80019dc:	801a      	strh	r2, [r3, #0]
	osDelay(500);
 80019de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019e2:	f006 fcd9 	bl	8008398 <osDelay>
	e_brake = 0;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <moveCarStraight+0xac>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <moveCarStraight+0xb0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
	rightEncoderVal = 75000;
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <moveCarStraight+0xb4>)
 80019f4:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <moveCarStraight+0xb8>)
 80019f6:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 75000;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <moveCarStraight+0xbc>)
 80019fa:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <moveCarStraight+0xb8>)
 80019fc:	601a      	str	r2, [r3, #0]
	rightTarget = 75000;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <moveCarStraight+0xc0>)
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <moveCarStraight+0xb8>)
 8001a02:	601a      	str	r2, [r3, #0]
	leftTarget = 75000;
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <moveCarStraight+0xc4>)
 8001a06:	4a1a      	ldr	r2, [pc, #104]	; (8001a70 <moveCarStraight+0xb8>)
 8001a08:	601a      	str	r2, [r3, #0]
	rightTarget += distance;
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <moveCarStraight+0xc0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd88 	bl	8000524 <__aeabi_i2d>
 8001a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a18:	f7fe fc38 	bl	800028c <__adddf3>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f898 	bl	8000b58 <__aeabi_d2iz>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <moveCarStraight+0xc0>)
 8001a2c:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <moveCarStraight+0xc4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd76 	bl	8000524 <__aeabi_i2d>
 8001a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a3c:	f7fe fc26 	bl	800028c <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f886 	bl	8000b58 <__aeabi_d2iz>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <moveCarStraight+0xc4>)
 8001a50:	6013      	str	r3, [r2, #0]
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	f3af 8000 	nop.w
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000474 	.word	0x20000474
 8001a68:	20000470 	.word	0x20000470
 8001a6c:	20000478 	.word	0x20000478
 8001a70:	000124f8 	.word	0x000124f8
 8001a74:	2000047c 	.word	0x2000047c
 8001a78:	20000480 	.word	0x20000480
 8001a7c:	20000484 	.word	0x20000484
 8001a80:	00000000 	.word	0x00000000
 8001a84:	4052c000 	.word	0x4052c000

08001a88 <moveCarRight>:
	pwmVal_servo = 149;
	osDelay(300);
}

void moveCarRight(double angle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = 230;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <moveCarRight+0x44>)
 8001a94:	22e6      	movs	r2, #230	; 0xe6
 8001a96:	801a      	strh	r2, [r3, #0]
	osDelay(500);
 8001a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a9c:	f006 fc7c 	bl	8008398 <osDelay>
	e_brake = 0;
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <moveCarRight+0x48>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <moveCarRight+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <moveCarRight+0x50>)
 8001aae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ab6:	f7fe fbe7 	bl	8000288 <__aeabi_dsub>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4906      	ldr	r1, [pc, #24]	; (8001ad8 <moveCarRight+0x50>)
 8001ac0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000474 	.word	0x20000474
 8001ad4:	20000470 	.word	0x20000470
 8001ad8:	20000488 	.word	0x20000488

08001adc <moveCarLeft>:

void moveCarLeft(double angle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	ed87 0b00 	vstr	d0, [r7]
	pwmVal_servo = 98;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <moveCarLeft+0x44>)
 8001ae8:	2262      	movs	r2, #98	; 0x62
 8001aea:	801a      	strh	r2, [r3, #0]
	osDelay(500);
 8001aec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af0:	f006 fc52 	bl	8008398 <osDelay>
	e_brake = 0;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <moveCarLeft+0x48>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <moveCarLeft+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <moveCarLeft+0x50>)
 8001b02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b0a:	f7fe fbbf 	bl	800028c <__adddf3>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4906      	ldr	r1, [pc, #24]	; (8001b2c <moveCarLeft+0x50>)
 8001b14:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000474 	.word	0x20000474
 8001b28:	20000470 	.word	0x20000470
 8001b2c:	20000488 	.word	0x20000488

08001b30 <moveCarSlideRight>:

void moveCarSlideRight(int forward){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	int sign;
	if(forward == 1){
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d102      	bne.n	8001b44 <moveCarSlideRight+0x14>
		sign = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e002      	b.n	8001b4a <moveCarSlideRight+0x1a>
	}else{
		sign = -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
 8001b48:	60fb      	str	r3, [r7, #12]
	}
	e_brake = 0;
 8001b4a:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <moveCarSlideRight+0xd8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001b50:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <moveCarSlideRight+0xdc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
	moveCarStraight((600/75.19)*sign);
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7fe fce4 	bl	8000524 <__aeabi_i2d>
 8001b5c:	a328      	add	r3, pc, #160	; (adr r3, 8001c00 <moveCarSlideRight+0xd0>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f7fe fd49 	bl	80005f8 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	ec43 2b17 	vmov	d7, r2, r3
 8001b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b72:	eef0 0a67 	vmov.f32	s1, s15
 8001b76:	f7ff ff1f 	bl	80019b8 <moveCarStraight>
	while(finishCheck());
 8001b7a:	bf00      	nop
 8001b7c:	f000 fa82 	bl	8002084 <finishCheck>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1fa      	bne.n	8001b7c <moveCarSlideRight+0x4c>
	osDelay(500);
 8001b86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b8a:	f006 fc05 	bl	8008398 <osDelay>
	times_acceptable=0;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <moveCarSlideRight+0xdc>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
	moveCarRight(36*sign);
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcc0 	bl	8000524 <__aeabi_i2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b10 	vmov	d0, r2, r3
 8001bac:	f7ff ff6c 	bl	8001a88 <moveCarRight>
	while(finishCheck());
 8001bb0:	bf00      	nop
 8001bb2:	f000 fa67 	bl	8002084 <finishCheck>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1fa      	bne.n	8001bb2 <moveCarSlideRight+0x82>
	osDelay(50);
 8001bbc:	2032      	movs	r0, #50	; 0x32
 8001bbe:	f006 fbeb 	bl	8008398 <osDelay>
	times_acceptable=0;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <moveCarSlideRight+0xdc>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
	moveCarLeft(36*sign);
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fca6 	bl	8000524 <__aeabi_i2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	ec43 2b10 	vmov	d0, r2, r3
 8001be0:	f7ff ff7c 	bl	8001adc <moveCarLeft>
	while(finishCheck());
 8001be4:	bf00      	nop
 8001be6:	f000 fa4d 	bl	8002084 <finishCheck>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1fa      	bne.n	8001be6 <moveCarSlideRight+0xb6>
	osDelay(500);
 8001bf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bf4:	f006 fbd0 	bl	8008398 <osDelay>
}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	a3d5a53b 	.word	0xa3d5a53b
 8001c04:	401feb4c 	.word	0x401feb4c
 8001c08:	20000474 	.word	0x20000474
 8001c0c:	20000470 	.word	0x20000470

08001c10 <moveCarSlideLeft>:

void moveCarSlideLeft(int forward){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	int sign;
	if(forward == 1){
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <moveCarSlideLeft+0x14>
		sign = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e002      	b.n	8001c2a <moveCarSlideLeft+0x1a>
	}else{
		sign = -1;
 8001c24:	f04f 33ff 	mov.w	r3, #4294967295
 8001c28:	60fb      	str	r3, [r7, #12]
	}
	e_brake = 0;
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <moveCarSlideLeft+0xd8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <moveCarSlideLeft+0xdc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
	moveCarStraight((600/75.19)*sign);
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7fe fc74 	bl	8000524 <__aeabi_i2d>
 8001c3c:	a328      	add	r3, pc, #160	; (adr r3, 8001ce0 <moveCarSlideLeft+0xd0>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fcd9 	bl	80005f8 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	ec43 2b17 	vmov	d7, r2, r3
 8001c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c52:	eef0 0a67 	vmov.f32	s1, s15
 8001c56:	f7ff feaf 	bl	80019b8 <moveCarStraight>
	while(finishCheck());
 8001c5a:	bf00      	nop
 8001c5c:	f000 fa12 	bl	8002084 <finishCheck>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1fa      	bne.n	8001c5c <moveCarSlideLeft+0x4c>
	osDelay(500);
 8001c66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c6a:	f006 fb95 	bl	8008398 <osDelay>
	times_acceptable=0;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <moveCarSlideLeft+0xdc>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
	moveCarLeft(36*sign);
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc50 	bl	8000524 <__aeabi_i2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	ec43 2b10 	vmov	d0, r2, r3
 8001c8c:	f7ff ff26 	bl	8001adc <moveCarLeft>
	while(finishCheck());
 8001c90:	bf00      	nop
 8001c92:	f000 f9f7 	bl	8002084 <finishCheck>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1fa      	bne.n	8001c92 <moveCarSlideLeft+0x82>
	osDelay(50);
 8001c9c:	2032      	movs	r0, #50	; 0x32
 8001c9e:	f006 fb7b 	bl	8008398 <osDelay>
	times_acceptable=0;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <moveCarSlideLeft+0xdc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
	moveCarRight(36*sign);
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc36 	bl	8000524 <__aeabi_i2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	ec43 2b10 	vmov	d0, r2, r3
 8001cc0:	f7ff fee2 	bl	8001a88 <moveCarRight>
	while(finishCheck());
 8001cc4:	bf00      	nop
 8001cc6:	f000 f9dd 	bl	8002084 <finishCheck>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1fa      	bne.n	8001cc6 <moveCarSlideLeft+0xb6>
	osDelay(500);
 8001cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd4:	f006 fb60 	bl	8008398 <osDelay>
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	a3d5a53b 	.word	0xa3d5a53b
 8001ce4:	401feb4c 	.word	0x401feb4c
 8001ce8:	20000474 	.word	0x20000474
 8001cec:	20000470 	.word	0x20000470

08001cf0 <moveCarRight90>:

void moveCarRight90(double angle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	ed87 0b00 	vstr	d0, [r7]
	e_brake = 0;
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <moveCarRight90+0xb8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
	if(angle<0){
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d10:	f7fe fee4 	bl	8000adc <__aeabi_dcmplt>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <moveCarRight90+0x30>
		sign=-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	60fb      	str	r3, [r7, #12]
	}
	pwmVal_servo = 149; //149
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <moveCarRight90+0xbc>)
 8001d22:	2295      	movs	r2, #149	; 0x95
 8001d24:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <moveCarRight90+0xc0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
	moveCarStraight(4);
 8001d2c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8001d98 <moveCarRight90+0xa8>
 8001d30:	f7ff fe42 	bl	80019b8 <moveCarStraight>
	while(finishCheck());
 8001d34:	bf00      	nop
 8001d36:	f000 f9a5 	bl	8002084 <finishCheck>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1fa      	bne.n	8001d36 <moveCarRight90+0x46>
	osDelay(500);
 8001d40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d44:	f006 fb28 	bl	8008398 <osDelay>
	times_acceptable=0;
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <moveCarRight90+0xc0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
	moveCarRight(angle);
 8001d4e:	ed97 0b00 	vldr	d0, [r7]
 8001d52:	f7ff fe99 	bl	8001a88 <moveCarRight>
	while(finishCheck());
 8001d56:	bf00      	nop
 8001d58:	f000 f994 	bl	8002084 <finishCheck>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1fa      	bne.n	8001d58 <moveCarRight90+0x68>
	osDelay(50);
 8001d62:	2032      	movs	r0, #50	; 0x32
 8001d64:	f006 fb18 	bl	8008398 <osDelay>
	times_acceptable=0;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <moveCarRight90+0xc0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
	moveCarStraight(-4);
 8001d6e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001da0 <moveCarRight90+0xb0>
 8001d72:	f7ff fe21 	bl	80019b8 <moveCarStraight>
	while(finishCheck());
 8001d76:	bf00      	nop
 8001d78:	f000 f984 	bl	8002084 <finishCheck>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1fa      	bne.n	8001d78 <moveCarRight90+0x88>
	osDelay(500);
 8001d82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d86:	f006 fb07 	bl	8008398 <osDelay>
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	40100000 	.word	0x40100000
 8001da0:	00000000 	.word	0x00000000
 8001da4:	c0100000 	.word	0xc0100000
 8001da8:	20000474 	.word	0x20000474
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000470 	.word	0x20000470
 8001db4:	00000000 	.word	0x00000000

08001db8 <moveCarLeft90>:

void moveCarLeft90(double angle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	ed87 0b00 	vstr	d0, [r7]
	e_brake = 0;
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <moveCarLeft90+0xb8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
	if(angle<0){
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dd8:	f7fe fe80 	bl	8000adc <__aeabi_dcmplt>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <moveCarLeft90+0x30>
		sign=-1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
 8001de6:	60fb      	str	r3, [r7, #12]
	}
	pwmVal_servo = 149; //149
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <moveCarLeft90+0xbc>)
 8001dea:	2295      	movs	r2, #149	; 0x95
 8001dec:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <moveCarLeft90+0xc0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	moveCarStraight(4);
 8001df4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8001e60 <moveCarLeft90+0xa8>
 8001df8:	f7ff fdde 	bl	80019b8 <moveCarStraight>
	while(finishCheck());
 8001dfc:	bf00      	nop
 8001dfe:	f000 f941 	bl	8002084 <finishCheck>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1fa      	bne.n	8001dfe <moveCarLeft90+0x46>
	osDelay(500);
 8001e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e0c:	f006 fac4 	bl	8008398 <osDelay>
	times_acceptable=0;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <moveCarLeft90+0xc0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
	moveCarLeft(angle);
 8001e16:	ed97 0b00 	vldr	d0, [r7]
 8001e1a:	f7ff fe5f 	bl	8001adc <moveCarLeft>
	while(finishCheck());
 8001e1e:	bf00      	nop
 8001e20:	f000 f930 	bl	8002084 <finishCheck>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1fa      	bne.n	8001e20 <moveCarLeft90+0x68>
	osDelay(50);
 8001e2a:	2032      	movs	r0, #50	; 0x32
 8001e2c:	f006 fab4 	bl	8008398 <osDelay>
	times_acceptable=0;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <moveCarLeft90+0xc0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
	moveCarStraight(-4);
 8001e36:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001e68 <moveCarLeft90+0xb0>
 8001e3a:	f7ff fdbd 	bl	80019b8 <moveCarStraight>
	while(finishCheck());
 8001e3e:	bf00      	nop
 8001e40:	f000 f920 	bl	8002084 <finishCheck>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1fa      	bne.n	8001e40 <moveCarLeft90+0x88>
	osDelay(500);
 8001e4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e4e:	f006 faa3 	bl	8008398 <osDelay>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	f3af 8000 	nop.w
 8001e60:	00000000 	.word	0x00000000
 8001e64:	40100000 	.word	0x40100000
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	c0100000 	.word	0xc0100000
 8001e70:	20000474 	.word	0x20000474
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000470 	.word	0x20000470

08001e7c <PID_Control>:


int PID_Control(int error, int right)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
	if(right){//rightMotor
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d018      	beq.n	8001ebe <PID_Control+0x42>
		if(error>0){//go forward
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	dd0a      	ble.n	8001ea8 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001e92:	2201      	movs	r2, #1
 8001e94:	2110      	movs	r1, #16
 8001e96:	4835      	ldr	r0, [pc, #212]	; (8001f6c <PID_Control+0xf0>)
 8001e98:	f001 ffda 	bl	8003e50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2120      	movs	r1, #32
 8001ea0:	4832      	ldr	r0, [pc, #200]	; (8001f6c <PID_Control+0xf0>)
 8001ea2:	f001 ffd5 	bl	8003e50 <HAL_GPIO_WritePin>
 8001ea6:	e022      	b.n	8001eee <PID_Control+0x72>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2110      	movs	r1, #16
 8001eac:	482f      	ldr	r0, [pc, #188]	; (8001f6c <PID_Control+0xf0>)
 8001eae:	f001 ffcf 	bl	8003e50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	482d      	ldr	r0, [pc, #180]	; (8001f6c <PID_Control+0xf0>)
 8001eb8:	f001 ffca 	bl	8003e50 <HAL_GPIO_WritePin>
 8001ebc:	e017      	b.n	8001eee <PID_Control+0x72>
		}
	}else{//leftMotor
		if(error>0){//go forward
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd0a      	ble.n	8001eda <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	4828      	ldr	r0, [pc, #160]	; (8001f6c <PID_Control+0xf0>)
 8001eca:	f001 ffc1 	bl	8003e50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	4826      	ldr	r0, [pc, #152]	; (8001f6c <PID_Control+0xf0>)
 8001ed4:	f001 ffbc 	bl	8003e50 <HAL_GPIO_WritePin>
 8001ed8:	e009      	b.n	8001eee <PID_Control+0x72>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001eda:	2200      	movs	r2, #0
 8001edc:	2108      	movs	r1, #8
 8001ede:	4823      	ldr	r0, [pc, #140]	; (8001f6c <PID_Control+0xf0>)
 8001ee0:	f001 ffb6 	bl	8003e50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	4820      	ldr	r0, [pc, #128]	; (8001f6c <PID_Control+0xf0>)
 8001eea:	f001 ffb1 	bl	8003e50 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bfb8      	it	lt
 8001ef4:	425b      	neglt	r3, r3
 8001ef6:	607b      	str	r3, [r7, #4]
	if(error > 2000){
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001efe:	dd02      	ble.n	8001f06 <PID_Control+0x8a>
		return 3000;
 8001f00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f04:	e02d      	b.n	8001f62 <PID_Control+0xe6>
	}else if(error > 500){
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f0c:	dd02      	ble.n	8001f14 <PID_Control+0x98>
		return 2000;
 8001f0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f12:	e026      	b.n	8001f62 <PID_Control+0xe6>
	}else if(error > 200){
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2bc8      	cmp	r3, #200	; 0xc8
 8001f18:	dd02      	ble.n	8001f20 <PID_Control+0xa4>
		return 1400;
 8001f1a:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001f1e:	e020      	b.n	8001f62 <PID_Control+0xe6>
	}else if(error > 100){
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	dd02      	ble.n	8001f2c <PID_Control+0xb0>
		return 1000;
 8001f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2a:	e01a      	b.n	8001f62 <PID_Control+0xe6>
	}else if(error > 2){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	dd07      	ble.n	8001f42 <PID_Control+0xc6>
		times_acceptable++;
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <PID_Control+0xf4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <PID_Control+0xf4>)
 8001f3a:	6013      	str	r3, [r2, #0]
		return 500;
 8001f3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f40:	e00f      	b.n	8001f62 <PID_Control+0xe6>
	}else if(error >=1){
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	dd06      	ble.n	8001f56 <PID_Control+0xda>
		times_acceptable++;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <PID_Control+0xf4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <PID_Control+0xf4>)
 8001f50:	6013      	str	r3, [r2, #0]
		return 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e005      	b.n	8001f62 <PID_Control+0xe6>
	}else{
		times_acceptable++;
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <PID_Control+0xf4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <PID_Control+0xf4>)
 8001f5e:	6013      	str	r3, [r2, #0]
		return 0;
 8001f60:	2300      	movs	r3, #0
	}
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	20000470 	.word	0x20000470

08001f74 <PID_Angle>:

int PID_Angle(double errord, int right)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f7e:	6078      	str	r0, [r7, #4]
	int error = (int)(errord*10);
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <PID_Angle+0x104>)
 8001f86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f8a:	f7fe fb35 	bl	80005f8 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7fe fddf 	bl	8000b58 <__aeabi_d2iz>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	617b      	str	r3, [r7, #20]
	if(right){//rightMotor
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d018      	beq.n	8001fd6 <PID_Angle+0x62>
		if(error>0){//go forward
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	dd0a      	ble.n	8001fc0 <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8001faa:	2201      	movs	r2, #1
 8001fac:	2110      	movs	r1, #16
 8001fae:	4833      	ldr	r0, [pc, #204]	; (800207c <PID_Angle+0x108>)
 8001fb0:	f001 ff4e 	bl	8003e50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2120      	movs	r1, #32
 8001fb8:	4830      	ldr	r0, [pc, #192]	; (800207c <PID_Angle+0x108>)
 8001fba:	f001 ff49 	bl	8003e50 <HAL_GPIO_WritePin>
 8001fbe:	e022      	b.n	8002006 <PID_Angle+0x92>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	482d      	ldr	r0, [pc, #180]	; (800207c <PID_Angle+0x108>)
 8001fc6:	f001 ff43 	bl	8003e50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	2120      	movs	r1, #32
 8001fce:	482b      	ldr	r0, [pc, #172]	; (800207c <PID_Angle+0x108>)
 8001fd0:	f001 ff3e 	bl	8003e50 <HAL_GPIO_WritePin>
 8001fd4:	e017      	b.n	8002006 <PID_Angle+0x92>
		}
	}else{//leftMotor
		if(error<0){//go forward
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da0a      	bge.n	8001ff2 <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2108      	movs	r1, #8
 8001fe0:	4826      	ldr	r0, [pc, #152]	; (800207c <PID_Angle+0x108>)
 8001fe2:	f001 ff35 	bl	8003e50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2104      	movs	r1, #4
 8001fea:	4824      	ldr	r0, [pc, #144]	; (800207c <PID_Angle+0x108>)
 8001fec:	f001 ff30 	bl	8003e50 <HAL_GPIO_WritePin>
 8001ff0:	e009      	b.n	8002006 <PID_Angle+0x92>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2108      	movs	r1, #8
 8001ff6:	4821      	ldr	r0, [pc, #132]	; (800207c <PID_Angle+0x108>)
 8001ff8:	f001 ff2a 	bl	8003e50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2104      	movs	r1, #4
 8002000:	481e      	ldr	r0, [pc, #120]	; (800207c <PID_Angle+0x108>)
 8002002:	f001 ff25 	bl	8003e50 <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	bfb8      	it	lt
 800200c:	425b      	neglt	r3, r3
 800200e:	617b      	str	r3, [r7, #20]
	if(error > 300){
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002016:	dd02      	ble.n	800201e <PID_Angle+0xaa>
		return 3000;
 8002018:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800201c:	e028      	b.n	8002070 <PID_Angle+0xfc>
	}else if(error > 200){
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2bc8      	cmp	r3, #200	; 0xc8
 8002022:	dd02      	ble.n	800202a <PID_Angle+0xb6>
		return 2000;
 8002024:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002028:	e022      	b.n	8002070 <PID_Angle+0xfc>
	}else if(error > 150){
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b96      	cmp	r3, #150	; 0x96
 800202e:	dd02      	ble.n	8002036 <PID_Angle+0xc2>
		return 1600;
 8002030:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002034:	e01c      	b.n	8002070 <PID_Angle+0xfc>
	}else if(error > 100){
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b64      	cmp	r3, #100	; 0x64
 800203a:	dd02      	ble.n	8002042 <PID_Angle+0xce>
		return 1400;
 800203c:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8002040:	e016      	b.n	8002070 <PID_Angle+0xfc>
	}else if(error >10){
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b0a      	cmp	r3, #10
 8002046:	dd02      	ble.n	800204e <PID_Angle+0xda>
		return 1000;
 8002048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204c:	e010      	b.n	8002070 <PID_Angle+0xfc>
	}else if(error >=2){
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b01      	cmp	r3, #1
 8002052:	dd07      	ble.n	8002064 <PID_Angle+0xf0>
		times_acceptable++;
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <PID_Angle+0x10c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <PID_Angle+0x10c>)
 800205c:	6013      	str	r3, [r2, #0]
		return 600;
 800205e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002062:	e005      	b.n	8002070 <PID_Angle+0xfc>
	}else{
		times_acceptable++;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <PID_Angle+0x10c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <PID_Angle+0x10c>)
 800206c:	6013      	str	r3, [r2, #0]
		return 0;
 800206e:	2300      	movs	r3, #0
	}
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40240000 	.word	0x40240000
 800207c:	40020000 	.word	0x40020000
 8002080:	20000470 	.word	0x20000470

08002084 <finishCheck>:

int finishCheck(){
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	if (times_acceptable > 20){
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <finishCheck+0x48>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b14      	cmp	r3, #20
 800208e:	dd1a      	ble.n	80020c6 <finishCheck+0x42>
		e_brake = 1;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <finishCheck+0x4c>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <finishCheck+0x50>)
 8002098:	2200      	movs	r2, #0
 800209a:	801a      	strh	r2, [r3, #0]
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <finishCheck+0x50>)
 800209e:	881a      	ldrh	r2, [r3, #0]
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <finishCheck+0x54>)
 80020a2:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <finishCheck+0x58>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <finishCheck+0x5c>)
 80020aa:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <finishCheck+0x60>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <finishCheck+0x64>)
 80020b2:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <finishCheck+0x48>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
	    osDelay(300);
 80020ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020be:	f006 f96b 	bl	8008398 <osDelay>

		return 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <finishCheck+0x44>
	}
	return 1;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000470 	.word	0x20000470
 80020d0:	20000474 	.word	0x20000474
 80020d4:	2000046c 	.word	0x2000046c
 80020d8:	2000046e 	.word	0x2000046e
 80020dc:	2000047c 	.word	0x2000047c
 80020e0:	20000484 	.word	0x20000484
 80020e4:	20000478 	.word	0x20000478
 80020e8:	20000480 	.word	0x20000480

080020ec <readByte>:


void readByte(uint8_t addr, uint8_t* data){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 80020f8:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <readByte+0x4c>)
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress<<1, gyroBuffer, 1, 10);
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <readByte+0x50>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	b299      	uxth	r1, r3
 8002108:	230a      	movs	r3, #10
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2301      	movs	r3, #1
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <readByte+0x4c>)
 8002110:	480b      	ldr	r0, [pc, #44]	; (8002140 <readByte+0x54>)
 8002112:	f002 f815 	bl	8004140 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress<<1, data, 2, 20);
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <readByte+0x50>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	b299      	uxth	r1, r3
 8002120:	2314      	movs	r3, #20
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2302      	movs	r3, #2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <readByte+0x54>)
 800212a:	f002 f907 	bl	800433c <HAL_I2C_Master_Receive>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000498 	.word	0x20000498
 800213c:	20000002 	.word	0x20000002
 8002140:	20000204 	.word	0x20000204

08002144 <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af02      	add	r7, sp, #8
 800214a:	4603      	mov	r3, r0
 800214c:	460a      	mov	r2, r1
 800214e:	71fb      	strb	r3, [r7, #7]
 8002150:	4613      	mov	r3, r2
 8002152:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <writeByte+0x3c>)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <writeByte+0x3c>)
 800215c:	79bb      	ldrb	r3, [r7, #6]
 800215e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <writeByte+0x40>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	b299      	uxth	r1, r3
 800216a:	2314      	movs	r3, #20
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2302      	movs	r3, #2
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <writeByte+0x3c>)
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <writeByte+0x44>)
 8002174:	f001 ffe4 	bl	8004140 <HAL_I2C_Master_Transmit>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000498 	.word	0x20000498
 8002184:	20000002 	.word	0x20000002
 8002188:	20000204 	.word	0x20000204

0800218c <gyroInit>:

void gyroInit(){
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8002190:	2100      	movs	r1, #0
 8002192:	2006      	movs	r0, #6
 8002194:	f7ff ffd6 	bl	8002144 <writeByte>
	osDelay(10);
 8002198:	200a      	movs	r0, #10
 800219a:	f006 f8fd 	bl	8008398 <osDelay>
	writeByte(0x03, 0x80);
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	2003      	movs	r0, #3
 80021a2:	f7ff ffcf 	bl	8002144 <writeByte>
	osDelay(10);
 80021a6:	200a      	movs	r0, #10
 80021a8:	f006 f8f6 	bl	8008398 <osDelay>
	writeByte(0x07, 0x07);
 80021ac:	2107      	movs	r1, #7
 80021ae:	2007      	movs	r0, #7
 80021b0:	f7ff ffc8 	bl	8002144 <writeByte>
	osDelay(10);
 80021b4:	200a      	movs	r0, #10
 80021b6:	f006 f8ef 	bl	8008398 <osDelay>
	writeByte(0x06, 0x01);
 80021ba:	2101      	movs	r1, #1
 80021bc:	2006      	movs	r0, #6
 80021be:	f7ff ffc1 	bl	8002144 <writeByte>
	osDelay(10);
 80021c2:	200a      	movs	r0, #10
 80021c4:	f006 f8e8 	bl	8008398 <osDelay>
	writeByte(0x7F, 0x20);
 80021c8:	2120      	movs	r1, #32
 80021ca:	207f      	movs	r0, #127	; 0x7f
 80021cc:	f7ff ffba 	bl	8002144 <writeByte>
	osDelay(10);
 80021d0:	200a      	movs	r0, #10
 80021d2:	f006 f8e1 	bl	8008398 <osDelay>
	writeByte(0x01, 0x2F);
 80021d6:	212f      	movs	r1, #47	; 0x2f
 80021d8:	2001      	movs	r0, #1
 80021da:	f7ff ffb3 	bl	8002144 <writeByte>
	osDelay(10);
 80021de:	200a      	movs	r0, #10
 80021e0:	f006 f8da 	bl	8008398 <osDelay>
	writeByte(0x0, 0x00);
 80021e4:	2100      	movs	r1, #0
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff ffac 	bl	8002144 <writeByte>
	osDelay(10);
 80021ec:	200a      	movs	r0, #10
 80021ee:	f006 f8d3 	bl	8008398 <osDelay>
	writeByte(0x7F, 0x00);
 80021f2:	2100      	movs	r1, #0
 80021f4:	207f      	movs	r0, #127	; 0x7f
 80021f6:	f7ff ffa5 	bl	8002144 <writeByte>
	osDelay(10);
 80021fa:	200a      	movs	r0, #10
 80021fc:	f006 f8cc 	bl	8008398 <osDelay>
	writeByte(0x07, 0x00);
 8002200:	2100      	movs	r1, #0
 8002202:	2007      	movs	r0, #7
 8002204:	f7ff ff9e 	bl	8002144 <writeByte>
	osDelay(10);
 8002208:	200a      	movs	r0, #10
 800220a:	f006 f8c5 	bl	8008398 <osDelay>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t msg [20];
	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_1);  // HC-SR04 Sensor
 800221c:	2100      	movs	r1, #0
 800221e:	4807      	ldr	r0, [pc, #28]	; (800223c <StartDefaultTask+0x28>)
 8002220:	f003 fc20 	bl	8005a64 <HAL_TIM_IC_Start_IT>


  /* Infinite loop */
  uint8_t ch = 'A';
 8002224:	2341      	movs	r3, #65	; 0x41
 8002226:	77fb      	strb	r3, [r7, #31]
//	    if (ch <'F'){
//	    	ch++;
//	    }else{
//	    	ch = 'A';
//	    }
	    osDelay(2000);
 8002228:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800222c:	f006 f8b4 	bl	8008398 <osDelay>

		HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8002230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <StartDefaultTask+0x2c>)
 8002236:	f001 fe24 	bl	8003e82 <HAL_GPIO_TogglePin>
	    osDelay(2000);
 800223a:	e7f5      	b.n	8002228 <StartDefaultTask+0x14>
 800223c:	20000330 	.word	0x20000330
 8002240:	40021000 	.word	0x40021000
 8002244:	00000000 	.word	0x00000000

08002248 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 8002250:	4bab      	ldr	r3, [pc, #684]	; (8002500 <StartMotorTask+0x2b8>)
 8002252:	2200      	movs	r2, #0
 8002254:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 8002256:	4bab      	ldr	r3, [pc, #684]	; (8002504 <StartMotorTask+0x2bc>)
 8002258:	2200      	movs	r2, #0
 800225a:	801a      	strh	r2, [r3, #0]
	int straightCorrection=0;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002260:	2100      	movs	r1, #0
 8002262:	48a9      	ldr	r0, [pc, #676]	; (8002508 <StartMotorTask+0x2c0>)
 8002264:	f003 fae6 	bl	8005834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002268:	2104      	movs	r1, #4
 800226a:	48a7      	ldr	r0, [pc, #668]	; (8002508 <StartMotorTask+0x2c0>)
 800226c:	f003 fae2 	bl	8005834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002270:	210c      	movs	r1, #12
 8002272:	48a6      	ldr	r0, [pc, #664]	; (800250c <StartMotorTask+0x2c4>)
 8002274:	f003 fade 	bl	8005834 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = 149; //Centre
 8002278:	4ba4      	ldr	r3, [pc, #656]	; (800250c <StartMotorTask+0x2c4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2295      	movs	r2, #149	; 0x95
 800227e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8002280:	2201      	movs	r2, #1
 8002282:	2110      	movs	r1, #16
 8002284:	48a2      	ldr	r0, [pc, #648]	; (8002510 <StartMotorTask+0x2c8>)
 8002286:	f001 fde3 	bl	8003e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	2120      	movs	r1, #32
 800228e:	48a0      	ldr	r0, [pc, #640]	; (8002510 <StartMotorTask+0x2c8>)
 8002290:	f001 fdde 	bl	8003e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8002294:	2201      	movs	r2, #1
 8002296:	2108      	movs	r1, #8
 8002298:	489d      	ldr	r0, [pc, #628]	; (8002510 <StartMotorTask+0x2c8>)
 800229a:	f001 fdd9 	bl	8003e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	2104      	movs	r1, #4
 80022a2:	489b      	ldr	r0, [pc, #620]	; (8002510 <StartMotorTask+0x2c8>)
 80022a4:	f001 fdd4 	bl	8003e50 <HAL_GPIO_WritePin>
	osDelay(1000);
 80022a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022ac:	f006 f874 	bl	8008398 <osDelay>


  /* Infinite loop */
  for(;;)
  {
		htim1.Instance->CCR4 = pwmVal_servo;
 80022b0:	4b98      	ldr	r3, [pc, #608]	; (8002514 <StartMotorTask+0x2cc>)
 80022b2:	881a      	ldrh	r2, [r3, #0]
 80022b4:	4b95      	ldr	r3, [pc, #596]	; (800250c <StartMotorTask+0x2c4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
		double error_angle = target_angle - total_angle;
 80022ba:	4b97      	ldr	r3, [pc, #604]	; (8002518 <StartMotorTask+0x2d0>)
 80022bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c0:	4b96      	ldr	r3, [pc, #600]	; (800251c <StartMotorTask+0x2d4>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fd ffdf 	bl	8000288 <__aeabi_dsub>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
//		if(aRxBuffer[0] = ' '){
//			pwmVal_L = pwmVal_R = 0;
//
//		}else
			if (pwmVal_servo < 127){ //106 //TURN LEFT
 80022d2:	4b90      	ldr	r3, [pc, #576]	; (8002514 <StartMotorTask+0x2cc>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	2b7e      	cmp	r3, #126	; 0x7e
 80022d8:	d84c      	bhi.n	8002374 <StartMotorTask+0x12c>
			pwmVal_R = PID_Angle(error_angle, 1)*1.072;  //right is master
 80022da:	2001      	movs	r0, #1
 80022dc:	ed97 0b02 	vldr	d0, [r7, #8]
 80022e0:	f7ff fe48 	bl	8001f74 <PID_Angle>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f91c 	bl	8000524 <__aeabi_i2d>
 80022ec:	a380      	add	r3, pc, #512	; (adr r3, 80024f0 <StartMotorTask+0x2a8>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f981 	bl	80005f8 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fc53 	bl	8000ba8 <__aeabi_d2uiz>
 8002302:	4603      	mov	r3, r0
 8002304:	b29a      	uxth	r2, r3
 8002306:	4b7e      	ldr	r3, [pc, #504]	; (8002500 <StartMotorTask+0x2b8>)
 8002308:	801a      	strh	r2, [r3, #0]
			pwmVal_L = pwmVal_R*(0.59); //left is slave
 800230a:	4b7d      	ldr	r3, [pc, #500]	; (8002500 <StartMotorTask+0x2b8>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f908 	bl	8000524 <__aeabi_i2d>
 8002314:	a378      	add	r3, pc, #480	; (adr r3, 80024f8 <StartMotorTask+0x2b0>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe f96d 	bl	80005f8 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f7fe fc3f 	bl	8000ba8 <__aeabi_d2uiz>
 800232a:	4603      	mov	r3, r0
 800232c:	b29a      	uxth	r2, r3
 800232e:	4b75      	ldr	r3, [pc, #468]	; (8002504 <StartMotorTask+0x2bc>)
 8002330:	801a      	strh	r2, [r3, #0]

			if(error_angle>0){
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800233e:	f7fe fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <StartMotorTask+0x116>
				//go forward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 8002348:	2201      	movs	r2, #1
 800234a:	2108      	movs	r1, #8
 800234c:	4870      	ldr	r0, [pc, #448]	; (8002510 <StartMotorTask+0x2c8>)
 800234e:	f001 fd7f 	bl	8003e50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	2104      	movs	r1, #4
 8002356:	486e      	ldr	r0, [pc, #440]	; (8002510 <StartMotorTask+0x2c8>)
 8002358:	f001 fd7a 	bl	8003e50 <HAL_GPIO_WritePin>
 800235c:	e14f      	b.n	80025fe <StartMotorTask+0x3b6>
			}
			else{
				//go backward
			    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 800235e:	2200      	movs	r2, #0
 8002360:	2108      	movs	r1, #8
 8002362:	486b      	ldr	r0, [pc, #428]	; (8002510 <StartMotorTask+0x2c8>)
 8002364:	f001 fd74 	bl	8003e50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002368:	2201      	movs	r2, #1
 800236a:	2104      	movs	r1, #4
 800236c:	4868      	ldr	r0, [pc, #416]	; (8002510 <StartMotorTask+0x2c8>)
 800236e:	f001 fd6f 	bl	8003e50 <HAL_GPIO_WritePin>
 8002372:	e144      	b.n	80025fe <StartMotorTask+0x3b6>
			}
		}

		else if (pwmVal_servo > 189){ //230 //TURN RIGHT
 8002374:	4b67      	ldr	r3, [pc, #412]	; (8002514 <StartMotorTask+0x2cc>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	2bbd      	cmp	r3, #189	; 0xbd
 800237a:	d93d      	bls.n	80023f8 <StartMotorTask+0x1b0>
			pwmVal_L = PID_Angle(error_angle, 0);
 800237c:	2000      	movs	r0, #0
 800237e:	ed97 0b02 	vldr	d0, [r7, #8]
 8002382:	f7ff fdf7 	bl	8001f74 <PID_Angle>
 8002386:	4603      	mov	r3, r0
 8002388:	b29a      	uxth	r2, r3
 800238a:	4b5e      	ldr	r3, [pc, #376]	; (8002504 <StartMotorTask+0x2bc>)
 800238c:	801a      	strh	r2, [r3, #0]
			pwmVal_R = pwmVal_L*(0.59); //right is slave
 800238e:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <StartMotorTask+0x2bc>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f8c6 	bl	8000524 <__aeabi_i2d>
 8002398:	a357      	add	r3, pc, #348	; (adr r3, 80024f8 <StartMotorTask+0x2b0>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f7fe f92b 	bl	80005f8 <__aeabi_dmul>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7fe fbfd 	bl	8000ba8 <__aeabi_d2uiz>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	4b53      	ldr	r3, [pc, #332]	; (8002500 <StartMotorTask+0x2b8>)
 80023b4:	801a      	strh	r2, [r3, #0]

			if(error_angle<0){
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023c2:	f7fe fb8b 	bl	8000adc <__aeabi_dcmplt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <StartMotorTask+0x19a>
				//go forward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 80023cc:	2201      	movs	r2, #1
 80023ce:	2110      	movs	r1, #16
 80023d0:	484f      	ldr	r0, [pc, #316]	; (8002510 <StartMotorTask+0x2c8>)
 80023d2:	f001 fd3d 	bl	8003e50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2120      	movs	r1, #32
 80023da:	484d      	ldr	r0, [pc, #308]	; (8002510 <StartMotorTask+0x2c8>)
 80023dc:	f001 fd38 	bl	8003e50 <HAL_GPIO_WritePin>
 80023e0:	e10d      	b.n	80025fe <StartMotorTask+0x3b6>
			}
			else{
				//go backward
			    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 80023e2:	2200      	movs	r2, #0
 80023e4:	2110      	movs	r1, #16
 80023e6:	484a      	ldr	r0, [pc, #296]	; (8002510 <StartMotorTask+0x2c8>)
 80023e8:	f001 fd32 	bl	8003e50 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80023ec:	2201      	movs	r2, #1
 80023ee:	2120      	movs	r1, #32
 80023f0:	4847      	ldr	r0, [pc, #284]	; (8002510 <StartMotorTask+0x2c8>)
 80023f2:	f001 fd2d 	bl	8003e50 <HAL_GPIO_WritePin>
 80023f6:	e102      	b.n	80025fe <StartMotorTask+0x3b6>
		}

		else {


			pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0)*1.072;
 80023f8:	4b49      	ldr	r3, [pc, #292]	; (8002520 <StartMotorTask+0x2d8>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b49      	ldr	r3, [pc, #292]	; (8002524 <StartMotorTask+0x2dc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fd39 	bl	8001e7c <PID_Control>
 800240a:	4603      	mov	r3, r0
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe f889 	bl	8000524 <__aeabi_i2d>
 8002412:	a337      	add	r3, pc, #220	; (adr r3, 80024f0 <StartMotorTask+0x2a8>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fe f8ee 	bl	80005f8 <__aeabi_dmul>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f7fe fbc0 	bl	8000ba8 <__aeabi_d2uiz>
 8002428:	4603      	mov	r3, r0
 800242a:	b29a      	uxth	r2, r3
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <StartMotorTask+0x2b8>)
 800242e:	801a      	strh	r2, [r3, #0]
			if (abs(leftTarget - leftEncoderVal)>abs(rightTarget - rightEncoderVal)){
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <StartMotorTask+0x2d8>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <StartMotorTask+0x2dc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800243e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002442:	4b39      	ldr	r3, [pc, #228]	; (8002528 <StartMotorTask+0x2e0>)
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <StartMotorTask+0x2e4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	1acb      	subs	r3, r1, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	bfb8      	it	lt
 8002450:	425b      	neglt	r3, r3
 8002452:	429a      	cmp	r2, r3
 8002454:	dd03      	ble.n	800245e <StartMotorTask+0x216>
				straightCorrection++;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3301      	adds	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e002      	b.n	8002464 <StartMotorTask+0x21c>
			}else{ straightCorrection--;}
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3b01      	subs	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
			if (abs(leftTarget - leftEncoderVal)<100){
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <StartMotorTask+0x2d8>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <StartMotorTask+0x2dc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002472:	db08      	blt.n	8002486 <StartMotorTask+0x23e>
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <StartMotorTask+0x2d8>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <StartMotorTask+0x2dc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b63      	cmp	r3, #99	; 0x63
 8002480:	dc01      	bgt.n	8002486 <StartMotorTask+0x23e>
				straightCorrection=0;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
			}
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)+straightCorrection;
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <StartMotorTask+0x2e0>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <StartMotorTask+0x2e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2101      	movs	r1, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fcf2 	bl	8001e7c <PID_Control>
 8002498:	4603      	mov	r3, r0
 800249a:	b29a      	uxth	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <StartMotorTask+0x2bc>)
 80024a6:	801a      	strh	r2, [r3, #0]


			if ((leftTarget - leftEncoderVal)<0){
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <StartMotorTask+0x2d8>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <StartMotorTask+0x2dc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	da64      	bge.n	8002580 <StartMotorTask+0x338>
				if (error_angle>5){ // if turn left, 106. right 230. left +. right -.
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <StartMotorTask+0x2e8>)
 80024bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024c0:	f7fe fb2a 	bl	8000b18 <__aeabi_dcmpgt>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <StartMotorTask+0x28a>
							pwmVal_servo=((19*5)/5 + 149);
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <StartMotorTask+0x2cc>)
 80024cc:	22a8      	movs	r2, #168	; 0xa8
 80024ce:	801a      	strh	r2, [r3, #0]
 80024d0:	e095      	b.n	80025fe <StartMotorTask+0x3b6>
						}
						else if(error_angle<-5){
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <StartMotorTask+0x2ec>)
 80024d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024dc:	f7fe fafe 	bl	8000adc <__aeabi_dcmplt>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d028      	beq.n	8002538 <StartMotorTask+0x2f0>
							pwmVal_servo=((-19*5)/5 + 149);
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <StartMotorTask+0x2cc>)
 80024e8:	2282      	movs	r2, #130	; 0x82
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	e087      	b.n	80025fe <StartMotorTask+0x3b6>
 80024ee:	bf00      	nop
 80024f0:	78d4fdf4 	.word	0x78d4fdf4
 80024f4:	3ff126e9 	.word	0x3ff126e9
 80024f8:	ae147ae1 	.word	0xae147ae1
 80024fc:	3fe2e147 	.word	0x3fe2e147
 8002500:	2000046c 	.word	0x2000046c
 8002504:	2000046e 	.word	0x2000046e
 8002508:	20000378 	.word	0x20000378
 800250c:	20000258 	.word	0x20000258
 8002510:	40020000 	.word	0x40020000
 8002514:	20000000 	.word	0x20000000
 8002518:	20000488 	.word	0x20000488
 800251c:	20000490 	.word	0x20000490
 8002520:	20000484 	.word	0x20000484
 8002524:	2000047c 	.word	0x2000047c
 8002528:	20000480 	.word	0x20000480
 800252c:	20000478 	.word	0x20000478
 8002530:	40140000 	.word	0x40140000
 8002534:	c0140000 	.word	0xc0140000
						}else{
							pwmVal_servo=((19*error_angle)/5 + 149);
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	4b48      	ldr	r3, [pc, #288]	; (8002660 <StartMotorTask+0x418>)
 800253e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002542:	f7fe f859 	bl	80005f8 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b44      	ldr	r3, [pc, #272]	; (8002664 <StartMotorTask+0x41c>)
 8002554:	f7fe f97a 	bl	800084c <__aeabi_ddiv>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	a33d      	add	r3, pc, #244	; (adr r3, 8002658 <StartMotorTask+0x410>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f7fd fe91 	bl	800028c <__adddf3>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb19 	bl	8000ba8 <__aeabi_d2uiz>
 8002576:	4603      	mov	r3, r0
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <StartMotorTask+0x420>)
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	e03e      	b.n	80025fe <StartMotorTask+0x3b6>
						}

			}else{
				if (error_angle>5){ // if turn left, 106. right 230. left +. right -.
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	4b37      	ldr	r3, [pc, #220]	; (8002664 <StartMotorTask+0x41c>)
 8002586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800258a:	f7fe fac5 	bl	8000b18 <__aeabi_dcmpgt>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <StartMotorTask+0x354>
							pwmVal_servo=((-19*5)/5 + 149);
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <StartMotorTask+0x420>)
 8002596:	2282      	movs	r2, #130	; 0x82
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	e030      	b.n	80025fe <StartMotorTask+0x3b6>
						}
						else if(error_angle<-5){
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	4b32      	ldr	r3, [pc, #200]	; (800266c <StartMotorTask+0x424>)
 80025a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025a6:	f7fe fa99 	bl	8000adc <__aeabi_dcmplt>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <StartMotorTask+0x370>
							pwmVal_servo=((19*5)/5 + 149);
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <StartMotorTask+0x420>)
 80025b2:	22a8      	movs	r2, #168	; 0xa8
 80025b4:	801a      	strh	r2, [r3, #0]
 80025b6:	e022      	b.n	80025fe <StartMotorTask+0x3b6>
						}else{
							pwmVal_servo=((-19*error_angle)/5 + 149);
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <StartMotorTask+0x428>)
 80025be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025c2:	f7fe f819 	bl	80005f8 <__aeabi_dmul>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <StartMotorTask+0x41c>)
 80025d4:	f7fe f93a 	bl	800084c <__aeabi_ddiv>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	a31d      	add	r3, pc, #116	; (adr r3, 8002658 <StartMotorTask+0x410>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fd fe51 	bl	800028c <__adddf3>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fe fad9 	bl	8000ba8 <__aeabi_d2uiz>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <StartMotorTask+0x420>)
 80025fc:	801a      	strh	r2, [r3, #0]


			//line correction equation is pwmVal = (19*error)/5 + 149
		}

		if(e_brake){
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <StartMotorTask+0x42c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <StartMotorTask+0x3dc>
			pwmVal_L = pwmVal_R = 0;
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <StartMotorTask+0x430>)
 8002608:	2200      	movs	r2, #0
 800260a:	801a      	strh	r2, [r3, #0]
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <StartMotorTask+0x430>)
 800260e:	881a      	ldrh	r2, [r3, #0]
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <StartMotorTask+0x434>)
 8002612:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <StartMotorTask+0x438>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <StartMotorTask+0x43c>)
 800261a:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <StartMotorTask+0x440>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1a      	ldr	r2, [pc, #104]	; (800268c <StartMotorTask+0x444>)
 8002622:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <StartMotorTask+0x434>)
 8002626:	881a      	ldrh	r2, [r3, #0]
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <StartMotorTask+0x448>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R);
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <StartMotorTask+0x430>)
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <StartMotorTask+0x448>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(1);
 8002638:	2001      	movs	r0, #1
 800263a:	f005 fead 	bl	8008398 <osDelay>

		if (times_acceptable>1000){
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <StartMotorTask+0x44c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002646:	f77f ae33 	ble.w	80022b0 <StartMotorTask+0x68>
			times_acceptable=1001;
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <StartMotorTask+0x44c>)
 800264c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002650:	601a      	str	r2, [r3, #0]
  {
 8002652:	e62d      	b.n	80022b0 <StartMotorTask+0x68>
 8002654:	f3af 8000 	nop.w
 8002658:	00000000 	.word	0x00000000
 800265c:	4062a000 	.word	0x4062a000
 8002660:	40330000 	.word	0x40330000
 8002664:	40140000 	.word	0x40140000
 8002668:	20000000 	.word	0x20000000
 800266c:	c0140000 	.word	0xc0140000
 8002670:	c0330000 	.word	0xc0330000
 8002674:	20000474 	.word	0x20000474
 8002678:	2000046c 	.word	0x2000046c
 800267c:	2000046e 	.word	0x2000046e
 8002680:	2000047c 	.word	0x2000047c
 8002684:	20000484 	.word	0x20000484
 8002688:	20000478 	.word	0x20000478
 800268c:	20000480 	.word	0x20000480
 8002690:	20000378 	.word	0x20000378
 8002694:	20000470 	.word	0x20000470

08002698 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b0aa      	sub	sp, #168	; 0xa8
 800269c:	af04      	add	r7, sp, #16
 800269e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	uint8_t hello [20] = {0};
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
	uint8_t clear[20] = {0};
 80026b4:	2300      	movs	r3, #0
 80026b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
	uint8_t lefty[20] = {0};
 80026c6:	2300      	movs	r3, #0
 80026c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80026ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
	uint8_t righty[20] = {0};
 80026d8:	2300      	movs	r3, #0
 80026da:	647b      	str	r3, [r7, #68]	; 0x44
 80026dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
	uint8_t motorD[20] = {0};
 80026ea:	2300      	movs	r3, #0
 80026ec:	633b      	str	r3, [r7, #48]	; 0x30
 80026ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
	uint8_t check[20] = {0};
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
	uint8_t debugMsg[20] = "hello\0";
 800270e:	4a64      	ldr	r2, [pc, #400]	; (80028a0 <StartOledTask+0x208>)
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002718:	6018      	str	r0, [r3, #0]
 800271a:	3304      	adds	r3, #4
 800271c:	8019      	strh	r1, [r3, #0]
 800271e:	3302      	adds	r3, #2
 8002720:	0c0a      	lsrs	r2, r1, #16
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	f107 030f 	add.w	r3, r7, #15
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	731a      	strb	r2, [r3, #12]
  for(;;)
  {


	//sprintf(clear, "L:%d | R:%d     ", (int)(leftTarget - leftEncoderVal), (int)(rightTarget-rightEncoderVal));
	sprintf(clear, "US: %d\0", (int)uDistance);
 8002732:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <StartOledTask+0x20c>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe fa0c 	bl	8000b58 <__aeabi_d2iz>
 8002740:	4602      	mov	r2, r0
 8002742:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002746:	4958      	ldr	r1, [pc, #352]	; (80028a8 <StartOledTask+0x210>)
 8002748:	4618      	mov	r0, r3
 800274a:	f009 fbab 	bl	800bea4 <siprintf>

	OLED_ShowString(0, 10, clear);
 800274e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002752:	461a      	mov	r2, r3
 8002754:	210a      	movs	r1, #10
 8002756:	2000      	movs	r0, #0
 8002758:	f008 fc34 	bl	800afc4 <OLED_ShowString>


	//sprintf(righty,"Gyro: %d \0", (int)total_angle);
	int decimals = abs((int)((total_angle-(int)(total_angle))*1000));
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <StartOledTask+0x214>)
 800275e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002762:	4b52      	ldr	r3, [pc, #328]	; (80028ac <StartOledTask+0x214>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe f9f4 	bl	8000b58 <__aeabi_d2iz>
 8002770:	4603      	mov	r3, r0
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fed6 	bl	8000524 <__aeabi_i2d>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4620      	mov	r0, r4
 800277e:	4629      	mov	r1, r5
 8002780:	f7fd fd82 	bl	8000288 <__aeabi_dsub>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <StartOledTask+0x218>)
 8002792:	f7fd ff31 	bl	80005f8 <__aeabi_dmul>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	f7fe f9db 	bl	8000b58 <__aeabi_d2iz>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bfb8      	it	lt
 80027a8:	425b      	neglt	r3, r3
 80027aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sprintf(righty,"Gyro: %d.%d \0", (int)total_angle, decimals);
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <StartOledTask+0x214>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe f9ce 	bl	8000b58 <__aeabi_d2iz>
 80027bc:	4602      	mov	r2, r0
 80027be:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80027c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027c6:	493b      	ldr	r1, [pc, #236]	; (80028b4 <StartOledTask+0x21c>)
 80027c8:	f009 fb6c 	bl	800bea4 <siprintf>
	OLED_ShowString(0, 20, righty);
 80027cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027d0:	461a      	mov	r2, r3
 80027d2:	2114      	movs	r1, #20
 80027d4:	2000      	movs	r0, #0
 80027d6:	f008 fbf5 	bl	800afc4 <OLED_ShowString>

	//sprintf(lefty, "US: %d\0", (int)uDistance);

	sprintf(lefty, "S: %c %c %c%c%c \0", old_Buff1[0], old_Buff1[1], old_Buff1[2], old_Buff1[3], old_Buff1[4]);
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <StartOledTask+0x220>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461c      	mov	r4, r3
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <StartOledTask+0x220>)
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	461d      	mov	r5, r3
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <StartOledTask+0x220>)
 80027e8:	789b      	ldrb	r3, [r3, #2]
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <StartOledTask+0x220>)
 80027ee:	78db      	ldrb	r3, [r3, #3]
 80027f0:	4619      	mov	r1, r3
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <StartOledTask+0x220>)
 80027f4:	791b      	ldrb	r3, [r3, #4]
 80027f6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80027fa:	9302      	str	r3, [sp, #8]
 80027fc:	9101      	str	r1, [sp, #4]
 80027fe:	9200      	str	r2, [sp, #0]
 8002800:	462b      	mov	r3, r5
 8002802:	4622      	mov	r2, r4
 8002804:	492d      	ldr	r1, [pc, #180]	; (80028bc <StartOledTask+0x224>)
 8002806:	f009 fb4d 	bl	800bea4 <siprintf>

	OLED_ShowString(0, 30, lefty);
 800280a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800280e:	461a      	mov	r2, r3
 8002810:	211e      	movs	r1, #30
 8002812:	2000      	movs	r0, #0
 8002814:	f008 fbd6 	bl	800afc4 <OLED_ShowString>




	sprintf(motorD, "O: %c %c %c%c%c \0", old_Buff[0], old_Buff[1], old_Buff[2], old_Buff[3], old_Buff[4]);
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <StartOledTask+0x228>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461c      	mov	r4, r3
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <StartOledTask+0x228>)
 8002820:	785b      	ldrb	r3, [r3, #1]
 8002822:	461d      	mov	r5, r3
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <StartOledTask+0x228>)
 8002826:	789b      	ldrb	r3, [r3, #2]
 8002828:	461a      	mov	r2, r3
 800282a:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <StartOledTask+0x228>)
 800282c:	78db      	ldrb	r3, [r3, #3]
 800282e:	4619      	mov	r1, r3
 8002830:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <StartOledTask+0x228>)
 8002832:	791b      	ldrb	r3, [r3, #4]
 8002834:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	9101      	str	r1, [sp, #4]
 800283c:	9200      	str	r2, [sp, #0]
 800283e:	462b      	mov	r3, r5
 8002840:	4622      	mov	r2, r4
 8002842:	4920      	ldr	r1, [pc, #128]	; (80028c4 <StartOledTask+0x22c>)
 8002844:	f009 fb2e 	bl	800bea4 <siprintf>
	OLED_ShowString(0, 40, motorD);
 8002848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800284c:	461a      	mov	r2, r3
 800284e:	2128      	movs	r1, #40	; 0x28
 8002850:	2000      	movs	r0, #0
 8002852:	f008 fbb7 	bl	800afc4 <OLED_ShowString>

	sprintf(check, "K: %c %c %c%c%c \0", aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 8002856:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <StartOledTask+0x230>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461c      	mov	r4, r3
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <StartOledTask+0x230>)
 800285e:	785b      	ldrb	r3, [r3, #1]
 8002860:	461d      	mov	r5, r3
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <StartOledTask+0x230>)
 8002864:	789b      	ldrb	r3, [r3, #2]
 8002866:	461a      	mov	r2, r3
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <StartOledTask+0x230>)
 800286a:	78db      	ldrb	r3, [r3, #3]
 800286c:	4619      	mov	r1, r3
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <StartOledTask+0x230>)
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	f107 001c 	add.w	r0, r7, #28
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	9101      	str	r1, [sp, #4]
 800287a:	9200      	str	r2, [sp, #0]
 800287c:	462b      	mov	r3, r5
 800287e:	4622      	mov	r2, r4
 8002880:	4912      	ldr	r1, [pc, #72]	; (80028cc <StartOledTask+0x234>)
 8002882:	f009 fb0f 	bl	800bea4 <siprintf>
	OLED_ShowString(0, 50, check);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	461a      	mov	r2, r3
 800288c:	2132      	movs	r1, #50	; 0x32
 800288e:	2000      	movs	r0, #0
 8002890:	f008 fb98 	bl	800afc4 <OLED_ShowString>

	//memset(clear, 0, 20*sizeof(uint8_t));

	OLED_Refresh_Gram();
 8002894:	f008 fa22 	bl	800acdc <OLED_Refresh_Gram>
	osDelay(10);
 8002898:	200a      	movs	r0, #10
 800289a:	f005 fd7d 	bl	8008398 <osDelay>
  {
 800289e:	e748      	b.n	8002732 <StartOledTask+0x9a>
 80028a0:	0800e114 	.word	0x0800e114
 80028a4:	200004c0 	.word	0x200004c0
 80028a8:	0800e0c0 	.word	0x0800e0c0
 80028ac:	20000490 	.word	0x20000490
 80028b0:	408f4000 	.word	0x408f4000
 80028b4:	0800e0c8 	.word	0x0800e0c8
 80028b8:	2000044c 	.word	0x2000044c
 80028bc:	0800e0d8 	.word	0x0800e0d8
 80028c0:	20000438 	.word	0x20000438
 80028c4:	0800e0ec 	.word	0x0800e0ec
 80028c8:	20000424 	.word	0x20000424
 80028cc:	0800e100 	.word	0x0800e100

080028d0 <StartRpiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRpiTask */
void StartRpiTask(void *argument)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRpiTask */
	char ch = 'A';
 80028d8:	2341      	movs	r3, #65	; 0x41
 80028da:	73fb      	strb	r3, [r7, #15]
	char old = ')';
 80028dc:	2329      	movs	r3, #41	; 0x29
 80028de:	75fb      	strb	r3, [r7, #23]
	int Ryan_sign_fuckmylife = 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
	  aRxBuffer[0] = '-';
 80028e4:	4bb2      	ldr	r3, [pc, #712]	; (8002bb0 <StartRpiTask+0x2e0>)
 80028e6:	222d      	movs	r2, #45	; 0x2d
 80028e8:	701a      	strb	r2, [r3, #0]
	  aRxBuffer[1] = 'W';
 80028ea:	4bb1      	ldr	r3, [pc, #708]	; (8002bb0 <StartRpiTask+0x2e0>)
 80028ec:	2257      	movs	r2, #87	; 0x57
 80028ee:	705a      	strb	r2, [r3, #1]
	  aRxBuffer[2] = 'A';
 80028f0:	4baf      	ldr	r3, [pc, #700]	; (8002bb0 <StartRpiTask+0x2e0>)
 80028f2:	2241      	movs	r2, #65	; 0x41
 80028f4:	709a      	strb	r2, [r3, #2]
	  aRxBuffer[3] = 'I';
 80028f6:	4bae      	ldr	r3, [pc, #696]	; (8002bb0 <StartRpiTask+0x2e0>)
 80028f8:	2249      	movs	r2, #73	; 0x49
 80028fa:	70da      	strb	r2, [r3, #3]
	  aRxBuffer[4] = 'T';
 80028fc:	4bac      	ldr	r3, [pc, #688]	; (8002bb0 <StartRpiTask+0x2e0>)
 80028fe:	2254      	movs	r2, #84	; 0x54
 8002900:	711a      	strb	r2, [r3, #4]
  for(;;)
  {
	  magnitude = 0;
 8002902:	4bac      	ldr	r3, [pc, #688]	; (8002bb4 <StartRpiTask+0x2e4>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
	  key = aRxBuffer[0];
 8002908:	4ba9      	ldr	r3, [pc, #676]	; (8002bb0 <StartRpiTask+0x2e0>)
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	4baa      	ldr	r3, [pc, #680]	; (8002bb8 <StartRpiTask+0x2e8>)
 800290e:	701a      	strb	r2, [r3, #0]
	  direction = aRxBuffer[1];
 8002910:	4ba7      	ldr	r3, [pc, #668]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002912:	785a      	ldrb	r2, [r3, #1]
 8002914:	4ba9      	ldr	r3, [pc, #676]	; (8002bbc <StartRpiTask+0x2ec>)
 8002916:	701a      	strb	r2, [r3, #0]
	  magnitude = ((int)(aRxBuffer[2])-48)*100 + ((int)(aRxBuffer[3])-48)*10 + ((int)(aRxBuffer[4])-48);
 8002918:	4ba5      	ldr	r3, [pc, #660]	; (8002bb0 <StartRpiTask+0x2e0>)
 800291a:	789b      	ldrb	r3, [r3, #2]
 800291c:	3b30      	subs	r3, #48	; 0x30
 800291e:	2264      	movs	r2, #100	; 0x64
 8002920:	fb02 f103 	mul.w	r1, r2, r3
 8002924:	4ba2      	ldr	r3, [pc, #648]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002926:	78db      	ldrb	r3, [r3, #3]
 8002928:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	18ca      	adds	r2, r1, r3
 8002936:	4b9e      	ldr	r3, [pc, #632]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002938:	791b      	ldrb	r3, [r3, #4]
 800293a:	3b30      	subs	r3, #48	; 0x30
 800293c:	4413      	add	r3, r2
 800293e:	4a9d      	ldr	r2, [pc, #628]	; (8002bb4 <StartRpiTask+0x2e4>)
 8002940:	6013      	str	r3, [r2, #0]
	  Ryan_sign_fuckmylife = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	613b      	str	r3, [r7, #16]

	  if(direction == 'B' || direction == 'b'){
 8002946:	4b9d      	ldr	r3, [pc, #628]	; (8002bbc <StartRpiTask+0x2ec>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b42      	cmp	r3, #66	; 0x42
 800294c:	d003      	beq.n	8002956 <StartRpiTask+0x86>
 800294e:	4b9b      	ldr	r3, [pc, #620]	; (8002bbc <StartRpiTask+0x2ec>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b62      	cmp	r3, #98	; 0x62
 8002954:	d107      	bne.n	8002966 <StartRpiTask+0x96>
		  magnitude *= -1;
 8002956:	4b97      	ldr	r3, [pc, #604]	; (8002bb4 <StartRpiTask+0x2e4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	425b      	negs	r3, r3
 800295c:	4a95      	ldr	r2, [pc, #596]	; (8002bb4 <StartRpiTask+0x2e4>)
 800295e:	6013      	str	r3, [r2, #0]
		  Ryan_sign_fuckmylife = -1;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	613b      	str	r3, [r7, #16]
	  }

	  if(aRxBuffer[0] != old){
 8002966:	4b92      	ldr	r3, [pc, #584]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	7dfa      	ldrb	r2, [r7, #23]
 800296c:	429a      	cmp	r2, r3
 800296e:	f000 814e 	beq.w	8002c0e <StartRpiTask+0x33e>

		if (aRxBuffer[0]!='D'){
 8002972:	4b8f      	ldr	r3, [pc, #572]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b44      	cmp	r3, #68	; 0x44
 8002978:	d027      	beq.n	80029ca <StartRpiTask+0xfa>
			old_Buff1[0] = old_Buff[0];
 800297a:	4b91      	ldr	r3, [pc, #580]	; (8002bc0 <StartRpiTask+0x2f0>)
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	4b91      	ldr	r3, [pc, #580]	; (8002bc4 <StartRpiTask+0x2f4>)
 8002980:	701a      	strb	r2, [r3, #0]
			old_Buff1[1] = old_Buff[1];
 8002982:	4b8f      	ldr	r3, [pc, #572]	; (8002bc0 <StartRpiTask+0x2f0>)
 8002984:	785a      	ldrb	r2, [r3, #1]
 8002986:	4b8f      	ldr	r3, [pc, #572]	; (8002bc4 <StartRpiTask+0x2f4>)
 8002988:	705a      	strb	r2, [r3, #1]
			old_Buff1[2] = old_Buff[2];
 800298a:	4b8d      	ldr	r3, [pc, #564]	; (8002bc0 <StartRpiTask+0x2f0>)
 800298c:	789a      	ldrb	r2, [r3, #2]
 800298e:	4b8d      	ldr	r3, [pc, #564]	; (8002bc4 <StartRpiTask+0x2f4>)
 8002990:	709a      	strb	r2, [r3, #2]
			old_Buff1[3] = old_Buff[3];
 8002992:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <StartRpiTask+0x2f0>)
 8002994:	78da      	ldrb	r2, [r3, #3]
 8002996:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <StartRpiTask+0x2f4>)
 8002998:	70da      	strb	r2, [r3, #3]
			old_Buff1[4] = old_Buff[4];
 800299a:	4b89      	ldr	r3, [pc, #548]	; (8002bc0 <StartRpiTask+0x2f0>)
 800299c:	791a      	ldrb	r2, [r3, #4]
 800299e:	4b89      	ldr	r3, [pc, #548]	; (8002bc4 <StartRpiTask+0x2f4>)
 80029a0:	711a      	strb	r2, [r3, #4]
		old_Buff[0] = aRxBuffer[0];
 80029a2:	4b83      	ldr	r3, [pc, #524]	; (8002bb0 <StartRpiTask+0x2e0>)
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	4b86      	ldr	r3, [pc, #536]	; (8002bc0 <StartRpiTask+0x2f0>)
 80029a8:	701a      	strb	r2, [r3, #0]
		old_Buff[1] = aRxBuffer[1];
 80029aa:	4b81      	ldr	r3, [pc, #516]	; (8002bb0 <StartRpiTask+0x2e0>)
 80029ac:	785a      	ldrb	r2, [r3, #1]
 80029ae:	4b84      	ldr	r3, [pc, #528]	; (8002bc0 <StartRpiTask+0x2f0>)
 80029b0:	705a      	strb	r2, [r3, #1]
		old_Buff[2] = aRxBuffer[2];
 80029b2:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <StartRpiTask+0x2e0>)
 80029b4:	789a      	ldrb	r2, [r3, #2]
 80029b6:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <StartRpiTask+0x2f0>)
 80029b8:	709a      	strb	r2, [r3, #2]
		old_Buff[3] = aRxBuffer[3];
 80029ba:	4b7d      	ldr	r3, [pc, #500]	; (8002bb0 <StartRpiTask+0x2e0>)
 80029bc:	78da      	ldrb	r2, [r3, #3]
 80029be:	4b80      	ldr	r3, [pc, #512]	; (8002bc0 <StartRpiTask+0x2f0>)
 80029c0:	70da      	strb	r2, [r3, #3]
		old_Buff[4] = aRxBuffer[4];
 80029c2:	4b7b      	ldr	r3, [pc, #492]	; (8002bb0 <StartRpiTask+0x2e0>)
 80029c4:	791a      	ldrb	r2, [r3, #4]
 80029c6:	4b7e      	ldr	r3, [pc, #504]	; (8002bc0 <StartRpiTask+0x2f0>)
 80029c8:	711a      	strb	r2, [r3, #4]

		}

		 osDelay(2000);
 80029ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029ce:	f005 fce3 	bl	8008398 <osDelay>
		  switch (key){
 80029d2:	4b79      	ldr	r3, [pc, #484]	; (8002bb8 <StartRpiTask+0x2e8>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	3b44      	subs	r3, #68	; 0x44
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	f200 8114 	bhi.w	8002c06 <StartRpiTask+0x336>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <StartRpiTask+0x114>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	08002c07 	.word	0x08002c07
 80029e8:	08002c07 	.word	0x08002c07
 80029ec:	08002c07 	.word	0x08002c07
 80029f0:	08002c07 	.word	0x08002c07
 80029f4:	08002c07 	.word	0x08002c07
 80029f8:	08002c07 	.word	0x08002c07
 80029fc:	08002b29 	.word	0x08002b29
 8002a00:	08002b6d 	.word	0x08002b6d
 8002a04:	08002ad1 	.word	0x08002ad1
 8002a08:	08002c07 	.word	0x08002c07
 8002a0c:	08002c07 	.word	0x08002c07
 8002a10:	08002c07 	.word	0x08002c07
 8002a14:	08002bd1 	.word	0x08002bd1
 8002a18:	08002c07 	.word	0x08002c07
 8002a1c:	08002a79 	.word	0x08002a79
 8002a20:	08002a25 	.word	0x08002a25
			  case 'D':
				  break;
			  case 'S':
				  times_acceptable=0;
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <StartRpiTask+0x2f8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
				  moveCarStraight(magnitude);
 8002a2a:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <StartRpiTask+0x2e4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fd fd78 	bl	8000524 <__aeabi_i2d>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	ec43 2b10 	vmov	d0, r2, r3
 8002a3c:	f7fe ffbc 	bl	80019b8 <moveCarStraight>
				  while(finishCheck());
 8002a40:	bf00      	nop
 8002a42:	f7ff fb1f 	bl	8002084 <finishCheck>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1fa      	bne.n	8002a42 <StartRpiTask+0x172>
				  flagDone=1;
 8002a4c:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <StartRpiTask+0x2fc>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002a52:	4b57      	ldr	r3, [pc, #348]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002a54:	2244      	movs	r2, #68	; 0x44
 8002a56:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002a58:	4b55      	ldr	r3, [pc, #340]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002a5a:	224f      	movs	r2, #79	; 0x4f
 8002a5c:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002a5e:	4b54      	ldr	r3, [pc, #336]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002a60:	224e      	movs	r2, #78	; 0x4e
 8002a62:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002a64:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002a66:	2245      	movs	r2, #69	; 0x45
 8002a68:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002a6a:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002a6c:	2221      	movs	r2, #33	; 0x21
 8002a6e:	711a      	strb	r2, [r3, #4]


				  osDelay(100);
 8002a70:	2064      	movs	r0, #100	; 0x64
 8002a72:	f005 fc91 	bl	8008398 <osDelay>

				  break;
 8002a76:	e0c7      	b.n	8002c08 <StartRpiTask+0x338>
			  case 'R':
				  times_acceptable=0;
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <StartRpiTask+0x2f8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
				  moveCarRight90(90*Ryan_sign_fuckmylife);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	225a      	movs	r2, #90	; 0x5a
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd4c 	bl	8000524 <__aeabi_i2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	ec43 2b10 	vmov	d0, r2, r3
 8002a94:	f7ff f92c 	bl	8001cf0 <moveCarRight90>
				  while(finishCheck());
 8002a98:	bf00      	nop
 8002a9a:	f7ff faf3 	bl	8002084 <finishCheck>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1fa      	bne.n	8002a9a <StartRpiTask+0x1ca>
				  flagDone=1;
 8002aa4:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <StartRpiTask+0x2fc>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002aaa:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002aac:	2244      	movs	r2, #68	; 0x44
 8002aae:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002ab0:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002ab2:	224f      	movs	r2, #79	; 0x4f
 8002ab4:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002ab8:	224e      	movs	r2, #78	; 0x4e
 8002aba:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002abc:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002abe:	2245      	movs	r2, #69	; 0x45
 8002ac0:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	711a      	strb	r2, [r3, #4]
				  osDelay(100);
 8002ac8:	2064      	movs	r0, #100	; 0x64
 8002aca:	f005 fc65 	bl	8008398 <osDelay>

				  break;
 8002ace:	e09b      	b.n	8002c08 <StartRpiTask+0x338>
			  case 'L':
				  times_acceptable=0;
 8002ad0:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <StartRpiTask+0x2f8>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
				  moveCarLeft90(90*Ryan_sign_fuckmylife);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	225a      	movs	r2, #90	; 0x5a
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fd20 	bl	8000524 <__aeabi_i2d>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	ec43 2b10 	vmov	d0, r2, r3
 8002aec:	f7ff f964 	bl	8001db8 <moveCarLeft90>
				  while(finishCheck());
 8002af0:	bf00      	nop
 8002af2:	f7ff fac7 	bl	8002084 <finishCheck>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1fa      	bne.n	8002af2 <StartRpiTask+0x222>
				  flagDone=1;
 8002afc:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <StartRpiTask+0x2fc>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002b02:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b04:	2244      	movs	r2, #68	; 0x44
 8002b06:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002b08:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b0a:	224f      	movs	r2, #79	; 0x4f
 8002b0c:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b10:	224e      	movs	r2, #78	; 0x4e
 8002b12:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002b14:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b16:	2245      	movs	r2, #69	; 0x45
 8002b18:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b1c:	2221      	movs	r2, #33	; 0x21
 8002b1e:	711a      	strb	r2, [r3, #4]
				  osDelay(100);
 8002b20:	2064      	movs	r0, #100	; 0x64
 8002b22:	f005 fc39 	bl	8008398 <osDelay>

				  break;
 8002b26:	e06f      	b.n	8002c08 <StartRpiTask+0x338>
			  case 'J':
				  times_acceptable=0;
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <StartRpiTask+0x2f8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
				  moveCarSlideRight(Ryan_sign_fuckmylife);
 8002b2e:	6938      	ldr	r0, [r7, #16]
 8002b30:	f7fe fffe 	bl	8001b30 <moveCarSlideRight>
				  while(finishCheck());
 8002b34:	bf00      	nop
 8002b36:	f7ff faa5 	bl	8002084 <finishCheck>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1fa      	bne.n	8002b36 <StartRpiTask+0x266>
				  flagDone=1;
 8002b40:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <StartRpiTask+0x2fc>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002b46:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b48:	2244      	movs	r2, #68	; 0x44
 8002b4a:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b4e:	224f      	movs	r2, #79	; 0x4f
 8002b50:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b54:	224e      	movs	r2, #78	; 0x4e
 8002b56:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b5a:	2245      	movs	r2, #69	; 0x45
 8002b5c:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b60:	2221      	movs	r2, #33	; 0x21
 8002b62:	711a      	strb	r2, [r3, #4]
				  osDelay(100);
 8002b64:	2064      	movs	r0, #100	; 0x64
 8002b66:	f005 fc17 	bl	8008398 <osDelay>

				  break;
 8002b6a:	e04d      	b.n	8002c08 <StartRpiTask+0x338>
			  case 'K':
				  times_acceptable=0;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <StartRpiTask+0x2f8>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
				  moveCarSlideLeft(Ryan_sign_fuckmylife);
 8002b72:	6938      	ldr	r0, [r7, #16]
 8002b74:	f7ff f84c 	bl	8001c10 <moveCarSlideLeft>
				  while(finishCheck());
 8002b78:	bf00      	nop
 8002b7a:	f7ff fa83 	bl	8002084 <finishCheck>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1fa      	bne.n	8002b7a <StartRpiTask+0x2aa>
				  flagDone=1;
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <StartRpiTask+0x2fc>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b8c:	2244      	movs	r2, #68	; 0x44
 8002b8e:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b92:	224f      	movs	r2, #79	; 0x4f
 8002b94:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b98:	224e      	movs	r2, #78	; 0x4e
 8002b9a:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002b9e:	2245      	movs	r2, #69	; 0x45
 8002ba0:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002ba2:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <StartRpiTask+0x2e0>)
 8002ba4:	2221      	movs	r2, #33	; 0x21
 8002ba6:	711a      	strb	r2, [r3, #4]
				  osDelay(100);
 8002ba8:	2064      	movs	r0, #100	; 0x64
 8002baa:	f005 fbf5 	bl	8008398 <osDelay>

				  break;
 8002bae:	e02b      	b.n	8002c08 <StartRpiTask+0x338>
 8002bb0:	20000424 	.word	0x20000424
 8002bb4:	20000468 	.word	0x20000468
 8002bb8:	20000464 	.word	0x20000464
 8002bbc:	20000465 	.word	0x20000465
 8002bc0:	20000438 	.word	0x20000438
 8002bc4:	2000044c 	.word	0x2000044c
 8002bc8:	20000470 	.word	0x20000470
 8002bcc:	20000460 	.word	0x20000460
		  	  case 'P':
		  		  buzzerBeep();
 8002bd0:	f7fe fede 	bl	8001990 <buzzerBeep>
		  		  flagDone=1;
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <StartRpiTask+0x36c>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
		  		  times_acceptable=0;
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <StartRpiTask+0x370>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <StartRpiTask+0x374>)
 8002be2:	2244      	movs	r2, #68	; 0x44
 8002be4:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <StartRpiTask+0x374>)
 8002be8:	224f      	movs	r2, #79	; 0x4f
 8002bea:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <StartRpiTask+0x374>)
 8002bee:	224e      	movs	r2, #78	; 0x4e
 8002bf0:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <StartRpiTask+0x374>)
 8002bf4:	2245      	movs	r2, #69	; 0x45
 8002bf6:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <StartRpiTask+0x374>)
 8002bfa:	2221      	movs	r2, #33	; 0x21
 8002bfc:	711a      	strb	r2, [r3, #4]
				  osDelay(100);
 8002bfe:	2064      	movs	r0, #100	; 0x64
 8002c00:	f005 fbca 	bl	8008398 <osDelay>
				  break;
 8002c04:	e000      	b.n	8002c08 <StartRpiTask+0x338>
			  default:
				  break;
 8002c06:	bf00      	nop
		  }
		  old = aRxBuffer[0];
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <StartRpiTask+0x374>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	75fb      	strb	r3, [r7, #23]
	  }



	  // send ack back to rpi and ready for next instruction
		if(flagDone==1){
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <StartRpiTask+0x36c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10e      	bne.n	8002c34 <StartRpiTask+0x364>
			osDelay(500);
 8002c16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c1a:	f005 fbbd 	bl	8008398 <osDelay>
			HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1,0xFFFF);
 8002c1e:	f107 010f 	add.w	r1, r7, #15
 8002c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c26:	2201      	movs	r2, #1
 8002c28:	4807      	ldr	r0, [pc, #28]	; (8002c48 <StartRpiTask+0x378>)
 8002c2a:	f004 fa7a 	bl	8007122 <HAL_UART_Transmit>
			flagDone = 0;
 8002c2e:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <StartRpiTask+0x36c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
		}
		osDelay(1);
 8002c34:	2001      	movs	r0, #1
 8002c36:	f005 fbaf 	bl	8008398 <osDelay>
	  magnitude = 0;
 8002c3a:	e662      	b.n	8002902 <StartRpiTask+0x32>
 8002c3c:	20000460 	.word	0x20000460
 8002c40:	20000470 	.word	0x20000470
 8002c44:	20000424 	.word	0x20000424
 8002c48:	200003c0 	.word	0x200003c0
 8002c4c:	00000000 	.word	0x00000000

08002c50 <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */
	gyroInit();
 8002c58:	f7ff fa98 	bl	800218c <gyroInit>
	uint8_t val[2] = {0,0};
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	813b      	strh	r3, [r7, #8]

	int16_t angular_speed = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	817b      	strh	r3, [r7, #10]

	uint32_t tick = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
	double offset = 0;
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash= 0;
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i=0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
	while(i<100){
 8002c84:	e048      	b.n	8002d18 <StartGyroTask+0xc8>
		osDelay(50);
 8002c86:	2032      	movs	r0, #50	; 0x32
 8002c88:	f005 fb86 	bl	8008398 <osDelay>
		readByte(0x37, val);
 8002c8c:	f107 0308 	add.w	r3, r7, #8
 8002c90:	4619      	mov	r1, r3
 8002c92:	2037      	movs	r0, #55	; 0x37
 8002c94:	f7ff fa2a 	bl	80020ec <readByte>
		angular_speed = (val[0] << 8) | val[1];
 8002c98:	7a3b      	ldrb	r3, [r7, #8]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	b21a      	sxth	r2, r3
 8002c9e:	7a7b      	ldrb	r3, [r7, #9]
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	817b      	strh	r3, [r7, #10]
		trash +=(double)((double)angular_speed)*((HAL_GetTick() - tick)/16400.0);
 8002ca6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc3a 	bl	8000524 <__aeabi_i2d>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
 8002cb4:	f000 fd5c 	bl	8003770 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc20 	bl	8000504 <__aeabi_ui2d>
 8002cc4:	a345      	add	r3, pc, #276	; (adr r3, 8002ddc <StartGyroTask+0x18c>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f7fd fdbf 	bl	800084c <__aeabi_ddiv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f7fd fc8f 	bl	80005f8 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ce2:	f7fd fad3 	bl	800028c <__adddf3>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 8002cee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc16 	bl	8000524 <__aeabi_i2d>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d00:	f7fd fac4 	bl	800028c <__adddf3>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 8002d0c:	f000 fd30 	bl	8003770 <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3301      	adds	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
	while(i<100){
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b63      	cmp	r3, #99	; 0x63
 8002d1c:	ddb3      	ble.n	8002c86 <StartGyroTask+0x36>
	}
	offset = offset/i;
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7fd fc00 	bl	8000524 <__aeabi_i2d>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d2c:	f7fd fd8e 	bl	800084c <__aeabi_ddiv>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	e9c7 2306 	strd	r2, r3, [r7, #24]
	buzzerBeep();
 8002d38:	f7fe fe2a 	bl	8001990 <buzzerBeep>
	tick = HAL_GetTick();
 8002d3c:	f000 fd18 	bl	8003770 <HAL_GetTick>
 8002d40:	6278      	str	r0, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
		osDelay(50);
 8002d42:	2032      	movs	r0, #50	; 0x32
 8002d44:	f005 fb28 	bl	8008398 <osDelay>
		readByte(0x37, val);
 8002d48:	f107 0308 	add.w	r3, r7, #8
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	2037      	movs	r0, #55	; 0x37
 8002d50:	f7ff f9cc 	bl	80020ec <readByte>
		angular_speed = (val[0] << 8) | val[1];
 8002d54:	7a3b      	ldrb	r3, [r7, #8]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	7a7b      	ldrb	r3, [r7, #9]
 8002d5c:	b21b      	sxth	r3, r3
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	817b      	strh	r3, [r7, #10]
		total_angle +=(double)((double)angular_speed - offset)*((HAL_GetTick() - tick)/16400.0);
 8002d62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fbdc 	bl	8000524 <__aeabi_i2d>
 8002d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d70:	f7fd fa8a 	bl	8000288 <__aeabi_dsub>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4614      	mov	r4, r2
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	f000 fcf8 	bl	8003770 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fbbc 	bl	8000504 <__aeabi_ui2d>
 8002d8c:	a313      	add	r3, pc, #76	; (adr r3, 8002ddc <StartGyroTask+0x18c>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fd5b 	bl	800084c <__aeabi_ddiv>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	f7fd fc2b 	bl	80005f8 <__aeabi_dmul>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <StartGyroTask+0x188>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f7fd fa6c 	bl	800028c <__adddf3>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <StartGyroTask+0x188>)
 8002dba:	e9c1 2300 	strd	r2, r3, [r1]
		i -= angular_speed;
 8002dbe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	60fb      	str	r3, [r7, #12]
		tick = HAL_GetTick();
 8002dc8:	f000 fcd2 	bl	8003770 <HAL_GetTick>
 8002dcc:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
		osDelay(50);
 8002dd4:	e7b5      	b.n	8002d42 <StartGyroTask+0xf2>
 8002dd6:	bf00      	nop
 8002dd8:	20000490 	.word	0x20000490
 8002ddc:	00000000 	.word	0x00000000
 8002de0:	40d00400 	.word	0x40d00400

08002de4 <StartBulleyesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBulleyesTask */
void StartBulleyesTask(void *argument)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBulleyesTask */
	int i=0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]



  /* Infinite loop */
  for(;;)
  { osDelay(1000);
 8002df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002df4:	f005 fad0 	bl	8008398 <osDelay>
  HCSR04_Read();
 8002df8:	f7fe fdaa 	bl	8001950 <HCSR04_Read>
  { osDelay(1000);
 8002dfc:	e7f8      	b.n	8002df0 <StartBulleyesTask+0xc>
	...

08002e00 <StartEncoderRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderRightTask */
void StartEncoderRightTask(void *argument)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderRightTask */
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8002e08:	213c      	movs	r1, #60	; 0x3c
 8002e0a:	481d      	ldr	r0, [pc, #116]	; (8002e80 <StartEncoderRightTask+0x80>)
 8002e0c:	f002 fff8 	bl	8005e00 <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 8002e10:	2301      	movs	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002e14:	f000 fcac 	bl	8003770 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		if(HAL_GetTick()-tick > 10L)
 8002e1a:	f000 fca9 	bl	8003770 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b0a      	cmp	r3, #10
 8002e26:	d9f8      	bls.n	8002e1a <StartEncoderRightTask+0x1a>
		{
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <StartEncoderRightTask+0x80>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	60bb      	str	r3, [r7, #8]
			if(cnt1 > 32000){
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002e36:	dd06      	ble.n	8002e46 <StartEncoderRightTask+0x46>
				dirR = 1;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	e004      	b.n	8002e50 <StartEncoderRightTask+0x50>
			} else {
				dirR = -1;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	613b      	str	r3, [r7, #16]

			}

			if(dirR == 1){
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d106      	bne.n	8002e64 <StartEncoderRightTask+0x64>
				rightEncoderVal -= diff;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <StartEncoderRightTask+0x84>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	4a09      	ldr	r2, [pc, #36]	; (8002e84 <StartEncoderRightTask+0x84>)
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e005      	b.n	8002e70 <StartEncoderRightTask+0x70>
			} else {
				rightEncoderVal += diff;
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <StartEncoderRightTask+0x84>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <StartEncoderRightTask+0x84>)
 8002e6e:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <StartEncoderRightTask+0x80>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002e78:	f000 fc7a 	bl	8003770 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick()-tick > 10L)
 8002e7e:	e7cc      	b.n	8002e1a <StartEncoderRightTask+0x1a>
 8002e80:	200002e8 	.word	0x200002e8
 8002e84:	20000478 	.word	0x20000478

08002e88 <StartEncoderLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderLeftTask */
void StartEncoderLeftTask(void *argument)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderLeftTask */
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8002e90:	213c      	movs	r1, #60	; 0x3c
 8002e92:	481d      	ldr	r0, [pc, #116]	; (8002f08 <StartEncoderLeftTask+0x80>)
 8002e94:	f002 ffb4 	bl	8005e00 <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8002e9c:	f000 fc68 	bl	8003770 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		if(HAL_GetTick()-tick > 10L)
 8002ea2:	f000 fc65 	bl	8003770 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b0a      	cmp	r3, #10
 8002eae:	d9f8      	bls.n	8002ea2 <StartEncoderLeftTask+0x1a>
		{
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <StartEncoderLeftTask+0x80>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	60bb      	str	r3, [r7, #8]

			if(cnt2 > 32000){
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002ebe:	dd06      	ble.n	8002ece <StartEncoderLeftTask+0x46>
				dirL = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	e004      	b.n	8002ed8 <StartEncoderLeftTask+0x50>
			} else {
				dirL = -1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	613b      	str	r3, [r7, #16]
			}
			if(dirL == 1){
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d106      	bne.n	8002eec <StartEncoderLeftTask+0x64>
				leftEncoderVal += diff;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <StartEncoderLeftTask+0x84>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <StartEncoderLeftTask+0x84>)
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e005      	b.n	8002ef8 <StartEncoderLeftTask+0x70>
			} else {
				leftEncoderVal -= diff;
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <StartEncoderLeftTask+0x84>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <StartEncoderLeftTask+0x84>)
 8002ef6:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <StartEncoderLeftTask+0x80>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002f00:	f000 fc36 	bl	8003770 <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick()-tick > 10L)
 8002f06:	e7cc      	b.n	8002ea2 <StartEncoderLeftTask+0x1a>
 8002f08:	200002a0 	.word	0x200002a0
 8002f0c:	2000047c 	.word	0x2000047c

08002f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f14:	b672      	cpsid	i
}
 8002f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f18:	e7fe      	b.n	8002f18 <Error_Handler+0x8>
	...

08002f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_MspInit+0x64>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <HAL_MspInit+0x64>)
 8002f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f30:	6453      	str	r3, [r2, #68]	; 0x44
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <HAL_MspInit+0x64>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_MspInit+0x64>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <HAL_MspInit+0x64>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_MspInit+0x64>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	210f      	movs	r1, #15
 8002f5e:	f06f 0001 	mvn.w	r0, #1
 8002f62:	f000 fd10 	bl	8003986 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2105      	movs	r1, #5
 8002f6a:	2005      	movs	r0, #5
 8002f6c:	f000 fd0b 	bl	8003986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002f70:	2005      	movs	r0, #5
 8002f72:	f000 fd24 	bl	80039be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	; (8003008 <HAL_I2C_MspInit+0x84>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d12c      	bne.n	8003000 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc8:	2312      	movs	r3, #18
 8002fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4619      	mov	r1, r3
 8002fde:	480c      	ldr	r0, [pc, #48]	; (8003010 <HAL_I2C_MspInit+0x8c>)
 8002fe0:	f000 fd9a 	bl	8003b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a07      	ldr	r2, [pc, #28]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003000:	bf00      	nop
 8003002:	3728      	adds	r7, #40	; 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40005400 	.word	0x40005400
 800300c:	40023800 	.word	0x40023800
 8003010:	40020400 	.word	0x40020400

08003014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <HAL_TIM_Base_MspInit+0xdc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d11e      	bne.n	8003074 <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_TIM_Base_MspInit+0xe0>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4a2d      	ldr	r2, [pc, #180]	; (80030f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6453      	str	r3, [r2, #68]	; 0x44
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2105      	movs	r1, #5
 8003056:	2018      	movs	r0, #24
 8003058:	f000 fc95 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800305c:	2018      	movs	r0, #24
 800305e:	f000 fcae 	bl	80039be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2105      	movs	r1, #5
 8003066:	2019      	movs	r0, #25
 8003068:	f000 fc8d 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800306c:	2019      	movs	r0, #25
 800306e:	f000 fca6 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003072:	e038      	b.n	80030e6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_TIM_Base_MspInit+0xe4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d133      	bne.n	80030e6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6453      	str	r3, [r2, #68]	; 0x44
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_TIM_Base_MspInit+0xe0>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <HAL_TIM_Base_MspInit+0xe0>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_TIM_Base_MspInit+0xe0>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80030b6:	23c0      	movs	r3, #192	; 0xc0
 80030b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ba:	2302      	movs	r3, #2
 80030bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030c6:	2303      	movs	r3, #3
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ca:	f107 0314 	add.w	r3, r7, #20
 80030ce:	4619      	mov	r1, r3
 80030d0:	480a      	ldr	r0, [pc, #40]	; (80030fc <HAL_TIM_Base_MspInit+0xe8>)
 80030d2:	f000 fd21 	bl	8003b18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2105      	movs	r1, #5
 80030da:	202d      	movs	r0, #45	; 0x2d
 80030dc:	f000 fc53 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80030e0:	202d      	movs	r0, #45	; 0x2d
 80030e2:	f000 fc6c 	bl	80039be <HAL_NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40010000 	.word	0x40010000
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40010400 	.word	0x40010400
 80030fc:	40020800 	.word	0x40020800

08003100 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	; 0x30
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 031c 	add.w	r3, r7, #28
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d14b      	bne.n	80031ba <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	4b3f      	ldr	r3, [pc, #252]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a3e      	ldr	r2, [pc, #248]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b3c      	ldr	r3, [pc, #240]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a37      	ldr	r2, [pc, #220]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b35      	ldr	r3, [pc, #212]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a30      	ldr	r2, [pc, #192]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 8003176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	2300      	movs	r3, #0
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003188:	2301      	movs	r3, #1
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 800318c:	f107 031c 	add.w	r3, r7, #28
 8003190:	4619      	mov	r1, r3
 8003192:	4825      	ldr	r0, [pc, #148]	; (8003228 <HAL_TIM_Encoder_MspInit+0x128>)
 8003194:	f000 fcc0 	bl	8003b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8003198:	2308      	movs	r3, #8
 800319a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031a8:	2301      	movs	r3, #1
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	4619      	mov	r1, r3
 80031b2:	481e      	ldr	r0, [pc, #120]	; (800322c <HAL_TIM_Encoder_MspInit+0x12c>)
 80031b4:	f000 fcb0 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031b8:	e030      	b.n	800321c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_TIM_Encoder_MspInit+0x130>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d12b      	bne.n	800321c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	4a15      	ldr	r2, [pc, #84]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 80031ce:	f043 0302 	orr.w	r3, r3, #2
 80031d2:	6413      	str	r3, [r2, #64]	; 0x40
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6313      	str	r3, [r2, #48]	; 0x30
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <HAL_TIM_Encoder_MspInit+0x124>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 80031fc:	23c0      	movs	r3, #192	; 0xc0
 80031fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800320c:	2302      	movs	r3, #2
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	4619      	mov	r1, r3
 8003216:	4804      	ldr	r0, [pc, #16]	; (8003228 <HAL_TIM_Encoder_MspInit+0x128>)
 8003218:	f000 fc7e 	bl	8003b18 <HAL_GPIO_Init>
}
 800321c:	bf00      	nop
 800321e:	3730      	adds	r7, #48	; 0x30
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40023800 	.word	0x40023800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40000400 	.word	0x40000400

08003234 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0314 	add.w	r3, r7, #20
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <HAL_TIM_IC_MspInit+0x94>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d134      	bne.n	80032c0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <HAL_TIM_IC_MspInit+0x98>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <HAL_TIM_IC_MspInit+0x98>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
 8003266:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_TIM_IC_MspInit+0x98>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_TIM_IC_MspInit+0x98>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a14      	ldr	r2, [pc, #80]	; (80032cc <HAL_TIM_IC_MspInit+0x98>)
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_TIM_IC_MspInit+0x98>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 800328e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032a0:	2302      	movs	r3, #2
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	4619      	mov	r1, r3
 80032aa:	4809      	ldr	r0, [pc, #36]	; (80032d0 <HAL_TIM_IC_MspInit+0x9c>)
 80032ac:	f000 fc34 	bl	8003b18 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2105      	movs	r1, #5
 80032b4:	201e      	movs	r0, #30
 80032b6:	f000 fb66 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032ba:	201e      	movs	r0, #30
 80032bc:	f000 fb7f 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032c0:	bf00      	nop
 80032c2:	3728      	adds	r7, #40	; 0x28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020c00 	.word	0x40020c00

080032d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a12      	ldr	r2, [pc, #72]	; (800333c <HAL_TIM_MspPostInit+0x68>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d11e      	bne.n	8003334 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_TIM_MspPostInit+0x6c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	4a10      	ldr	r2, [pc, #64]	; (8003340 <HAL_TIM_MspPostInit+0x6c>)
 8003300:	f043 0310 	orr.w	r3, r3, #16
 8003304:	6313      	str	r3, [r2, #48]	; 0x30
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <HAL_TIM_MspPostInit+0x6c>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	2300      	movs	r3, #0
 8003322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003324:	2301      	movs	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	4619      	mov	r1, r3
 800332e:	4805      	ldr	r0, [pc, #20]	; (8003344 <HAL_TIM_MspPostInit+0x70>)
 8003330:	f000 fbf2 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003334:	bf00      	nop
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40010000 	.word	0x40010000
 8003340:	40023800 	.word	0x40023800
 8003344:	40021000 	.word	0x40021000

08003348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_UART_MspInit+0x94>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d134      	bne.n	80033d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_UART_MspInit+0x98>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a1b      	ldr	r2, [pc, #108]	; (80033e0 <HAL_UART_MspInit+0x98>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_UART_MspInit+0x98>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_UART_MspInit+0x98>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <HAL_UART_MspInit+0x98>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_UART_MspInit+0x98>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b0:	2303      	movs	r3, #3
 80033b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033b4:	2307      	movs	r3, #7
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	4619      	mov	r1, r3
 80033be:	4809      	ldr	r0, [pc, #36]	; (80033e4 <HAL_UART_MspInit+0x9c>)
 80033c0:	f000 fbaa 	bl	8003b18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80033c4:	2200      	movs	r2, #0
 80033c6:	2105      	movs	r1, #5
 80033c8:	2027      	movs	r0, #39	; 0x27
 80033ca:	f000 fadc 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80033ce:	2027      	movs	r0, #39	; 0x27
 80033d0:	f000 faf5 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033d4:	bf00      	nop
 80033d6:	3728      	adds	r7, #40	; 0x28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40004800 	.word	0x40004800
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40020800 	.word	0x40020800

080033e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <NMI_Handler+0x4>

080033ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f2:	e7fe      	b.n	80033f2 <HardFault_Handler+0x4>

080033f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <MemManage_Handler+0x4>

080033fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <BusFault_Handler+0x4>

08003400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <UsageFault_Handler+0x4>

08003406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003418:	f000 f996 	bl	8003748 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800341c:	f006 fbf4 	bl	8009c08 <xTaskGetSchedulerState>
 8003420:	4603      	mov	r3, r0
 8003422:	2b01      	cmp	r3, #1
 8003424:	d001      	beq.n	800342a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003426:	f007 f9df 	bl	800a7e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}

0800342e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003442:	f002 fd6b 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000258 	.word	0x20000258

08003450 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003456:	f002 fd61 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000258 	.word	0x20000258

08003464 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003468:	4802      	ldr	r0, [pc, #8]	; (8003474 <TIM4_IRQHandler+0x10>)
 800346a:	f002 fd57 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000330 	.word	0x20000330

08003478 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800347c:	4802      	ldr	r0, [pc, #8]	; (8003488 <USART3_IRQHandler+0x10>)
 800347e:	f003 ff13 	bl	80072a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200003c0 	.word	0x200003c0

0800348c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003492:	f002 fd43 	bl	8005f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000378 	.word	0x20000378

080034a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return 1;
 80034a4:	2301      	movs	r3, #1
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <_kill>:

int _kill(int pid, int sig)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034ba:	f007 fe41 	bl	800b140 <__errno>
 80034be:	4603      	mov	r3, r0
 80034c0:	2216      	movs	r2, #22
 80034c2:	601a      	str	r2, [r3, #0]
  return -1;
 80034c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <_exit>:

void _exit (int status)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034d8:	f04f 31ff 	mov.w	r1, #4294967295
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ffe7 	bl	80034b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034e2:	e7fe      	b.n	80034e2 <_exit+0x12>

080034e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e00a      	b.n	800350c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034f6:	f3af 8000 	nop.w
 80034fa:	4601      	mov	r1, r0
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	60ba      	str	r2, [r7, #8]
 8003502:	b2ca      	uxtb	r2, r1
 8003504:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	3301      	adds	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	dbf0      	blt.n	80034f6 <_read+0x12>
  }

  return len;
 8003514:	687b      	ldr	r3, [r7, #4]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e009      	b.n	8003544 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	60ba      	str	r2, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	3301      	adds	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	dbf1      	blt.n	8003530 <_write+0x12>
  }
  return len;
 800354c:	687b      	ldr	r3, [r7, #4]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <_close>:

int _close(int file)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800355e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800357e:	605a      	str	r2, [r3, #4]
  return 0;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <_isatty>:

int _isatty(int file)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003596:	2301      	movs	r3, #1
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <_sbrk+0x5c>)
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <_sbrk+0x60>)
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <_sbrk+0x64>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <_sbrk+0x64>)
 80035de:	4a12      	ldr	r2, [pc, #72]	; (8003628 <_sbrk+0x68>)
 80035e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <_sbrk+0x64>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d207      	bcs.n	8003600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035f0:	f007 fda6 	bl	800b140 <__errno>
 80035f4:	4603      	mov	r3, r0
 80035f6:	220c      	movs	r2, #12
 80035f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035fa:	f04f 33ff 	mov.w	r3, #4294967295
 80035fe:	e009      	b.n	8003614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <_sbrk+0x64>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <_sbrk+0x64>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	4a05      	ldr	r2, [pc, #20]	; (8003624 <_sbrk+0x64>)
 8003610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003612:	68fb      	ldr	r3, [r7, #12]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20020000 	.word	0x20020000
 8003620:	00000400 	.word	0x00000400
 8003624:	200004c8 	.word	0x200004c8
 8003628:	200052f0 	.word	0x200052f0

0800362c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <SystemInit+0x20>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	4a05      	ldr	r2, [pc, #20]	; (800364c <SystemInit+0x20>)
 8003638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800363c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003654:	480d      	ldr	r0, [pc, #52]	; (800368c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003656:	490e      	ldr	r1, [pc, #56]	; (8003690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003658:	4a0e      	ldr	r2, [pc, #56]	; (8003694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800365a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800365c:	e002      	b.n	8003664 <LoopCopyDataInit>

0800365e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800365e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003662:	3304      	adds	r3, #4

08003664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003668:	d3f9      	bcc.n	800365e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800366a:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800366c:	4c0b      	ldr	r4, [pc, #44]	; (800369c <LoopFillZerobss+0x26>)
  movs r3, #0
 800366e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003670:	e001      	b.n	8003676 <LoopFillZerobss>

08003672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003674:	3204      	adds	r2, #4

08003676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003678:	d3fb      	bcc.n	8003672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800367a:	f7ff ffd7 	bl	800362c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800367e:	f007 fe5b 	bl	800b338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003682:	f7fd fc33 	bl	8000eec <main>
  bx  lr    
 8003686:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800368c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003690:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003694:	0800f0c4 	.word	0x0800f0c4
  ldr r2, =_sbss
 8003698:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800369c:	200052f0 	.word	0x200052f0

080036a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036a0:	e7fe      	b.n	80036a0 <ADC_IRQHandler>
	...

080036a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_Init+0x40>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0d      	ldr	r2, [pc, #52]	; (80036e4 <HAL_Init+0x40>)
 80036ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_Init+0x40>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <HAL_Init+0x40>)
 80036ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_Init+0x40>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <HAL_Init+0x40>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036cc:	2003      	movs	r0, #3
 80036ce:	f000 f94f 	bl	8003970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036d2:	200f      	movs	r0, #15
 80036d4:	f000 f808 	bl	80036e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036d8:	f7ff fc20 	bl	8002f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023c00 	.word	0x40023c00

080036e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_InitTick+0x54>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_InitTick+0x58>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	4619      	mov	r1, r3
 80036fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003702:	fbb2 f3f3 	udiv	r3, r2, r3
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f967 	bl	80039da <HAL_SYSTICK_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e00e      	b.n	8003734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b0f      	cmp	r3, #15
 800371a:	d80a      	bhi.n	8003732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800371c:	2200      	movs	r2, #0
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	f000 f92f 	bl	8003986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003728:	4a06      	ldr	r2, [pc, #24]	; (8003744 <HAL_InitTick+0x5c>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e000      	b.n	8003734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
}
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000004 	.word	0x20000004
 8003740:	2000000c 	.word	0x2000000c
 8003744:	20000008 	.word	0x20000008

08003748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_IncTick+0x20>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_IncTick+0x24>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4413      	add	r3, r2
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <HAL_IncTick+0x24>)
 800375a:	6013      	str	r3, [r2, #0]
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	2000000c 	.word	0x2000000c
 800376c:	200004cc 	.word	0x200004cc

08003770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return uwTick;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_GetTick+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	200004cc 	.word	0x200004cc

08003788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003790:	f7ff ffee 	bl	8003770 <HAL_GetTick>
 8003794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d005      	beq.n	80037ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037a2:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_Delay+0x44>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ae:	bf00      	nop
 80037b0:	f7ff ffde 	bl	8003770 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d8f7      	bhi.n	80037b0 <HAL_Delay+0x28>
  {
  }
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000000c 	.word	0x2000000c

080037d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037ec:	4013      	ands	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003802:	4a04      	ldr	r2, [pc, #16]	; (8003814 <__NVIC_SetPriorityGrouping+0x44>)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	60d3      	str	r3, [r2, #12]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <__NVIC_GetPriorityGrouping+0x18>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	f003 0307 	and.w	r3, r3, #7
}
 8003826:	4618      	mov	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	2b00      	cmp	r3, #0
 8003844:	db0b      	blt.n	800385e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	f003 021f 	and.w	r2, r3, #31
 800384c:	4907      	ldr	r1, [pc, #28]	; (800386c <__NVIC_EnableIRQ+0x38>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2001      	movs	r0, #1
 8003856:	fa00 f202 	lsl.w	r2, r0, r2
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	e000e100 	.word	0xe000e100

08003870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	; (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	; (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0307 	rsb	r3, r3, #7
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf28      	it	cs
 80038e2:	2304      	movcs	r3, #4
 80038e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d902      	bls.n	80038f4 <NVIC_EncodePriority+0x30>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3b03      	subs	r3, #3
 80038f2:	e000      	b.n	80038f6 <NVIC_EncodePriority+0x32>
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800390c:	f04f 31ff 	mov.w	r1, #4294967295
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43d9      	mvns	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	4313      	orrs	r3, r2
         );
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	; 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800393c:	d301      	bcc.n	8003942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393e:	2301      	movs	r3, #1
 8003940:	e00f      	b.n	8003962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <SysTick_Config+0x40>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394a:	210f      	movs	r1, #15
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	f7ff ff8e 	bl	8003870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <SysTick_Config+0x40>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <SysTick_Config+0x40>)
 800395c:	2207      	movs	r2, #7
 800395e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	e000e010 	.word	0xe000e010

08003970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff29 	bl	80037d0 <__NVIC_SetPriorityGrouping>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003998:	f7ff ff3e 	bl	8003818 <__NVIC_GetPriorityGrouping>
 800399c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7ff ff8e 	bl	80038c4 <NVIC_EncodePriority>
 80039a8:	4602      	mov	r2, r0
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff5d 	bl	8003870 <__NVIC_SetPriority>
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff31 	bl	8003834 <__NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ffa2 	bl	800392c <SysTick_Config>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff feb6 	bl	8003770 <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d008      	beq.n	8003a24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e052      	b.n	8003aca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0216 	bic.w	r2, r2, #22
 8003a32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <HAL_DMA_Abort+0x62>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0208 	bic.w	r2, r2, #8
 8003a62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a74:	e013      	b.n	8003a9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a76:	f7ff fe7b 	bl	8003770 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d90c      	bls.n	8003a9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e015      	b.n	8003aca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e4      	bne.n	8003a76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	223f      	movs	r2, #63	; 0x3f
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d004      	beq.n	8003af0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e00c      	b.n	8003b0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2205      	movs	r2, #5
 8003af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e16b      	b.n	8003e0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b34:	2201      	movs	r2, #1
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f040 815a 	bne.w	8003e06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d005      	beq.n	8003b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d130      	bne.n	8003bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 0201 	and.w	r2, r3, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d017      	beq.n	8003c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d123      	bne.n	8003c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	08da      	lsrs	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3208      	adds	r2, #8
 8003c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	220f      	movs	r2, #15
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	08da      	lsrs	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3208      	adds	r2, #8
 8003c56:	69b9      	ldr	r1, [r7, #24]
 8003c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	2203      	movs	r2, #3
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 0203 	and.w	r2, r3, #3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80b4 	beq.w	8003e06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	4b60      	ldr	r3, [pc, #384]	; (8003e24 <HAL_GPIO_Init+0x30c>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	4a5f      	ldr	r2, [pc, #380]	; (8003e24 <HAL_GPIO_Init+0x30c>)
 8003ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cac:	6453      	str	r3, [r2, #68]	; 0x44
 8003cae:	4b5d      	ldr	r3, [pc, #372]	; (8003e24 <HAL_GPIO_Init+0x30c>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cba:	4a5b      	ldr	r2, [pc, #364]	; (8003e28 <HAL_GPIO_Init+0x310>)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a52      	ldr	r2, [pc, #328]	; (8003e2c <HAL_GPIO_Init+0x314>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d02b      	beq.n	8003d3e <HAL_GPIO_Init+0x226>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a51      	ldr	r2, [pc, #324]	; (8003e30 <HAL_GPIO_Init+0x318>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d025      	beq.n	8003d3a <HAL_GPIO_Init+0x222>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a50      	ldr	r2, [pc, #320]	; (8003e34 <HAL_GPIO_Init+0x31c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01f      	beq.n	8003d36 <HAL_GPIO_Init+0x21e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4f      	ldr	r2, [pc, #316]	; (8003e38 <HAL_GPIO_Init+0x320>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d019      	beq.n	8003d32 <HAL_GPIO_Init+0x21a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4e      	ldr	r2, [pc, #312]	; (8003e3c <HAL_GPIO_Init+0x324>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_GPIO_Init+0x216>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4d      	ldr	r2, [pc, #308]	; (8003e40 <HAL_GPIO_Init+0x328>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00d      	beq.n	8003d2a <HAL_GPIO_Init+0x212>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4c      	ldr	r2, [pc, #304]	; (8003e44 <HAL_GPIO_Init+0x32c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <HAL_GPIO_Init+0x20e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4b      	ldr	r2, [pc, #300]	; (8003e48 <HAL_GPIO_Init+0x330>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d101      	bne.n	8003d22 <HAL_GPIO_Init+0x20a>
 8003d1e:	2307      	movs	r3, #7
 8003d20:	e00e      	b.n	8003d40 <HAL_GPIO_Init+0x228>
 8003d22:	2308      	movs	r3, #8
 8003d24:	e00c      	b.n	8003d40 <HAL_GPIO_Init+0x228>
 8003d26:	2306      	movs	r3, #6
 8003d28:	e00a      	b.n	8003d40 <HAL_GPIO_Init+0x228>
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	e008      	b.n	8003d40 <HAL_GPIO_Init+0x228>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	e006      	b.n	8003d40 <HAL_GPIO_Init+0x228>
 8003d32:	2303      	movs	r3, #3
 8003d34:	e004      	b.n	8003d40 <HAL_GPIO_Init+0x228>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e002      	b.n	8003d40 <HAL_GPIO_Init+0x228>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <HAL_GPIO_Init+0x228>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	f002 0203 	and.w	r2, r2, #3
 8003d46:	0092      	lsls	r2, r2, #2
 8003d48:	4093      	lsls	r3, r2
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d50:	4935      	ldr	r1, [pc, #212]	; (8003e28 <HAL_GPIO_Init+0x310>)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	3302      	adds	r3, #2
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <HAL_GPIO_Init+0x334>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d82:	4a32      	ldr	r2, [pc, #200]	; (8003e4c <HAL_GPIO_Init+0x334>)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d88:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_GPIO_Init+0x334>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dac:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <HAL_GPIO_Init+0x334>)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <HAL_GPIO_Init+0x334>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dd6:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <HAL_GPIO_Init+0x334>)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_GPIO_Init+0x334>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e00:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <HAL_GPIO_Init+0x334>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	f67f ae90 	bls.w	8003b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	3724      	adds	r7, #36	; 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40013800 	.word	0x40013800
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	40020400 	.word	0x40020400
 8003e34:	40020800 	.word	0x40020800
 8003e38:	40020c00 	.word	0x40020c00
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40021400 	.word	0x40021400
 8003e44:	40021800 	.word	0x40021800
 8003e48:	40021c00 	.word	0x40021c00
 8003e4c:	40013c00 	.word	0x40013c00

08003e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	807b      	strh	r3, [r7, #2]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e60:	787b      	ldrb	r3, [r7, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e6c:	e003      	b.n	8003e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	041a      	lsls	r2, r3, #16
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	619a      	str	r2, [r3, #24]
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e94:	887a      	ldrh	r2, [r7, #2]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	041a      	lsls	r2, r3, #16
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	43d9      	mvns	r1, r3
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	400b      	ands	r3, r1
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e12b      	b.n	8004122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff f850 	bl	8002f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f001 fbba 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
 8003f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a81      	ldr	r2, [pc, #516]	; (800412c <HAL_I2C_Init+0x274>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d807      	bhi.n	8003f3c <HAL_I2C_Init+0x84>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a80      	ldr	r2, [pc, #512]	; (8004130 <HAL_I2C_Init+0x278>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bf94      	ite	ls
 8003f34:	2301      	movls	r3, #1
 8003f36:	2300      	movhi	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e006      	b.n	8003f4a <HAL_I2C_Init+0x92>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a7d      	ldr	r2, [pc, #500]	; (8004134 <HAL_I2C_Init+0x27c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bf94      	ite	ls
 8003f44:	2301      	movls	r3, #1
 8003f46:	2300      	movhi	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e0e7      	b.n	8004122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a78      	ldr	r2, [pc, #480]	; (8004138 <HAL_I2C_Init+0x280>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0c9b      	lsrs	r3, r3, #18
 8003f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a6a      	ldr	r2, [pc, #424]	; (800412c <HAL_I2C_Init+0x274>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d802      	bhi.n	8003f8c <HAL_I2C_Init+0xd4>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	e009      	b.n	8003fa0 <HAL_I2C_Init+0xe8>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	4a69      	ldr	r2, [pc, #420]	; (800413c <HAL_I2C_Init+0x284>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	495c      	ldr	r1, [pc, #368]	; (800412c <HAL_I2C_Init+0x274>)
 8003fbc:	428b      	cmp	r3, r1
 8003fbe:	d819      	bhi.n	8003ff4 <HAL_I2C_Init+0x13c>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1e59      	subs	r1, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fce:	1c59      	adds	r1, r3, #1
 8003fd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fd4:	400b      	ands	r3, r1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_I2C_Init+0x138>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1e59      	subs	r1, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fee:	e051      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	e04f      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d111      	bne.n	8004020 <HAL_I2C_Init+0x168>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1e58      	subs	r0, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	440b      	add	r3, r1
 800400a:	fbb0 f3f3 	udiv	r3, r0, r3
 800400e:	3301      	adds	r3, #1
 8004010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e012      	b.n	8004046 <HAL_I2C_Init+0x18e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1e58      	subs	r0, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	0099      	lsls	r1, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	fbb0 f3f3 	udiv	r3, r0, r3
 8004036:	3301      	adds	r3, #1
 8004038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Init+0x196>
 800404a:	2301      	movs	r3, #1
 800404c:	e022      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10e      	bne.n	8004074 <HAL_I2C_Init+0x1bc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e58      	subs	r0, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	440b      	add	r3, r1
 8004064:	fbb0 f3f3 	udiv	r3, r0, r3
 8004068:	3301      	adds	r3, #1
 800406a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004072:	e00f      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1e58      	subs	r0, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	0099      	lsls	r1, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	fbb0 f3f3 	udiv	r3, r0, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	6809      	ldr	r1, [r1, #0]
 8004098:	4313      	orrs	r3, r2
 800409a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6911      	ldr	r1, [r2, #16]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68d2      	ldr	r2, [r2, #12]
 80040ce:	4311      	orrs	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	000186a0 	.word	0x000186a0
 8004130:	001e847f 	.word	0x001e847f
 8004134:	003d08ff 	.word	0x003d08ff
 8004138:	431bde83 	.word	0x431bde83
 800413c:	10624dd3 	.word	0x10624dd3

08004140 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	461a      	mov	r2, r3
 800414c:	460b      	mov	r3, r1
 800414e:	817b      	strh	r3, [r7, #10]
 8004150:	4613      	mov	r3, r2
 8004152:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7ff fb0c 	bl	8003770 <HAL_GetTick>
 8004158:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b20      	cmp	r3, #32
 8004164:	f040 80e0 	bne.w	8004328 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2319      	movs	r3, #25
 800416e:	2201      	movs	r2, #1
 8004170:	4970      	ldr	r1, [pc, #448]	; (8004334 <HAL_I2C_Master_Transmit+0x1f4>)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fc58 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
 8004180:	e0d3      	b.n	800432a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_I2C_Master_Transmit+0x50>
 800418c:	2302      	movs	r3, #2
 800418e:	e0cc      	b.n	800432a <HAL_I2C_Master_Transmit+0x1ea>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d007      	beq.n	80041b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0201 	orr.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2221      	movs	r2, #33	; 0x21
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2210      	movs	r2, #16
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	893a      	ldrh	r2, [r7, #8]
 80041e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a50      	ldr	r2, [pc, #320]	; (8004338 <HAL_I2C_Master_Transmit+0x1f8>)
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041f8:	8979      	ldrh	r1, [r7, #10]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	6a3a      	ldr	r2, [r7, #32]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fac2 	bl	8004788 <I2C_MasterRequestWrite>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e08d      	b.n	800432a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004224:	e066      	b.n	80042f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	6a39      	ldr	r1, [r7, #32]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fcd2 	bl	8004bd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b04      	cmp	r3, #4
 800423c:	d107      	bne.n	800424e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e06b      	b.n	800432a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	781a      	ldrb	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d11b      	bne.n	80042c8 <HAL_I2C_Master_Transmit+0x188>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	d017      	beq.n	80042c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	6a39      	ldr	r1, [r7, #32]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fcc2 	bl	8004c56 <I2C_WaitOnBTFFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00d      	beq.n	80042f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d107      	bne.n	80042f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e01a      	b.n	800432a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d194      	bne.n	8004226 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	00100002 	.word	0x00100002
 8004338:	ffff0000 	.word	0xffff0000

0800433c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	; 0x30
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	461a      	mov	r2, r3
 8004348:	460b      	mov	r3, r1
 800434a:	817b      	strh	r3, [r7, #10]
 800434c:	4613      	mov	r3, r2
 800434e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004350:	f7ff fa0e 	bl	8003770 <HAL_GetTick>
 8004354:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b20      	cmp	r3, #32
 8004360:	f040 820b 	bne.w	800477a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2319      	movs	r3, #25
 800436a:	2201      	movs	r2, #1
 800436c:	497c      	ldr	r1, [pc, #496]	; (8004560 <HAL_I2C_Master_Receive+0x224>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fb5a 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800437a:	2302      	movs	r3, #2
 800437c:	e1fe      	b.n	800477c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_I2C_Master_Receive+0x50>
 8004388:	2302      	movs	r3, #2
 800438a:	e1f7      	b.n	800477c <HAL_I2C_Master_Receive+0x440>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d007      	beq.n	80043b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2222      	movs	r2, #34	; 0x22
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2210      	movs	r2, #16
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	893a      	ldrh	r2, [r7, #8]
 80043e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a5c      	ldr	r2, [pc, #368]	; (8004564 <HAL_I2C_Master_Receive+0x228>)
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043f4:	8979      	ldrh	r1, [r7, #10]
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fa46 	bl	800488c <I2C_MasterRequestRead>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e1b8      	b.n	800477c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	2b00      	cmp	r3, #0
 8004410:	d113      	bne.n	800443a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004412:	2300      	movs	r3, #0
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	623b      	str	r3, [r7, #32]
 8004426:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e18c      	b.n	8004754 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	2b01      	cmp	r3, #1
 8004440:	d11b      	bne.n	800447a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004450:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e16c      	b.n	8004754 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	2b02      	cmp	r3, #2
 8004480:	d11b      	bne.n	80044ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004490:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a2:	2300      	movs	r3, #0
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	e14c      	b.n	8004754 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044e0:	e138      	b.n	8004754 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	f200 80f1 	bhi.w	80046ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d123      	bne.n	800453c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fbed 	bl	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e139      	b.n	800477c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	; 0x2a
 800453a:	e10b      	b.n	8004754 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	2b02      	cmp	r3, #2
 8004542:	d14e      	bne.n	80045e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	2200      	movs	r2, #0
 800454c:	4906      	ldr	r1, [pc, #24]	; (8004568 <HAL_I2C_Master_Receive+0x22c>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fa6a 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e10e      	b.n	800477c <HAL_I2C_Master_Receive+0x440>
 800455e:	bf00      	nop
 8004560:	00100002 	.word	0x00100002
 8004564:	ffff0000 	.word	0xffff0000
 8004568:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045e0:	e0b8      	b.n	8004754 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	2200      	movs	r2, #0
 80045ea:	4966      	ldr	r1, [pc, #408]	; (8004784 <HAL_I2C_Master_Receive+0x448>)
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fa1b 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0bf      	b.n	800477c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	2200      	movs	r2, #0
 8004646:	494f      	ldr	r1, [pc, #316]	; (8004784 <HAL_I2C_Master_Receive+0x448>)
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f9ed 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e091      	b.n	800477c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046cc:	e042      	b.n	8004754 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fb00 	bl	8004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e04c      	b.n	800477c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b04      	cmp	r3, #4
 8004720:	d118      	bne.n	8004754 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f aec2 	bne.w	80044e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e000      	b.n	800477c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800477a:	2302      	movs	r3, #2
  }
}
 800477c:	4618      	mov	r0, r3
 800477e:	3728      	adds	r7, #40	; 0x28
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	00010004 	.word	0x00010004

08004788 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d006      	beq.n	80047b2 <I2C_MasterRequestWrite+0x2a>
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d003      	beq.n	80047b2 <I2C_MasterRequestWrite+0x2a>
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047b0:	d108      	bne.n	80047c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e00b      	b.n	80047dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	2b12      	cmp	r3, #18
 80047ca:	d107      	bne.n	80047dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f91d 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00d      	beq.n	8004810 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004802:	d103      	bne.n	800480c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e035      	b.n	800487c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004818:	d108      	bne.n	800482c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004828:	611a      	str	r2, [r3, #16]
 800482a:	e01b      	b.n	8004864 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800482c:	897b      	ldrh	r3, [r7, #10]
 800482e:	11db      	asrs	r3, r3, #7
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f003 0306 	and.w	r3, r3, #6
 8004836:	b2db      	uxtb	r3, r3
 8004838:	f063 030f 	orn	r3, r3, #15
 800483c:	b2da      	uxtb	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	490e      	ldr	r1, [pc, #56]	; (8004884 <I2C_MasterRequestWrite+0xfc>)
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f943 	bl	8004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e010      	b.n	800487c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4907      	ldr	r1, [pc, #28]	; (8004888 <I2C_MasterRequestWrite+0x100>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f933 	bl	8004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	00010008 	.word	0x00010008
 8004888:	00010002 	.word	0x00010002

0800488c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	460b      	mov	r3, r1
 800489a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d006      	beq.n	80048c6 <I2C_MasterRequestRead+0x3a>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d003      	beq.n	80048c6 <I2C_MasterRequestRead+0x3a>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048c4:	d108      	bne.n	80048d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e00b      	b.n	80048f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	2b11      	cmp	r3, #17
 80048de:	d107      	bne.n	80048f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f893 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00d      	beq.n	8004924 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004916:	d103      	bne.n	8004920 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e079      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800492c:	d108      	bne.n	8004940 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800492e:	897b      	ldrh	r3, [r7, #10]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	611a      	str	r2, [r3, #16]
 800493e:	e05f      	b.n	8004a00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004940:	897b      	ldrh	r3, [r7, #10]
 8004942:	11db      	asrs	r3, r3, #7
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f003 0306 	and.w	r3, r3, #6
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f063 030f 	orn	r3, r3, #15
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	4930      	ldr	r1, [pc, #192]	; (8004a20 <I2C_MasterRequestRead+0x194>)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f8b9 	bl	8004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e054      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4929      	ldr	r1, [pc, #164]	; (8004a24 <I2C_MasterRequestRead+0x198>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f8a9 	bl	8004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e044      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f831 	bl	8004a28 <I2C_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049da:	d103      	bne.n	80049e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e017      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049e8:	897b      	ldrh	r3, [r7, #10]
 80049ea:	11db      	asrs	r3, r3, #7
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0306 	and.w	r3, r3, #6
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f063 030e 	orn	r3, r3, #14
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4907      	ldr	r1, [pc, #28]	; (8004a24 <I2C_MasterRequestRead+0x198>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f865 	bl	8004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	00010008 	.word	0x00010008
 8004a24:	00010002 	.word	0x00010002

08004a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a38:	e025      	b.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d021      	beq.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a42:	f7fe fe95 	bl	8003770 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d116      	bne.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e023      	b.n	8004ace <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10d      	bne.n	8004aac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bf0c      	ite	eq
 8004aa2:	2301      	moveq	r3, #1
 8004aa4:	2300      	movne	r3, #0
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	e00c      	b.n	8004ac6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d0b6      	beq.n	8004a3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ae4:	e051      	b.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af4:	d123      	bne.n	8004b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0204 	orr.w	r2, r3, #4
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e046      	b.n	8004bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d021      	beq.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fe fe13 	bl	8003770 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d116      	bne.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e020      	b.n	8004bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10c      	bne.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bf14      	ite	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	2300      	moveq	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	e00b      	b.n	8004bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	43da      	mvns	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	bf14      	ite	ne
 8004bc0:	2301      	movne	r3, #1
 8004bc2:	2300      	moveq	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d18d      	bne.n	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be0:	e02d      	b.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f8ce 	bl	8004d84 <I2C_IsAcknowledgeFailed>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e02d      	b.n	8004c4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d021      	beq.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7fe fdb9 	bl	8003770 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d116      	bne.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e007      	b.n	8004c4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	2b80      	cmp	r3, #128	; 0x80
 8004c4a:	d1ca      	bne.n	8004be2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c62:	e02d      	b.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f88d 	bl	8004d84 <I2C_IsAcknowledgeFailed>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e02d      	b.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d021      	beq.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7c:	f7fe fd78 	bl	8003770 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d302      	bcc.n	8004c92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e007      	b.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d1ca      	bne.n	8004c64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce4:	e042      	b.n	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d119      	bne.n	8004d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0210 	mvn.w	r2, #16
 8004cfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e029      	b.n	8004d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d28:	f7fe fd22 	bl	8003770 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e007      	b.n	8004d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b40      	cmp	r3, #64	; 0x40
 8004d78:	d1b5      	bne.n	8004ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9a:	d11b      	bne.n	8004dd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004da4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f043 0204 	orr.w	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_PWR_EnableBkUpAccess+0x20>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004df6:	687b      	ldr	r3, [r7, #4]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	420e0020 	.word	0x420e0020
 8004e08:	40007000 	.word	0x40007000

08004e0c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004e12:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <HAL_PWR_DisableBkUpAccess+0x20>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004e1e:	687b      	ldr	r3, [r7, #4]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	420e0020 	.word	0x420e0020
 8004e30:	40007000 	.word	0x40007000

08004e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e267      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d075      	beq.n	8004f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e52:	4b88      	ldr	r3, [pc, #544]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d00c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e5e:	4b85      	ldr	r3, [pc, #532]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d112      	bne.n	8004e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e6a:	4b82      	ldr	r3, [pc, #520]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e76:	d10b      	bne.n	8004e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e78:	4b7e      	ldr	r3, [pc, #504]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d05b      	beq.n	8004f3c <HAL_RCC_OscConfig+0x108>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d157      	bne.n	8004f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e242      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e98:	d106      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x74>
 8004e9a:	4b76      	ldr	r3, [pc, #472]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a75      	ldr	r2, [pc, #468]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e01d      	b.n	8004ee4 <HAL_RCC_OscConfig+0xb0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x98>
 8004eb2:	4b70      	ldr	r3, [pc, #448]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a6f      	ldr	r2, [pc, #444]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	4b6d      	ldr	r3, [pc, #436]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a6c      	ldr	r2, [pc, #432]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e00b      	b.n	8004ee4 <HAL_RCC_OscConfig+0xb0>
 8004ecc:	4b69      	ldr	r3, [pc, #420]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a68      	ldr	r2, [pc, #416]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	4b66      	ldr	r3, [pc, #408]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a65      	ldr	r2, [pc, #404]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d013      	beq.n	8004f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fe fc40 	bl	8003770 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef4:	f7fe fc3c 	bl	8003770 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	; 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e207      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	4b5b      	ldr	r3, [pc, #364]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0xc0>
 8004f12:	e014      	b.n	8004f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f14:	f7fe fc2c 	bl	8003770 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f1c:	f7fe fc28 	bl	8003770 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b64      	cmp	r3, #100	; 0x64
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e1f3      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2e:	4b51      	ldr	r3, [pc, #324]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0xe8>
 8004f3a:	e000      	b.n	8004f3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d063      	beq.n	8005012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f56:	4b47      	ldr	r3, [pc, #284]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d11c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f62:	4b44      	ldr	r3, [pc, #272]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d116      	bne.n	8004f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6e:	4b41      	ldr	r3, [pc, #260]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_RCC_OscConfig+0x152>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d001      	beq.n	8004f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e1c7      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f86:	4b3b      	ldr	r3, [pc, #236]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	4937      	ldr	r1, [pc, #220]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9a:	e03a      	b.n	8005012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa4:	4b34      	ldr	r3, [pc, #208]	; (8005078 <HAL_RCC_OscConfig+0x244>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004faa:	f7fe fbe1 	bl	8003770 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb2:	f7fe fbdd 	bl	8003770 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e1a8      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4925      	ldr	r1, [pc, #148]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]
 8004fe4:	e015      	b.n	8005012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <HAL_RCC_OscConfig+0x244>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fe fbc0 	bl	8003770 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff4:	f7fe fbbc 	bl	8003770 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e187      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d036      	beq.n	800508c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d016      	beq.n	8005054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <HAL_RCC_OscConfig+0x248>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fe fba0 	bl	8003770 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005034:	f7fe fb9c 	bl	8003770 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e167      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_OscConfig+0x240>)
 8005048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x200>
 8005052:	e01b      	b.n	800508c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_RCC_OscConfig+0x248>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505a:	f7fe fb89 	bl	8003770 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	e00e      	b.n	8005080 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005062:	f7fe fb85 	bl	8003770 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d907      	bls.n	8005080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e150      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
 8005074:	40023800 	.word	0x40023800
 8005078:	42470000 	.word	0x42470000
 800507c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005080:	4b88      	ldr	r3, [pc, #544]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1ea      	bne.n	8005062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8097 	beq.w	80051c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800509a:	2300      	movs	r3, #0
 800509c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509e:	4b81      	ldr	r3, [pc, #516]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10f      	bne.n	80050ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	4b7d      	ldr	r3, [pc, #500]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	4a7c      	ldr	r2, [pc, #496]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 80050b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ba:	4b7a      	ldr	r3, [pc, #488]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ca:	4b77      	ldr	r3, [pc, #476]	; (80052a8 <HAL_RCC_OscConfig+0x474>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d118      	bne.n	8005108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d6:	4b74      	ldr	r3, [pc, #464]	; (80052a8 <HAL_RCC_OscConfig+0x474>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a73      	ldr	r2, [pc, #460]	; (80052a8 <HAL_RCC_OscConfig+0x474>)
 80050dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050e2:	f7fe fb45 	bl	8003770 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ea:	f7fe fb41 	bl	8003770 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e10c      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fc:	4b6a      	ldr	r3, [pc, #424]	; (80052a8 <HAL_RCC_OscConfig+0x474>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d106      	bne.n	800511e <HAL_RCC_OscConfig+0x2ea>
 8005110:	4b64      	ldr	r3, [pc, #400]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	4a63      	ldr	r2, [pc, #396]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	6713      	str	r3, [r2, #112]	; 0x70
 800511c:	e01c      	b.n	8005158 <HAL_RCC_OscConfig+0x324>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b05      	cmp	r3, #5
 8005124:	d10c      	bne.n	8005140 <HAL_RCC_OscConfig+0x30c>
 8005126:	4b5f      	ldr	r3, [pc, #380]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	4a5e      	ldr	r2, [pc, #376]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 800512c:	f043 0304 	orr.w	r3, r3, #4
 8005130:	6713      	str	r3, [r2, #112]	; 0x70
 8005132:	4b5c      	ldr	r3, [pc, #368]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	4a5b      	ldr	r2, [pc, #364]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	6713      	str	r3, [r2, #112]	; 0x70
 800513e:	e00b      	b.n	8005158 <HAL_RCC_OscConfig+0x324>
 8005140:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	4a57      	ldr	r2, [pc, #348]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005146:	f023 0301 	bic.w	r3, r3, #1
 800514a:	6713      	str	r3, [r2, #112]	; 0x70
 800514c:	4b55      	ldr	r3, [pc, #340]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4a54      	ldr	r2, [pc, #336]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005152:	f023 0304 	bic.w	r3, r3, #4
 8005156:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fe fb06 	bl	8003770 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fe fb02 	bl	8003770 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e0cb      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517e:	4b49      	ldr	r3, [pc, #292]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ee      	beq.n	8005168 <HAL_RCC_OscConfig+0x334>
 800518a:	e014      	b.n	80051b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518c:	f7fe faf0 	bl	8003770 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005192:	e00a      	b.n	80051aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005194:	f7fe faec 	bl	8003770 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0b5      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051aa:	4b3e      	ldr	r3, [pc, #248]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1ee      	bne.n	8005194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d105      	bne.n	80051c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051bc:	4b39      	ldr	r3, [pc, #228]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	4a38      	ldr	r2, [pc, #224]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 80051c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80a1 	beq.w	8005314 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051d2:	4b34      	ldr	r3, [pc, #208]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d05c      	beq.n	8005298 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d141      	bne.n	800526a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e6:	4b31      	ldr	r3, [pc, #196]	; (80052ac <HAL_RCC_OscConfig+0x478>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ec:	f7fe fac0 	bl	8003770 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f4:	f7fe fabc 	bl	8003770 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e087      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	019b      	lsls	r3, r3, #6
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	3b01      	subs	r3, #1
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	061b      	lsls	r3, r3, #24
 8005236:	491b      	ldr	r1, [pc, #108]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 8005238:	4313      	orrs	r3, r2
 800523a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800523c:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <HAL_RCC_OscConfig+0x478>)
 800523e:	2201      	movs	r2, #1
 8005240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005242:	f7fe fa95 	bl	8003770 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800524a:	f7fe fa91 	bl	8003770 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e05c      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525c:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x416>
 8005268:	e054      	b.n	8005314 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <HAL_RCC_OscConfig+0x478>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005270:	f7fe fa7e 	bl	8003770 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005278:	f7fe fa7a 	bl	8003770 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e045      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_RCC_OscConfig+0x470>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x444>
 8005296:	e03d      	b.n	8005314 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e038      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
 80052a4:	40023800 	.word	0x40023800
 80052a8:	40007000 	.word	0x40007000
 80052ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052b0:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <HAL_RCC_OscConfig+0x4ec>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d028      	beq.n	8005310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d121      	bne.n	8005310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d11a      	bne.n	8005310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052e0:	4013      	ands	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d111      	bne.n	8005310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	3b01      	subs	r3, #1
 80052fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d107      	bne.n	8005310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e000      	b.n	8005316 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40023800 	.word	0x40023800

08005324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0cc      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005338:	4b68      	ldr	r3, [pc, #416]	; (80054dc <HAL_RCC_ClockConfig+0x1b8>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d90c      	bls.n	8005360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005346:	4b65      	ldr	r3, [pc, #404]	; (80054dc <HAL_RCC_ClockConfig+0x1b8>)
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800534e:	4b63      	ldr	r3, [pc, #396]	; (80054dc <HAL_RCC_ClockConfig+0x1b8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0b8      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d020      	beq.n	80053ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005378:	4b59      	ldr	r3, [pc, #356]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	4a58      	ldr	r2, [pc, #352]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005390:	4b53      	ldr	r3, [pc, #332]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4a52      	ldr	r2, [pc, #328]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800539a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800539c:	4b50      	ldr	r3, [pc, #320]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	494d      	ldr	r1, [pc, #308]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d044      	beq.n	8005444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d107      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c2:	4b47      	ldr	r3, [pc, #284]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d119      	bne.n	8005402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e07f      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d003      	beq.n	80053e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d107      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e2:	4b3f      	ldr	r3, [pc, #252]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e06f      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f2:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e067      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005402:	4b37      	ldr	r3, [pc, #220]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f023 0203 	bic.w	r2, r3, #3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4934      	ldr	r1, [pc, #208]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	4313      	orrs	r3, r2
 8005412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005414:	f7fe f9ac 	bl	8003770 <HAL_GetTick>
 8005418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541a:	e00a      	b.n	8005432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800541c:	f7fe f9a8 	bl	8003770 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	f241 3288 	movw	r2, #5000	; 0x1388
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e04f      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005432:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 020c 	and.w	r2, r3, #12
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	429a      	cmp	r2, r3
 8005442:	d1eb      	bne.n	800541c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005444:	4b25      	ldr	r3, [pc, #148]	; (80054dc <HAL_RCC_ClockConfig+0x1b8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d20c      	bcs.n	800546c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b22      	ldr	r3, [pc, #136]	; (80054dc <HAL_RCC_ClockConfig+0x1b8>)
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800545a:	4b20      	ldr	r3, [pc, #128]	; (80054dc <HAL_RCC_ClockConfig+0x1b8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e032      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005478:	4b19      	ldr	r3, [pc, #100]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4916      	ldr	r1, [pc, #88]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	490e      	ldr	r1, [pc, #56]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054aa:	f000 f821 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	490a      	ldr	r1, [pc, #40]	; (80054e4 <HAL_RCC_ClockConfig+0x1c0>)
 80054bc:	5ccb      	ldrb	r3, [r1, r3]
 80054be:	fa22 f303 	lsr.w	r3, r2, r3
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <HAL_RCC_ClockConfig+0x1c4>)
 80054c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054c6:	4b09      	ldr	r3, [pc, #36]	; (80054ec <HAL_RCC_ClockConfig+0x1c8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fe f90c 	bl	80036e8 <HAL_InitTick>

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40023c00 	.word	0x40023c00
 80054e0:	40023800 	.word	0x40023800
 80054e4:	0800e260 	.word	0x0800e260
 80054e8:	20000004 	.word	0x20000004
 80054ec:	20000008 	.word	0x20000008

080054f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f4:	b090      	sub	sp, #64	; 0x40
 80054f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
 80054fc:	2300      	movs	r3, #0
 80054fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005500:	2300      	movs	r3, #0
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005508:	4b59      	ldr	r3, [pc, #356]	; (8005670 <HAL_RCC_GetSysClockFreq+0x180>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 030c 	and.w	r3, r3, #12
 8005510:	2b08      	cmp	r3, #8
 8005512:	d00d      	beq.n	8005530 <HAL_RCC_GetSysClockFreq+0x40>
 8005514:	2b08      	cmp	r3, #8
 8005516:	f200 80a1 	bhi.w	800565c <HAL_RCC_GetSysClockFreq+0x16c>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0x34>
 800551e:	2b04      	cmp	r3, #4
 8005520:	d003      	beq.n	800552a <HAL_RCC_GetSysClockFreq+0x3a>
 8005522:	e09b      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005524:	4b53      	ldr	r3, [pc, #332]	; (8005674 <HAL_RCC_GetSysClockFreq+0x184>)
 8005526:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005528:	e09b      	b.n	8005662 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800552a:	4b53      	ldr	r3, [pc, #332]	; (8005678 <HAL_RCC_GetSysClockFreq+0x188>)
 800552c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800552e:	e098      	b.n	8005662 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005530:	4b4f      	ldr	r3, [pc, #316]	; (8005670 <HAL_RCC_GetSysClockFreq+0x180>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800553a:	4b4d      	ldr	r3, [pc, #308]	; (8005670 <HAL_RCC_GetSysClockFreq+0x180>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d028      	beq.n	8005598 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005546:	4b4a      	ldr	r3, [pc, #296]	; (8005670 <HAL_RCC_GetSysClockFreq+0x180>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	099b      	lsrs	r3, r3, #6
 800554c:	2200      	movs	r2, #0
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	627a      	str	r2, [r7, #36]	; 0x24
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005558:	2100      	movs	r1, #0
 800555a:	4b47      	ldr	r3, [pc, #284]	; (8005678 <HAL_RCC_GetSysClockFreq+0x188>)
 800555c:	fb03 f201 	mul.w	r2, r3, r1
 8005560:	2300      	movs	r3, #0
 8005562:	fb00 f303 	mul.w	r3, r0, r3
 8005566:	4413      	add	r3, r2
 8005568:	4a43      	ldr	r2, [pc, #268]	; (8005678 <HAL_RCC_GetSysClockFreq+0x188>)
 800556a:	fba0 1202 	umull	r1, r2, r0, r2
 800556e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005570:	460a      	mov	r2, r1
 8005572:	62ba      	str	r2, [r7, #40]	; 0x28
 8005574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005576:	4413      	add	r3, r2
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557c:	2200      	movs	r2, #0
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	61fa      	str	r2, [r7, #28]
 8005582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005586:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800558a:	f7fb fb2d 	bl	8000be8 <__aeabi_uldivmod>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4613      	mov	r3, r2
 8005594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005596:	e053      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005598:	4b35      	ldr	r3, [pc, #212]	; (8005670 <HAL_RCC_GetSysClockFreq+0x180>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	099b      	lsrs	r3, r3, #6
 800559e:	2200      	movs	r2, #0
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	617a      	str	r2, [r7, #20]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055aa:	f04f 0b00 	mov.w	fp, #0
 80055ae:	4652      	mov	r2, sl
 80055b0:	465b      	mov	r3, fp
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f04f 0100 	mov.w	r1, #0
 80055ba:	0159      	lsls	r1, r3, #5
 80055bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055c0:	0150      	lsls	r0, r2, #5
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	ebb2 080a 	subs.w	r8, r2, sl
 80055ca:	eb63 090b 	sbc.w	r9, r3, fp
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055e2:	ebb2 0408 	subs.w	r4, r2, r8
 80055e6:	eb63 0509 	sbc.w	r5, r3, r9
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	00eb      	lsls	r3, r5, #3
 80055f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f8:	00e2      	lsls	r2, r4, #3
 80055fa:	4614      	mov	r4, r2
 80055fc:	461d      	mov	r5, r3
 80055fe:	eb14 030a 	adds.w	r3, r4, sl
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	eb45 030b 	adc.w	r3, r5, fp
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005616:	4629      	mov	r1, r5
 8005618:	028b      	lsls	r3, r1, #10
 800561a:	4621      	mov	r1, r4
 800561c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005620:	4621      	mov	r1, r4
 8005622:	028a      	lsls	r2, r1, #10
 8005624:	4610      	mov	r0, r2
 8005626:	4619      	mov	r1, r3
 8005628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562a:	2200      	movs	r2, #0
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	60fa      	str	r2, [r7, #12]
 8005630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005634:	f7fb fad8 	bl	8000be8 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4613      	mov	r3, r2
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_RCC_GetSysClockFreq+0x180>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	3301      	adds	r3, #1
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800565a:	e002      	b.n	8005662 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetSysClockFreq+0x184>)
 800565e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005664:	4618      	mov	r0, r3
 8005666:	3740      	adds	r7, #64	; 0x40
 8005668:	46bd      	mov	sp, r7
 800566a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800566e:	bf00      	nop
 8005670:	40023800 	.word	0x40023800
 8005674:	00f42400 	.word	0x00f42400
 8005678:	017d7840 	.word	0x017d7840

0800567c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005680:	4b03      	ldr	r3, [pc, #12]	; (8005690 <HAL_RCC_GetHCLKFreq+0x14>)
 8005682:	681b      	ldr	r3, [r3, #0]
}
 8005684:	4618      	mov	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000004 	.word	0x20000004

08005694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005698:	f7ff fff0 	bl	800567c <HAL_RCC_GetHCLKFreq>
 800569c:	4602      	mov	r2, r0
 800569e:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	0a9b      	lsrs	r3, r3, #10
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	4903      	ldr	r1, [pc, #12]	; (80056b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056aa:	5ccb      	ldrb	r3, [r1, r3]
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40023800 	.word	0x40023800
 80056b8:	0800e270 	.word	0x0800e270

080056bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056c0:	f7ff ffdc 	bl	800567c <HAL_RCC_GetHCLKFreq>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	0b5b      	lsrs	r3, r3, #13
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	4903      	ldr	r1, [pc, #12]	; (80056e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056d2:	5ccb      	ldrb	r3, [r1, r3]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d8:	4618      	mov	r0, r3
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40023800 	.word	0x40023800
 80056e0:	0800e270 	.word	0x0800e270

080056e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e041      	b.n	800577a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fd fc82 	bl	8003014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f000 ff94 	bl	8006650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e041      	b.n	8005818 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	d106      	bne.n	80057ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f839 	bl	8005820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3304      	adds	r3, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f000 ff45 	bl	8006650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <HAL_TIM_PWM_Start+0x24>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	e022      	b.n	800589e <HAL_TIM_PWM_Start+0x6a>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b04      	cmp	r3, #4
 800585c:	d109      	bne.n	8005872 <HAL_TIM_PWM_Start+0x3e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	e015      	b.n	800589e <HAL_TIM_PWM_Start+0x6a>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d109      	bne.n	800588c <HAL_TIM_PWM_Start+0x58>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	e008      	b.n	800589e <HAL_TIM_PWM_Start+0x6a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b01      	cmp	r3, #1
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e07c      	b.n	80059a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_PWM_Start+0x82>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b4:	e013      	b.n	80058de <HAL_TIM_PWM_Start+0xaa>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_PWM_Start+0x92>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c4:	e00b      	b.n	80058de <HAL_TIM_PWM_Start+0xaa>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_PWM_Start+0xa2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d4:	e003      	b.n	80058de <HAL_TIM_PWM_Start+0xaa>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2201      	movs	r2, #1
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fac6 	bl	8006e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2d      	ldr	r2, [pc, #180]	; (80059a8 <HAL_TIM_PWM_Start+0x174>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIM_PWM_Start+0xcc>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2c      	ldr	r2, [pc, #176]	; (80059ac <HAL_TIM_PWM_Start+0x178>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d101      	bne.n	8005904 <HAL_TIM_PWM_Start+0xd0>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_TIM_PWM_Start+0xd2>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a22      	ldr	r2, [pc, #136]	; (80059a8 <HAL_TIM_PWM_Start+0x174>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d022      	beq.n	800596a <HAL_TIM_PWM_Start+0x136>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592c:	d01d      	beq.n	800596a <HAL_TIM_PWM_Start+0x136>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <HAL_TIM_PWM_Start+0x17c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d018      	beq.n	800596a <HAL_TIM_PWM_Start+0x136>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <HAL_TIM_PWM_Start+0x180>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <HAL_TIM_PWM_Start+0x136>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1c      	ldr	r2, [pc, #112]	; (80059b8 <HAL_TIM_PWM_Start+0x184>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00e      	beq.n	800596a <HAL_TIM_PWM_Start+0x136>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_TIM_PWM_Start+0x178>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d009      	beq.n	800596a <HAL_TIM_PWM_Start+0x136>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a18      	ldr	r2, [pc, #96]	; (80059bc <HAL_TIM_PWM_Start+0x188>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_TIM_PWM_Start+0x136>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <HAL_TIM_PWM_Start+0x18c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d111      	bne.n	800598e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b06      	cmp	r3, #6
 800597a:	d010      	beq.n	800599e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598c:	e007      	b.n	800599e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0201 	orr.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40010400 	.word	0x40010400
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40001800 	.word	0x40001800

080059c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e041      	b.n	8005a5a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fd fc22 	bl	8003234 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4619      	mov	r1, r3
 8005a02:	4610      	mov	r0, r2
 8005a04:	f000 fe24 	bl	8006650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_IC_Start_IT+0x1e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	e013      	b.n	8005aaa <HAL_TIM_IC_Start_IT+0x46>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d104      	bne.n	8005a92 <HAL_TIM_IC_Start_IT+0x2e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e00b      	b.n	8005aaa <HAL_TIM_IC_Start_IT+0x46>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d104      	bne.n	8005aa2 <HAL_TIM_IC_Start_IT+0x3e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	e003      	b.n	8005aaa <HAL_TIM_IC_Start_IT+0x46>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <HAL_TIM_IC_Start_IT+0x58>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	e013      	b.n	8005ae4 <HAL_TIM_IC_Start_IT+0x80>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d104      	bne.n	8005acc <HAL_TIM_IC_Start_IT+0x68>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	e00b      	b.n	8005ae4 <HAL_TIM_IC_Start_IT+0x80>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d104      	bne.n	8005adc <HAL_TIM_IC_Start_IT+0x78>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	e003      	b.n	8005ae4 <HAL_TIM_IC_Start_IT+0x80>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d102      	bne.n	8005af2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aec:	7b7b      	ldrb	r3, [r7, #13]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d001      	beq.n	8005af6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e0cc      	b.n	8005c90 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_IC_Start_IT+0xa2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	e013      	b.n	8005b2e <HAL_TIM_IC_Start_IT+0xca>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_IC_Start_IT+0xb2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b14:	e00b      	b.n	8005b2e <HAL_TIM_IC_Start_IT+0xca>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d104      	bne.n	8005b26 <HAL_TIM_IC_Start_IT+0xc2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b24:	e003      	b.n	8005b2e <HAL_TIM_IC_Start_IT+0xca>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d104      	bne.n	8005b3e <HAL_TIM_IC_Start_IT+0xda>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b3c:	e013      	b.n	8005b66 <HAL_TIM_IC_Start_IT+0x102>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_IC_Start_IT+0xea>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b4c:	e00b      	b.n	8005b66 <HAL_TIM_IC_Start_IT+0x102>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d104      	bne.n	8005b5e <HAL_TIM_IC_Start_IT+0xfa>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b5c:	e003      	b.n	8005b66 <HAL_TIM_IC_Start_IT+0x102>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b0c      	cmp	r3, #12
 8005b6a:	d841      	bhi.n	8005bf0 <HAL_TIM_IC_Start_IT+0x18c>
 8005b6c:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <HAL_TIM_IC_Start_IT+0x110>)
 8005b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b72:	bf00      	nop
 8005b74:	08005ba9 	.word	0x08005ba9
 8005b78:	08005bf1 	.word	0x08005bf1
 8005b7c:	08005bf1 	.word	0x08005bf1
 8005b80:	08005bf1 	.word	0x08005bf1
 8005b84:	08005bbb 	.word	0x08005bbb
 8005b88:	08005bf1 	.word	0x08005bf1
 8005b8c:	08005bf1 	.word	0x08005bf1
 8005b90:	08005bf1 	.word	0x08005bf1
 8005b94:	08005bcd 	.word	0x08005bcd
 8005b98:	08005bf1 	.word	0x08005bf1
 8005b9c:	08005bf1 	.word	0x08005bf1
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	08005bdf 	.word	0x08005bdf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0202 	orr.w	r2, r2, #2
 8005bb6:	60da      	str	r2, [r3, #12]
      break;
 8005bb8:	e01d      	b.n	8005bf6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0204 	orr.w	r2, r2, #4
 8005bc8:	60da      	str	r2, [r3, #12]
      break;
 8005bca:	e014      	b.n	8005bf6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0208 	orr.w	r2, r2, #8
 8005bda:	60da      	str	r2, [r3, #12]
      break;
 8005bdc:	e00b      	b.n	8005bf6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0210 	orr.w	r2, r2, #16
 8005bec:	60da      	str	r2, [r3, #12]
      break;
 8005bee:	e002      	b.n	8005bf6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d148      	bne.n	8005c8e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2201      	movs	r2, #1
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 f937 	bl	8006e78 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a22      	ldr	r2, [pc, #136]	; (8005c98 <HAL_TIM_IC_Start_IT+0x234>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d022      	beq.n	8005c5a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1c:	d01d      	beq.n	8005c5a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1e      	ldr	r2, [pc, #120]	; (8005c9c <HAL_TIM_IC_Start_IT+0x238>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d018      	beq.n	8005c5a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <HAL_TIM_IC_Start_IT+0x23c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <HAL_TIM_IC_Start_IT+0x240>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a19      	ldr	r2, [pc, #100]	; (8005ca8 <HAL_TIM_IC_Start_IT+0x244>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	; (8005cac <HAL_TIM_IC_Start_IT+0x248>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_TIM_IC_Start_IT+0x1f6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d111      	bne.n	8005c7e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b06      	cmp	r3, #6
 8005c6a:	d010      	beq.n	8005c8e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7c:	e007      	b.n	8005c8e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40000c00 	.word	0x40000c00
 8005ca8:	40010400 	.word	0x40010400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40001800 	.word	0x40001800

08005cb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e097      	b.n	8005df8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d106      	bne.n	8005ce2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fd fa0f 	bl	8003100 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf8:	f023 0307 	bic.w	r3, r3, #7
 8005cfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f000 fca1 	bl	8006650 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	4313      	orrs	r3, r2
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d54:	f023 030c 	bic.w	r3, r3, #12
 8005d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	4313      	orrs	r3, r2
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	011a      	lsls	r2, r3, #4
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	031b      	lsls	r3, r3, #12
 8005d84:	4313      	orrs	r3, r2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	4313      	orrs	r3, r2
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d110      	bne.n	8005e52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d102      	bne.n	8005e3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e36:	7b7b      	ldrb	r3, [r7, #13]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d001      	beq.n	8005e40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e069      	b.n	8005f14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e50:	e031      	b.n	8005eb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d110      	bne.n	8005e7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d102      	bne.n	8005e64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e5e:	7b3b      	ldrb	r3, [r7, #12]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d001      	beq.n	8005e68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e055      	b.n	8005f14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e78:	e01d      	b.n	8005eb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d108      	bne.n	8005e92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e80:	7bbb      	ldrb	r3, [r7, #14]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d105      	bne.n	8005e92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e86:	7b7b      	ldrb	r3, [r7, #13]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d102      	bne.n	8005e92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e8c:	7b3b      	ldrb	r3, [r7, #12]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d001      	beq.n	8005e96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e03e      	b.n	8005f14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_TIM_Encoder_Start+0xc4>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d008      	beq.n	8005ed4 <HAL_TIM_Encoder_Start+0xd4>
 8005ec2:	e00f      	b.n	8005ee4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	2100      	movs	r1, #0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 ffd3 	bl	8006e78 <TIM_CCxChannelCmd>
      break;
 8005ed2:	e016      	b.n	8005f02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	2104      	movs	r1, #4
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 ffcb 	bl	8006e78 <TIM_CCxChannelCmd>
      break;
 8005ee2:	e00e      	b.n	8005f02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 ffc3 	bl	8006e78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	2104      	movs	r1, #4
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 ffbc 	bl	8006e78 <TIM_CCxChannelCmd>
      break;
 8005f00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d122      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d11b      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0202 	mvn.w	r2, #2
 8005f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fb fc4e 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fb54 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fb5b 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d122      	bne.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d11b      	bne.n	8005fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0204 	mvn.w	r2, #4
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fb fc24 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fb2a 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fb31 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d122      	bne.n	8006020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d11b      	bne.n	8006020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0208 	mvn.w	r2, #8
 8005ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fb fbfa 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 800600c:	e005      	b.n	800601a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb00 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fb07 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b10      	cmp	r3, #16
 800602c:	d122      	bne.n	8006074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b10      	cmp	r3, #16
 800603a:	d11b      	bne.n	8006074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0210 	mvn.w	r2, #16
 8006044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2208      	movs	r2, #8
 800604a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fb fbd0 	bl	8001800 <HAL_TIM_IC_CaptureCallback>
 8006060:	e005      	b.n	800606e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fad6 	bl	8006614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fadd 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0201 	mvn.w	r2, #1
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fab0 	bl	8006600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060aa:	2b80      	cmp	r3, #128	; 0x80
 80060ac:	d10e      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b8:	2b80      	cmp	r3, #128	; 0x80
 80060ba:	d107      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 ffd4 	bl	8007074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d10e      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b40      	cmp	r3, #64	; 0x40
 80060e6:	d107      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 faa2 	bl	800663c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b20      	cmp	r3, #32
 8006104:	d10e      	bne.n	8006124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b20      	cmp	r3, #32
 8006112:	d107      	bne.n	8006124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0220 	mvn.w	r2, #32
 800611c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 ff9e 	bl	8007060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006146:	2302      	movs	r3, #2
 8006148:	e088      	b.n	800625c <HAL_TIM_IC_ConfigChannel+0x130>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6819      	ldr	r1, [r3, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f000 fcc2 	bl	8006af0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 020c 	bic.w	r2, r2, #12
 800617a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6999      	ldr	r1, [r3, #24]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	619a      	str	r2, [r3, #24]
 800618e:	e060      	b.n	8006252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b04      	cmp	r3, #4
 8006194:	d11c      	bne.n	80061d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6819      	ldr	r1, [r3, #0]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f000 fd46 	bl	8006c36 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699a      	ldr	r2, [r3, #24]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6999      	ldr	r1, [r3, #24]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	021a      	lsls	r2, r3, #8
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	619a      	str	r2, [r3, #24]
 80061ce:	e040      	b.n	8006252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d11b      	bne.n	800620e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	6819      	ldr	r1, [r3, #0]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f000 fd93 	bl	8006d10 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 020c 	bic.w	r2, r2, #12
 80061f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	61da      	str	r2, [r3, #28]
 800620c:	e021      	b.n	8006252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b0c      	cmp	r3, #12
 8006212:	d11c      	bne.n	800624e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6819      	ldr	r1, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f000 fdb0 	bl	8006d88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006236:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69d9      	ldr	r1, [r3, #28]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	61da      	str	r2, [r3, #28]
 800624c:	e001      	b.n	8006252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800627e:	2302      	movs	r3, #2
 8006280:	e0ae      	b.n	80063e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	f200 809f 	bhi.w	80063d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062cd 	.word	0x080062cd
 800629c:	080063d1 	.word	0x080063d1
 80062a0:	080063d1 	.word	0x080063d1
 80062a4:	080063d1 	.word	0x080063d1
 80062a8:	0800630d 	.word	0x0800630d
 80062ac:	080063d1 	.word	0x080063d1
 80062b0:	080063d1 	.word	0x080063d1
 80062b4:	080063d1 	.word	0x080063d1
 80062b8:	0800634f 	.word	0x0800634f
 80062bc:	080063d1 	.word	0x080063d1
 80062c0:	080063d1 	.word	0x080063d1
 80062c4:	080063d1 	.word	0x080063d1
 80062c8:	0800638f 	.word	0x0800638f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fa5c 	bl	8006790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0208 	orr.w	r2, r2, #8
 80062e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6999      	ldr	r1, [r3, #24]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	619a      	str	r2, [r3, #24]
      break;
 800630a:	e064      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 faac 	bl	8006870 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6999      	ldr	r1, [r3, #24]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	021a      	lsls	r2, r3, #8
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	619a      	str	r2, [r3, #24]
      break;
 800634c:	e043      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fb01 	bl	800695c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0208 	orr.w	r2, r2, #8
 8006368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0204 	bic.w	r2, r2, #4
 8006378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69d9      	ldr	r1, [r3, #28]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	61da      	str	r2, [r3, #28]
      break;
 800638c:	e023      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fb55 	bl	8006a44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69d9      	ldr	r1, [r3, #28]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	021a      	lsls	r2, r3, #8
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	61da      	str	r2, [r3, #28]
      break;
 80063ce:	e002      	b.n	80063d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
      break;
 80063d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063de:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_TIM_ConfigClockSource+0x1c>
 8006400:	2302      	movs	r3, #2
 8006402:	e0b4      	b.n	800656e <HAL_TIM_ConfigClockSource+0x186>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800643c:	d03e      	beq.n	80064bc <HAL_TIM_ConfigClockSource+0xd4>
 800643e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006442:	f200 8087 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644a:	f000 8086 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x172>
 800644e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006452:	d87f      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006454:	2b70      	cmp	r3, #112	; 0x70
 8006456:	d01a      	beq.n	800648e <HAL_TIM_ConfigClockSource+0xa6>
 8006458:	2b70      	cmp	r3, #112	; 0x70
 800645a:	d87b      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 800645c:	2b60      	cmp	r3, #96	; 0x60
 800645e:	d050      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0x11a>
 8006460:	2b60      	cmp	r3, #96	; 0x60
 8006462:	d877      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006464:	2b50      	cmp	r3, #80	; 0x50
 8006466:	d03c      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006468:	2b50      	cmp	r3, #80	; 0x50
 800646a:	d873      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	d058      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x13a>
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d86f      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006474:	2b30      	cmp	r3, #48	; 0x30
 8006476:	d064      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 8006478:	2b30      	cmp	r3, #48	; 0x30
 800647a:	d86b      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 800647c:	2b20      	cmp	r3, #32
 800647e:	d060      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 8006480:	2b20      	cmp	r3, #32
 8006482:	d867      	bhi.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05c      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 8006488:	2b10      	cmp	r3, #16
 800648a:	d05a      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x15a>
 800648c:	e062      	b.n	8006554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6899      	ldr	r1, [r3, #8]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f000 fccb 	bl	8006e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	609a      	str	r2, [r3, #8]
      break;
 80064ba:	e04f      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	6899      	ldr	r1, [r3, #8]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f000 fcb4 	bl	8006e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064de:	609a      	str	r2, [r3, #8]
      break;
 80064e0:	e03c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6859      	ldr	r1, [r3, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f000 fb72 	bl	8006bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2150      	movs	r1, #80	; 0x50
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fc81 	bl	8006e02 <TIM_ITRx_SetConfig>
      break;
 8006500:	e02c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6859      	ldr	r1, [r3, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	461a      	mov	r2, r3
 8006510:	f000 fbce 	bl	8006cb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2160      	movs	r1, #96	; 0x60
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fc71 	bl	8006e02 <TIM_ITRx_SetConfig>
      break;
 8006520:	e01c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6859      	ldr	r1, [r3, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	461a      	mov	r2, r3
 8006530:	f000 fb52 	bl	8006bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2140      	movs	r1, #64	; 0x40
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fc61 	bl	8006e02 <TIM_ITRx_SetConfig>
      break;
 8006540:	e00c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f000 fc58 	bl	8006e02 <TIM_ITRx_SetConfig>
      break;
 8006552:	e003      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e000      	b.n	800655c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800655a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b0c      	cmp	r3, #12
 800658a:	d831      	bhi.n	80065f0 <HAL_TIM_ReadCapturedValue+0x78>
 800658c:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <HAL_TIM_ReadCapturedValue+0x1c>)
 800658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006592:	bf00      	nop
 8006594:	080065c9 	.word	0x080065c9
 8006598:	080065f1 	.word	0x080065f1
 800659c:	080065f1 	.word	0x080065f1
 80065a0:	080065f1 	.word	0x080065f1
 80065a4:	080065d3 	.word	0x080065d3
 80065a8:	080065f1 	.word	0x080065f1
 80065ac:	080065f1 	.word	0x080065f1
 80065b0:	080065f1 	.word	0x080065f1
 80065b4:	080065dd 	.word	0x080065dd
 80065b8:	080065f1 	.word	0x080065f1
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	080065e7 	.word	0x080065e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ce:	60fb      	str	r3, [r7, #12]

      break;
 80065d0:	e00f      	b.n	80065f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	60fb      	str	r3, [r7, #12]

      break;
 80065da:	e00a      	b.n	80065f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	60fb      	str	r3, [r7, #12]

      break;
 80065e4:	e005      	b.n	80065f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	60fb      	str	r3, [r7, #12]

      break;
 80065ee:	e000      	b.n	80065f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80065f0:	bf00      	nop
  }

  return tmpreg;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a40      	ldr	r2, [pc, #256]	; (8006764 <TIM_Base_SetConfig+0x114>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d013      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666e:	d00f      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a3d      	ldr	r2, [pc, #244]	; (8006768 <TIM_Base_SetConfig+0x118>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00b      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a3c      	ldr	r2, [pc, #240]	; (800676c <TIM_Base_SetConfig+0x11c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d007      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3b      	ldr	r2, [pc, #236]	; (8006770 <TIM_Base_SetConfig+0x120>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_Base_SetConfig+0x40>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a3a      	ldr	r2, [pc, #232]	; (8006774 <TIM_Base_SetConfig+0x124>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d108      	bne.n	80066a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2f      	ldr	r2, [pc, #188]	; (8006764 <TIM_Base_SetConfig+0x114>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02b      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d027      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2c      	ldr	r2, [pc, #176]	; (8006768 <TIM_Base_SetConfig+0x118>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d023      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2b      	ldr	r2, [pc, #172]	; (800676c <TIM_Base_SetConfig+0x11c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01f      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2a      	ldr	r2, [pc, #168]	; (8006770 <TIM_Base_SetConfig+0x120>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01b      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a29      	ldr	r2, [pc, #164]	; (8006774 <TIM_Base_SetConfig+0x124>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d017      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a28      	ldr	r2, [pc, #160]	; (8006778 <TIM_Base_SetConfig+0x128>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a27      	ldr	r2, [pc, #156]	; (800677c <TIM_Base_SetConfig+0x12c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00f      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a26      	ldr	r2, [pc, #152]	; (8006780 <TIM_Base_SetConfig+0x130>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00b      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a25      	ldr	r2, [pc, #148]	; (8006784 <TIM_Base_SetConfig+0x134>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d007      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a24      	ldr	r2, [pc, #144]	; (8006788 <TIM_Base_SetConfig+0x138>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_Base_SetConfig+0xb2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a23      	ldr	r2, [pc, #140]	; (800678c <TIM_Base_SetConfig+0x13c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d108      	bne.n	8006714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <TIM_Base_SetConfig+0x114>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_Base_SetConfig+0xf8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a0c      	ldr	r2, [pc, #48]	; (8006774 <TIM_Base_SetConfig+0x124>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d103      	bne.n	8006750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	615a      	str	r2, [r3, #20]
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40010000 	.word	0x40010000
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800
 8006770:	40000c00 	.word	0x40000c00
 8006774:	40010400 	.word	0x40010400
 8006778:	40014000 	.word	0x40014000
 800677c:	40014400 	.word	0x40014400
 8006780:	40014800 	.word	0x40014800
 8006784:	40001800 	.word	0x40001800
 8006788:	40001c00 	.word	0x40001c00
 800678c:	40002000 	.word	0x40002000

08006790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f023 0201 	bic.w	r2, r3, #1
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f023 0302 	bic.w	r3, r3, #2
 80067d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a20      	ldr	r2, [pc, #128]	; (8006868 <TIM_OC1_SetConfig+0xd8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_OC1_SetConfig+0x64>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a1f      	ldr	r2, [pc, #124]	; (800686c <TIM_OC1_SetConfig+0xdc>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d10c      	bne.n	800680e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0308 	bic.w	r3, r3, #8
 80067fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f023 0304 	bic.w	r3, r3, #4
 800680c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a15      	ldr	r2, [pc, #84]	; (8006868 <TIM_OC1_SetConfig+0xd8>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d003      	beq.n	800681e <TIM_OC1_SetConfig+0x8e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a14      	ldr	r2, [pc, #80]	; (800686c <TIM_OC1_SetConfig+0xdc>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d111      	bne.n	8006842 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800682c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	621a      	str	r2, [r3, #32]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	40010000 	.word	0x40010000
 800686c:	40010400 	.word	0x40010400

08006870 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f023 0210 	bic.w	r2, r3, #16
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f023 0320 	bic.w	r3, r3, #32
 80068ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	011b      	lsls	r3, r3, #4
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a22      	ldr	r2, [pc, #136]	; (8006954 <TIM_OC2_SetConfig+0xe4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC2_SetConfig+0x68>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a21      	ldr	r2, [pc, #132]	; (8006958 <TIM_OC2_SetConfig+0xe8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d10d      	bne.n	80068f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a17      	ldr	r2, [pc, #92]	; (8006954 <TIM_OC2_SetConfig+0xe4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d003      	beq.n	8006904 <TIM_OC2_SetConfig+0x94>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a16      	ldr	r2, [pc, #88]	; (8006958 <TIM_OC2_SetConfig+0xe8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d113      	bne.n	800692c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800690a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	bf00      	nop
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40010000 	.word	0x40010000
 8006958:	40010400 	.word	0x40010400

0800695c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0303 	bic.w	r3, r3, #3
 8006992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a21      	ldr	r2, [pc, #132]	; (8006a3c <TIM_OC3_SetConfig+0xe0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d003      	beq.n	80069c2 <TIM_OC3_SetConfig+0x66>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <TIM_OC3_SetConfig+0xe4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d10d      	bne.n	80069de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a16      	ldr	r2, [pc, #88]	; (8006a3c <TIM_OC3_SetConfig+0xe0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d003      	beq.n	80069ee <TIM_OC3_SetConfig+0x92>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a15      	ldr	r2, [pc, #84]	; (8006a40 <TIM_OC3_SetConfig+0xe4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d113      	bne.n	8006a16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	621a      	str	r2, [r3, #32]
}
 8006a30:	bf00      	nop
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40010400 	.word	0x40010400

08006a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	031b      	lsls	r3, r3, #12
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a12      	ldr	r2, [pc, #72]	; (8006ae8 <TIM_OC4_SetConfig+0xa4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC4_SetConfig+0x68>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a11      	ldr	r2, [pc, #68]	; (8006aec <TIM_OC4_SetConfig+0xa8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d109      	bne.n	8006ac0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	019b      	lsls	r3, r3, #6
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40010400 	.word	0x40010400

08006af0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f023 0201 	bic.w	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a28      	ldr	r2, [pc, #160]	; (8006bbc <TIM_TI1_SetConfig+0xcc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01b      	beq.n	8006b56 <TIM_TI1_SetConfig+0x66>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b24:	d017      	beq.n	8006b56 <TIM_TI1_SetConfig+0x66>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4a25      	ldr	r2, [pc, #148]	; (8006bc0 <TIM_TI1_SetConfig+0xd0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <TIM_TI1_SetConfig+0x66>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4a24      	ldr	r2, [pc, #144]	; (8006bc4 <TIM_TI1_SetConfig+0xd4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00f      	beq.n	8006b56 <TIM_TI1_SetConfig+0x66>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4a23      	ldr	r2, [pc, #140]	; (8006bc8 <TIM_TI1_SetConfig+0xd8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00b      	beq.n	8006b56 <TIM_TI1_SetConfig+0x66>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a22      	ldr	r2, [pc, #136]	; (8006bcc <TIM_TI1_SetConfig+0xdc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d007      	beq.n	8006b56 <TIM_TI1_SetConfig+0x66>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4a21      	ldr	r2, [pc, #132]	; (8006bd0 <TIM_TI1_SetConfig+0xe0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d003      	beq.n	8006b56 <TIM_TI1_SetConfig+0x66>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <TIM_TI1_SetConfig+0xe4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d101      	bne.n	8006b5a <TIM_TI1_SetConfig+0x6a>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <TIM_TI1_SetConfig+0x6c>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 0303 	bic.w	r3, r3, #3
 8006b66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e003      	b.n	8006b7a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f023 030a 	bic.w	r3, r3, #10
 8006b94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f003 030a 	and.w	r3, r3, #10
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800
 8006bc8:	40000c00 	.word	0x40000c00
 8006bcc:	40010400 	.word	0x40010400
 8006bd0:	40014000 	.word	0x40014000
 8006bd4:	40001800 	.word	0x40001800

08006bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f023 0201 	bic.w	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f023 030a 	bic.w	r3, r3, #10
 8006c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	621a      	str	r2, [r3, #32]
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b087      	sub	sp, #28
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	f023 0210 	bic.w	r2, r3, #16
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	031b      	lsls	r3, r3, #12
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	621a      	str	r2, [r3, #32]
}
 8006ca4:	bf00      	nop
 8006ca6:	371c      	adds	r7, #28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f023 0210 	bic.w	r2, r3, #16
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	031b      	lsls	r3, r3, #12
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	621a      	str	r2, [r3, #32]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f023 0303 	bic.w	r3, r3, #3
 8006d3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	021b      	lsls	r3, r3, #8
 8006d66:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	621a      	str	r2, [r3, #32]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	021b      	lsls	r3, r3, #8
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	031b      	lsls	r3, r3, #12
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	031b      	lsls	r3, r3, #12
 8006de0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f043 0307 	orr.w	r3, r3, #7
 8006e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	609a      	str	r2, [r3, #8]
}
 8006e2c:	bf00      	nop
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	021a      	lsls	r2, r3, #8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a1a      	ldr	r2, [r3, #32]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	401a      	ands	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1a      	ldr	r2, [r3, #32]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e05a      	b.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a21      	ldr	r2, [pc, #132]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d022      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f28:	d01d      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d018      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1b      	ldr	r2, [pc, #108]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d013      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1a      	ldr	r2, [pc, #104]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00e      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a18      	ldr	r2, [pc, #96]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d009      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a17      	ldr	r2, [pc, #92]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d004      	beq.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d10c      	bne.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40000400 	.word	0x40000400
 8006fa8:	40000800 	.word	0x40000800
 8006fac:	40000c00 	.word	0x40000c00
 8006fb0:	40010400 	.word	0x40010400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40001800 	.word	0x40001800

08006fbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e03d      	b.n	8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e03f      	b.n	800711a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fc f94a 	bl	8003348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2224      	movs	r2, #36	; 0x24
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fddf 	bl	8007c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695a      	ldr	r2, [r3, #20]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b08a      	sub	sp, #40	; 0x28
 8007126:	af02      	add	r7, sp, #8
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	603b      	str	r3, [r7, #0]
 800712e:	4613      	mov	r3, r2
 8007130:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b20      	cmp	r3, #32
 8007140:	d17c      	bne.n	800723c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_UART_Transmit+0x2c>
 8007148:	88fb      	ldrh	r3, [r7, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e075      	b.n	800723e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_UART_Transmit+0x3e>
 800715c:	2302      	movs	r3, #2
 800715e:	e06e      	b.n	800723e <HAL_UART_Transmit+0x11c>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2221      	movs	r2, #33	; 0x21
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007176:	f7fc fafb 	bl	8003770 <HAL_GetTick>
 800717a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	88fa      	ldrh	r2, [r7, #6]
 8007180:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	88fa      	ldrh	r2, [r7, #6]
 8007186:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007190:	d108      	bne.n	80071a4 <HAL_UART_Transmit+0x82>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e003      	b.n	80071ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071b4:	e02a      	b.n	800720c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2200      	movs	r2, #0
 80071be:	2180      	movs	r1, #128	; 0x80
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fb1f 	bl	8007804 <UART_WaitOnFlagUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e036      	b.n	800723e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10b      	bne.n	80071ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	3302      	adds	r3, #2
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	e007      	b.n	80071fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	781a      	ldrb	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	3301      	adds	r3, #1
 80071fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1cf      	bne.n	80071b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2200      	movs	r2, #0
 800721e:	2140      	movs	r1, #64	; 0x40
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 faef 	bl	8007804 <UART_WaitOnFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e006      	b.n	800723e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	e000      	b.n	800723e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	3720      	adds	r7, #32
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	4613      	mov	r3, r2
 8007252:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b20      	cmp	r3, #32
 800725e:	d11d      	bne.n	800729c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_UART_Receive_IT+0x26>
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e016      	b.n	800729e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_UART_Receive_IT+0x38>
 800727a:	2302      	movs	r3, #2
 800727c:	e00f      	b.n	800729e <HAL_UART_Receive_IT+0x58>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	461a      	mov	r2, r3
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fb24 	bl	80078e0 <UART_Start_Receive_IT>
 8007298:	4603      	mov	r3, r0
 800729a:	e000      	b.n	800729e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800729c:	2302      	movs	r3, #2
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b0ba      	sub	sp, #232	; 0xe8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10f      	bne.n	800730e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <HAL_UART_IRQHandler+0x66>
 80072fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fc07 	bl	8007b1a <UART_Receive_IT>
      return;
 800730c:	e256      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800730e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80de 	beq.w	80074d4 <HAL_UART_IRQHandler+0x22c>
 8007318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d106      	bne.n	8007332 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007328:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80d1 	beq.w	80074d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <HAL_UART_IRQHandler+0xae>
 800733e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f043 0201 	orr.w	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <HAL_UART_IRQHandler+0xd2>
 8007362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	f043 0202 	orr.w	r2, r3, #2
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800737a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00b      	beq.n	800739e <HAL_UART_IRQHandler+0xf6>
 8007386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d005      	beq.n	800739e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	f043 0204 	orr.w	r2, r3, #4
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800739e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d011      	beq.n	80073ce <HAL_UART_IRQHandler+0x126>
 80073aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ae:	f003 0320 	and.w	r3, r3, #32
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d105      	bne.n	80073c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f043 0208 	orr.w	r2, r3, #8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 81ed 	beq.w	80077b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073dc:	f003 0320 	and.w	r3, r3, #32
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <HAL_UART_IRQHandler+0x14e>
 80073e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fb92 	bl	8007b1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	bf0c      	ite	eq
 8007404:	2301      	moveq	r3, #1
 8007406:	2300      	movne	r3, #0
 8007408:	b2db      	uxtb	r3, r3
 800740a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <HAL_UART_IRQHandler+0x17a>
 800741a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d04f      	beq.n	80074c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa9a 	bl	800795c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d141      	bne.n	80074ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3314      	adds	r3, #20
 800743c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800744c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3314      	adds	r3, #20
 800745e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007462:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800746e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800747a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1d9      	bne.n	8007436 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	2b00      	cmp	r3, #0
 8007488:	d013      	beq.n	80074b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	4a7d      	ldr	r2, [pc, #500]	; (8007684 <HAL_UART_IRQHandler+0x3dc>)
 8007490:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	4618      	mov	r0, r3
 8007498:	f7fc fb1b 	bl	8003ad2 <HAL_DMA_Abort_IT>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d016      	beq.n	80074d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b0:	e00e      	b.n	80074d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f990 	bl	80077d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b8:	e00a      	b.n	80074d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f98c 	bl	80077d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c0:	e006      	b.n	80074d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f988 	bl	80077d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074ce:	e170      	b.n	80077b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d0:	bf00      	nop
    return;
 80074d2:	e16e      	b.n	80077b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	2b01      	cmp	r3, #1
 80074da:	f040 814a 	bne.w	8007772 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e2:	f003 0310 	and.w	r3, r3, #16
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 8143 	beq.w	8007772 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f0:	f003 0310 	and.w	r3, r3, #16
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 813c 	beq.w	8007772 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074fa:	2300      	movs	r3, #0
 80074fc:	60bb      	str	r3, [r7, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60bb      	str	r3, [r7, #8]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	60bb      	str	r3, [r7, #8]
 800750e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	f040 80b4 	bne.w	8007688 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800752c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8140 	beq.w	80077b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800753a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800753e:	429a      	cmp	r2, r3
 8007540:	f080 8139 	bcs.w	80077b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800754a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007556:	f000 8088 	beq.w	800766a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800758a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007592:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800759e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1d9      	bne.n	800755a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3314      	adds	r3, #20
 80075ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	3314      	adds	r3, #20
 80075c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e1      	bne.n	80075a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3314      	adds	r3, #20
 80075e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3314      	adds	r3, #20
 8007602:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007606:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007608:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800760c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e3      	bne.n	80075e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800763a:	f023 0310 	bic.w	r3, r3, #16
 800763e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	330c      	adds	r3, #12
 8007648:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800764c:	65ba      	str	r2, [r7, #88]	; 0x58
 800764e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800765a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e3      	bne.n	8007628 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	4618      	mov	r0, r3
 8007666:	f7fc f9c4 	bl	80039f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007672:	b29b      	uxth	r3, r3
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	b29b      	uxth	r3, r3
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f8b6 	bl	80077ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007680:	e099      	b.n	80077b6 <HAL_UART_IRQHandler+0x50e>
 8007682:	bf00      	nop
 8007684:	08007a23 	.word	0x08007a23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007690:	b29b      	uxth	r3, r3
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 808b 	beq.w	80077ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 8086 	beq.w	80077ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	330c      	adds	r3, #12
 80076ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076d2:	647a      	str	r2, [r7, #68]	; 0x44
 80076d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e3      	bne.n	80076ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3314      	adds	r3, #20
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	623b      	str	r3, [r7, #32]
   return(result);
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3314      	adds	r3, #20
 8007706:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800770a:	633a      	str	r2, [r7, #48]	; 0x30
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e3      	bne.n	80076e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	330c      	adds	r3, #12
 8007732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	60fb      	str	r3, [r7, #12]
   return(result);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0310 	bic.w	r3, r3, #16
 8007742:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007750:	61fa      	str	r2, [r7, #28]
 8007752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	69b9      	ldr	r1, [r7, #24]
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	617b      	str	r3, [r7, #20]
   return(result);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e3      	bne.n	800772c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f83e 	bl	80077ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007770:	e023      	b.n	80077ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <HAL_UART_IRQHandler+0x4ea>
 800777e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f95d 	bl	8007a4a <UART_Transmit_IT>
    return;
 8007790:	e014      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00e      	beq.n	80077bc <HAL_UART_IRQHandler+0x514>
 800779e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d008      	beq.n	80077bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f99d 	bl	8007aea <UART_EndTransmit_IT>
    return;
 80077b0:	e004      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
    return;
 80077b2:	bf00      	nop
 80077b4:	e002      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
      return;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <HAL_UART_IRQHandler+0x514>
      return;
 80077ba:	bf00      	nop
  }
}
 80077bc:	37e8      	adds	r7, #232	; 0xe8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop

080077c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b090      	sub	sp, #64	; 0x40
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	4613      	mov	r3, r2
 8007812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007814:	e050      	b.n	80078b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781c:	d04c      	beq.n	80078b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800781e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <UART_WaitOnFlagUntilTimeout+0x30>
 8007824:	f7fb ffa4 	bl	8003770 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007830:	429a      	cmp	r2, r3
 8007832:	d241      	bcs.n	80078b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	330c      	adds	r3, #12
 8007852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007854:	637a      	str	r2, [r7, #52]	; 0x34
 8007856:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800785a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e5      	bne.n	8007834 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3314      	adds	r3, #20
 800786e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	613b      	str	r3, [r7, #16]
   return(result);
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f023 0301 	bic.w	r3, r3, #1
 800787e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3314      	adds	r3, #20
 8007886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007888:	623a      	str	r2, [r7, #32]
 800788a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	69f9      	ldr	r1, [r7, #28]
 800788e:	6a3a      	ldr	r2, [r7, #32]
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	61bb      	str	r3, [r7, #24]
   return(result);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e5      	bne.n	8007868 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e00f      	b.n	80078d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	4013      	ands	r3, r2
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	bf0c      	ite	eq
 80078c8:	2301      	moveq	r3, #1
 80078ca:	2300      	movne	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	461a      	mov	r2, r3
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d09f      	beq.n	8007816 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3740      	adds	r7, #64	; 0x40
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	88fa      	ldrh	r2, [r7, #6]
 80078f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	88fa      	ldrh	r2, [r7, #6]
 80078fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2222      	movs	r2, #34	; 0x22
 800790a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800792c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695a      	ldr	r2, [r3, #20]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0201 	orr.w	r2, r2, #1
 800793c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0220 	orr.w	r2, r2, #32
 800794c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b095      	sub	sp, #84	; 0x54
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	330c      	adds	r3, #12
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	330c      	adds	r3, #12
 8007982:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007984:	643a      	str	r2, [r7, #64]	; 0x40
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800798a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e5      	bne.n	8007964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3314      	adds	r3, #20
 800799e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3314      	adds	r3, #20
 80079b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e5      	bne.n	8007998 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d119      	bne.n	8007a08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	330c      	adds	r3, #12
 80079da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f023 0310 	bic.w	r3, r3, #16
 80079ea:	647b      	str	r3, [r7, #68]	; 0x44
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	330c      	adds	r3, #12
 80079f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079f4:	61ba      	str	r2, [r7, #24]
 80079f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6979      	ldr	r1, [r7, #20]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	613b      	str	r3, [r7, #16]
   return(result);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e5      	bne.n	80079d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a16:	bf00      	nop
 8007a18:	3754      	adds	r7, #84	; 0x54
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f7ff fecb 	bl	80077d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b21      	cmp	r3, #33	; 0x21
 8007a5c:	d13e      	bne.n	8007adc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a66:	d114      	bne.n	8007a92 <UART_Transmit_IT+0x48>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d110      	bne.n	8007a92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	1c9a      	adds	r2, r3, #2
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	621a      	str	r2, [r3, #32]
 8007a90:	e008      	b.n	8007aa4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	1c59      	adds	r1, r3, #1
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6211      	str	r1, [r2, #32]
 8007a9c:	781a      	ldrb	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10f      	bne.n	8007ad8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ac6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ad6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e000      	b.n	8007ade <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007adc:	2302      	movs	r3, #2
  }
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff fe5a 	bl	80077c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b08c      	sub	sp, #48	; 0x30
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b22      	cmp	r3, #34	; 0x22
 8007b2c:	f040 80ab 	bne.w	8007c86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b38:	d117      	bne.n	8007b6a <UART_Receive_IT+0x50>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d113      	bne.n	8007b6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	1c9a      	adds	r2, r3, #2
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	629a      	str	r2, [r3, #40]	; 0x28
 8007b68:	e026      	b.n	8007bb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7c:	d007      	beq.n	8007b8e <UART_Receive_IT+0x74>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10a      	bne.n	8007b9c <UART_Receive_IT+0x82>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d106      	bne.n	8007b9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	e008      	b.n	8007bae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d15a      	bne.n	8007c82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0220 	bic.w	r2, r2, #32
 8007bda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695a      	ldr	r2, [r3, #20]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0201 	bic.w	r2, r2, #1
 8007bfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d135      	bne.n	8007c78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	330c      	adds	r3, #12
 8007c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	613b      	str	r3, [r7, #16]
   return(result);
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f023 0310 	bic.w	r3, r3, #16
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	330c      	adds	r3, #12
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	623a      	str	r2, [r7, #32]
 8007c34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	69f9      	ldr	r1, [r7, #28]
 8007c38:	6a3a      	ldr	r2, [r7, #32]
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e5      	bne.n	8007c12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b10      	cmp	r3, #16
 8007c52:	d10a      	bne.n	8007c6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff fdbb 	bl	80077ec <HAL_UARTEx_RxEventCallback>
 8007c76:	e002      	b.n	8007c7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7f9 fd95 	bl	80017a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e002      	b.n	8007c88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e000      	b.n	8007c88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c86:	2302      	movs	r3, #2
  }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3730      	adds	r7, #48	; 0x30
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c94:	b0c0      	sub	sp, #256	; 0x100
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cac:	68d9      	ldr	r1, [r3, #12]
 8007cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	ea40 0301 	orr.w	r3, r0, r1
 8007cb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ce8:	f021 010c 	bic.w	r1, r1, #12
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007cf6:	430b      	orrs	r3, r1
 8007cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d0a:	6999      	ldr	r1, [r3, #24]
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	ea40 0301 	orr.w	r3, r0, r1
 8007d16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4b8f      	ldr	r3, [pc, #572]	; (8007f5c <UART_SetConfig+0x2cc>)
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d005      	beq.n	8007d30 <UART_SetConfig+0xa0>
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	4b8d      	ldr	r3, [pc, #564]	; (8007f60 <UART_SetConfig+0x2d0>)
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d104      	bne.n	8007d3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d30:	f7fd fcc4 	bl	80056bc <HAL_RCC_GetPCLK2Freq>
 8007d34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d38:	e003      	b.n	8007d42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d3a:	f7fd fcab 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
 8007d3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d4c:	f040 810c 	bne.w	8007f68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d62:	4622      	mov	r2, r4
 8007d64:	462b      	mov	r3, r5
 8007d66:	1891      	adds	r1, r2, r2
 8007d68:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d6a:	415b      	adcs	r3, r3
 8007d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d72:	4621      	mov	r1, r4
 8007d74:	eb12 0801 	adds.w	r8, r2, r1
 8007d78:	4629      	mov	r1, r5
 8007d7a:	eb43 0901 	adc.w	r9, r3, r1
 8007d7e:	f04f 0200 	mov.w	r2, #0
 8007d82:	f04f 0300 	mov.w	r3, #0
 8007d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d92:	4690      	mov	r8, r2
 8007d94:	4699      	mov	r9, r3
 8007d96:	4623      	mov	r3, r4
 8007d98:	eb18 0303 	adds.w	r3, r8, r3
 8007d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007da0:	462b      	mov	r3, r5
 8007da2:	eb49 0303 	adc.w	r3, r9, r3
 8007da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007db6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	18db      	adds	r3, r3, r3
 8007dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	eb42 0303 	adc.w	r3, r2, r3
 8007dca:	657b      	str	r3, [r7, #84]	; 0x54
 8007dcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007dd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007dd4:	f7f8 ff08 	bl	8000be8 <__aeabi_uldivmod>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4b61      	ldr	r3, [pc, #388]	; (8007f64 <UART_SetConfig+0x2d4>)
 8007dde:	fba3 2302 	umull	r2, r3, r3, r2
 8007de2:	095b      	lsrs	r3, r3, #5
 8007de4:	011c      	lsls	r4, r3, #4
 8007de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007df0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007df4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007df8:	4642      	mov	r2, r8
 8007dfa:	464b      	mov	r3, r9
 8007dfc:	1891      	adds	r1, r2, r2
 8007dfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e00:	415b      	adcs	r3, r3
 8007e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e08:	4641      	mov	r1, r8
 8007e0a:	eb12 0a01 	adds.w	sl, r2, r1
 8007e0e:	4649      	mov	r1, r9
 8007e10:	eb43 0b01 	adc.w	fp, r3, r1
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	f04f 0300 	mov.w	r3, #0
 8007e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e28:	4692      	mov	sl, r2
 8007e2a:	469b      	mov	fp, r3
 8007e2c:	4643      	mov	r3, r8
 8007e2e:	eb1a 0303 	adds.w	r3, sl, r3
 8007e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e36:	464b      	mov	r3, r9
 8007e38:	eb4b 0303 	adc.w	r3, fp, r3
 8007e3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e54:	460b      	mov	r3, r1
 8007e56:	18db      	adds	r3, r3, r3
 8007e58:	643b      	str	r3, [r7, #64]	; 0x40
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	eb42 0303 	adc.w	r3, r2, r3
 8007e60:	647b      	str	r3, [r7, #68]	; 0x44
 8007e62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e6a:	f7f8 febd 	bl	8000be8 <__aeabi_uldivmod>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	4b3b      	ldr	r3, [pc, #236]	; (8007f64 <UART_SetConfig+0x2d4>)
 8007e76:	fba3 2301 	umull	r2, r3, r3, r1
 8007e7a:	095b      	lsrs	r3, r3, #5
 8007e7c:	2264      	movs	r2, #100	; 0x64
 8007e7e:	fb02 f303 	mul.w	r3, r2, r3
 8007e82:	1acb      	subs	r3, r1, r3
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e8a:	4b36      	ldr	r3, [pc, #216]	; (8007f64 <UART_SetConfig+0x2d4>)
 8007e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e98:	441c      	add	r4, r3
 8007e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ea4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007ea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007eac:	4642      	mov	r2, r8
 8007eae:	464b      	mov	r3, r9
 8007eb0:	1891      	adds	r1, r2, r2
 8007eb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007eb4:	415b      	adcs	r3, r3
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ebc:	4641      	mov	r1, r8
 8007ebe:	1851      	adds	r1, r2, r1
 8007ec0:	6339      	str	r1, [r7, #48]	; 0x30
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	414b      	adcs	r3, r1
 8007ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec8:	f04f 0200 	mov.w	r2, #0
 8007ecc:	f04f 0300 	mov.w	r3, #0
 8007ed0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ed4:	4659      	mov	r1, fp
 8007ed6:	00cb      	lsls	r3, r1, #3
 8007ed8:	4651      	mov	r1, sl
 8007eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ede:	4651      	mov	r1, sl
 8007ee0:	00ca      	lsls	r2, r1, #3
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	4642      	mov	r2, r8
 8007eea:	189b      	adds	r3, r3, r2
 8007eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ef0:	464b      	mov	r3, r9
 8007ef2:	460a      	mov	r2, r1
 8007ef4:	eb42 0303 	adc.w	r3, r2, r3
 8007ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f10:	460b      	mov	r3, r1
 8007f12:	18db      	adds	r3, r3, r3
 8007f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f16:	4613      	mov	r3, r2
 8007f18:	eb42 0303 	adc.w	r3, r2, r3
 8007f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f26:	f7f8 fe5f 	bl	8000be8 <__aeabi_uldivmod>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <UART_SetConfig+0x2d4>)
 8007f30:	fba3 1302 	umull	r1, r3, r3, r2
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	2164      	movs	r1, #100	; 0x64
 8007f38:	fb01 f303 	mul.w	r3, r1, r3
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	3332      	adds	r3, #50	; 0x32
 8007f42:	4a08      	ldr	r2, [pc, #32]	; (8007f64 <UART_SetConfig+0x2d4>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	f003 0207 	and.w	r2, r3, #7
 8007f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4422      	add	r2, r4
 8007f56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f58:	e105      	b.n	8008166 <UART_SetConfig+0x4d6>
 8007f5a:	bf00      	nop
 8007f5c:	40011000 	.word	0x40011000
 8007f60:	40011400 	.word	0x40011400
 8007f64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f7a:	4642      	mov	r2, r8
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	1891      	adds	r1, r2, r2
 8007f80:	6239      	str	r1, [r7, #32]
 8007f82:	415b      	adcs	r3, r3
 8007f84:	627b      	str	r3, [r7, #36]	; 0x24
 8007f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f8a:	4641      	mov	r1, r8
 8007f8c:	1854      	adds	r4, r2, r1
 8007f8e:	4649      	mov	r1, r9
 8007f90:	eb43 0501 	adc.w	r5, r3, r1
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	00eb      	lsls	r3, r5, #3
 8007f9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fa2:	00e2      	lsls	r2, r4, #3
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	461d      	mov	r5, r3
 8007fa8:	4643      	mov	r3, r8
 8007faa:	18e3      	adds	r3, r4, r3
 8007fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	eb45 0303 	adc.w	r3, r5, r3
 8007fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	008b      	lsls	r3, r1, #2
 8007fda:	4621      	mov	r1, r4
 8007fdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	008a      	lsls	r2, r1, #2
 8007fe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007fe8:	f7f8 fdfe 	bl	8000be8 <__aeabi_uldivmod>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4b60      	ldr	r3, [pc, #384]	; (8008174 <UART_SetConfig+0x4e4>)
 8007ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ff6:	095b      	lsrs	r3, r3, #5
 8007ff8:	011c      	lsls	r4, r3, #4
 8007ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008004:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800800c:	4642      	mov	r2, r8
 800800e:	464b      	mov	r3, r9
 8008010:	1891      	adds	r1, r2, r2
 8008012:	61b9      	str	r1, [r7, #24]
 8008014:	415b      	adcs	r3, r3
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800801c:	4641      	mov	r1, r8
 800801e:	1851      	adds	r1, r2, r1
 8008020:	6139      	str	r1, [r7, #16]
 8008022:	4649      	mov	r1, r9
 8008024:	414b      	adcs	r3, r1
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	f04f 0200 	mov.w	r2, #0
 800802c:	f04f 0300 	mov.w	r3, #0
 8008030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008034:	4659      	mov	r1, fp
 8008036:	00cb      	lsls	r3, r1, #3
 8008038:	4651      	mov	r1, sl
 800803a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800803e:	4651      	mov	r1, sl
 8008040:	00ca      	lsls	r2, r1, #3
 8008042:	4610      	mov	r0, r2
 8008044:	4619      	mov	r1, r3
 8008046:	4603      	mov	r3, r0
 8008048:	4642      	mov	r2, r8
 800804a:	189b      	adds	r3, r3, r2
 800804c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008050:	464b      	mov	r3, r9
 8008052:	460a      	mov	r2, r1
 8008054:	eb42 0303 	adc.w	r3, r2, r3
 8008058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800805c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	67bb      	str	r3, [r7, #120]	; 0x78
 8008066:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008068:	f04f 0200 	mov.w	r2, #0
 800806c:	f04f 0300 	mov.w	r3, #0
 8008070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008074:	4649      	mov	r1, r9
 8008076:	008b      	lsls	r3, r1, #2
 8008078:	4641      	mov	r1, r8
 800807a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800807e:	4641      	mov	r1, r8
 8008080:	008a      	lsls	r2, r1, #2
 8008082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008086:	f7f8 fdaf 	bl	8000be8 <__aeabi_uldivmod>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	4b39      	ldr	r3, [pc, #228]	; (8008174 <UART_SetConfig+0x4e4>)
 8008090:	fba3 1302 	umull	r1, r3, r3, r2
 8008094:	095b      	lsrs	r3, r3, #5
 8008096:	2164      	movs	r1, #100	; 0x64
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	011b      	lsls	r3, r3, #4
 80080a0:	3332      	adds	r3, #50	; 0x32
 80080a2:	4a34      	ldr	r2, [pc, #208]	; (8008174 <UART_SetConfig+0x4e4>)
 80080a4:	fba2 2303 	umull	r2, r3, r2, r3
 80080a8:	095b      	lsrs	r3, r3, #5
 80080aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080ae:	441c      	add	r4, r3
 80080b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080b4:	2200      	movs	r2, #0
 80080b6:	673b      	str	r3, [r7, #112]	; 0x70
 80080b8:	677a      	str	r2, [r7, #116]	; 0x74
 80080ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80080be:	4642      	mov	r2, r8
 80080c0:	464b      	mov	r3, r9
 80080c2:	1891      	adds	r1, r2, r2
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	415b      	adcs	r3, r3
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080ce:	4641      	mov	r1, r8
 80080d0:	1851      	adds	r1, r2, r1
 80080d2:	6039      	str	r1, [r7, #0]
 80080d4:	4649      	mov	r1, r9
 80080d6:	414b      	adcs	r3, r1
 80080d8:	607b      	str	r3, [r7, #4]
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080e6:	4659      	mov	r1, fp
 80080e8:	00cb      	lsls	r3, r1, #3
 80080ea:	4651      	mov	r1, sl
 80080ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080f0:	4651      	mov	r1, sl
 80080f2:	00ca      	lsls	r2, r1, #3
 80080f4:	4610      	mov	r0, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	4603      	mov	r3, r0
 80080fa:	4642      	mov	r2, r8
 80080fc:	189b      	adds	r3, r3, r2
 80080fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008100:	464b      	mov	r3, r9
 8008102:	460a      	mov	r2, r1
 8008104:	eb42 0303 	adc.w	r3, r2, r3
 8008108:	66fb      	str	r3, [r7, #108]	; 0x6c
 800810a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	663b      	str	r3, [r7, #96]	; 0x60
 8008114:	667a      	str	r2, [r7, #100]	; 0x64
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	f04f 0300 	mov.w	r3, #0
 800811e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008122:	4649      	mov	r1, r9
 8008124:	008b      	lsls	r3, r1, #2
 8008126:	4641      	mov	r1, r8
 8008128:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800812c:	4641      	mov	r1, r8
 800812e:	008a      	lsls	r2, r1, #2
 8008130:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008134:	f7f8 fd58 	bl	8000be8 <__aeabi_uldivmod>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <UART_SetConfig+0x4e4>)
 800813e:	fba3 1302 	umull	r1, r3, r3, r2
 8008142:	095b      	lsrs	r3, r3, #5
 8008144:	2164      	movs	r1, #100	; 0x64
 8008146:	fb01 f303 	mul.w	r3, r1, r3
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	3332      	adds	r3, #50	; 0x32
 8008150:	4a08      	ldr	r2, [pc, #32]	; (8008174 <UART_SetConfig+0x4e4>)
 8008152:	fba2 2303 	umull	r2, r3, r2, r3
 8008156:	095b      	lsrs	r3, r3, #5
 8008158:	f003 020f 	and.w	r2, r3, #15
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4422      	add	r2, r4
 8008164:	609a      	str	r2, [r3, #8]
}
 8008166:	bf00      	nop
 8008168:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800816c:	46bd      	mov	sp, r7
 800816e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008172:	bf00      	nop
 8008174:	51eb851f 	.word	0x51eb851f

08008178 <__NVIC_SetPriority>:
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	6039      	str	r1, [r7, #0]
 8008182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008188:	2b00      	cmp	r3, #0
 800818a:	db0a      	blt.n	80081a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	490c      	ldr	r1, [pc, #48]	; (80081c4 <__NVIC_SetPriority+0x4c>)
 8008192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008196:	0112      	lsls	r2, r2, #4
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	440b      	add	r3, r1
 800819c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081a0:	e00a      	b.n	80081b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	4908      	ldr	r1, [pc, #32]	; (80081c8 <__NVIC_SetPriority+0x50>)
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	3b04      	subs	r3, #4
 80081b0:	0112      	lsls	r2, r2, #4
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	440b      	add	r3, r1
 80081b6:	761a      	strb	r2, [r3, #24]
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	e000e100 	.word	0xe000e100
 80081c8:	e000ed00 	.word	0xe000ed00

080081cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081d0:	2100      	movs	r1, #0
 80081d2:	f06f 0004 	mvn.w	r0, #4
 80081d6:	f7ff ffcf 	bl	8008178 <__NVIC_SetPriority>
#endif
}
 80081da:	bf00      	nop
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081e6:	f3ef 8305 	mrs	r3, IPSR
 80081ea:	603b      	str	r3, [r7, #0]
  return(result);
 80081ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081f2:	f06f 0305 	mvn.w	r3, #5
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	e00c      	b.n	8008214 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081fa:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <osKernelInitialize+0x44>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d105      	bne.n	800820e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008202:	4b08      	ldr	r3, [pc, #32]	; (8008224 <osKernelInitialize+0x44>)
 8008204:	2201      	movs	r2, #1
 8008206:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008208:	2300      	movs	r3, #0
 800820a:	607b      	str	r3, [r7, #4]
 800820c:	e002      	b.n	8008214 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800820e:	f04f 33ff 	mov.w	r3, #4294967295
 8008212:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008214:	687b      	ldr	r3, [r7, #4]
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	200004d0 	.word	0x200004d0

08008228 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800822e:	f3ef 8305 	mrs	r3, IPSR
 8008232:	603b      	str	r3, [r7, #0]
  return(result);
 8008234:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <osKernelStart+0x1a>
    stat = osErrorISR;
 800823a:	f06f 0305 	mvn.w	r3, #5
 800823e:	607b      	str	r3, [r7, #4]
 8008240:	e010      	b.n	8008264 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008242:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <osKernelStart+0x48>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d109      	bne.n	800825e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800824a:	f7ff ffbf 	bl	80081cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800824e:	4b08      	ldr	r3, [pc, #32]	; (8008270 <osKernelStart+0x48>)
 8008250:	2202      	movs	r2, #2
 8008252:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008254:	f001 f87c 	bl	8009350 <vTaskStartScheduler>
      stat = osOK;
 8008258:	2300      	movs	r3, #0
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	e002      	b.n	8008264 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008264:	687b      	ldr	r3, [r7, #4]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	200004d0 	.word	0x200004d0

08008274 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008274:	b580      	push	{r7, lr}
 8008276:	b08e      	sub	sp, #56	; 0x38
 8008278:	af04      	add	r7, sp, #16
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008280:	2300      	movs	r3, #0
 8008282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008284:	f3ef 8305 	mrs	r3, IPSR
 8008288:	617b      	str	r3, [r7, #20]
  return(result);
 800828a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800828c:	2b00      	cmp	r3, #0
 800828e:	d17e      	bne.n	800838e <osThreadNew+0x11a>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d07b      	beq.n	800838e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008296:	2380      	movs	r3, #128	; 0x80
 8008298:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800829a:	2318      	movs	r3, #24
 800829c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80082a2:	f04f 33ff 	mov.w	r3, #4294967295
 80082a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d045      	beq.n	800833a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <osThreadNew+0x48>
        name = attr->name;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d008      	beq.n	80082e2 <osThreadNew+0x6e>
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	2b38      	cmp	r3, #56	; 0x38
 80082d4:	d805      	bhi.n	80082e2 <osThreadNew+0x6e>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <osThreadNew+0x72>
        return (NULL);
 80082e2:	2300      	movs	r3, #0
 80082e4:	e054      	b.n	8008390 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	089b      	lsrs	r3, r3, #2
 80082f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00e      	beq.n	800831c <osThreadNew+0xa8>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	2bbb      	cmp	r3, #187	; 0xbb
 8008304:	d90a      	bls.n	800831c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800830a:	2b00      	cmp	r3, #0
 800830c:	d006      	beq.n	800831c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d002      	beq.n	800831c <osThreadNew+0xa8>
        mem = 1;
 8008316:	2301      	movs	r3, #1
 8008318:	61bb      	str	r3, [r7, #24]
 800831a:	e010      	b.n	800833e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10c      	bne.n	800833e <osThreadNew+0xca>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d108      	bne.n	800833e <osThreadNew+0xca>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d104      	bne.n	800833e <osThreadNew+0xca>
          mem = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	61bb      	str	r3, [r7, #24]
 8008338:	e001      	b.n	800833e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d110      	bne.n	8008366 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800834c:	9202      	str	r2, [sp, #8]
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6a3a      	ldr	r2, [r7, #32]
 8008358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 fe0c 	bl	8008f78 <xTaskCreateStatic>
 8008360:	4603      	mov	r3, r0
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	e013      	b.n	800838e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d110      	bne.n	800838e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	b29a      	uxth	r2, r3
 8008370:	f107 0310 	add.w	r3, r7, #16
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fe57 	bl	8009032 <xTaskCreate>
 8008384:	4603      	mov	r3, r0
 8008386:	2b01      	cmp	r3, #1
 8008388:	d001      	beq.n	800838e <osThreadNew+0x11a>
            hTask = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800838e:	693b      	ldr	r3, [r7, #16]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3728      	adds	r7, #40	; 0x28
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083a0:	f3ef 8305 	mrs	r3, IPSR
 80083a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80083a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <osDelay+0x1c>
    stat = osErrorISR;
 80083ac:	f06f 0305 	mvn.w	r3, #5
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	e007      	b.n	80083c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 ff92 	bl	80092e8 <vTaskDelay>
    }
  }

  return (stat);
 80083c4:	68fb      	ldr	r3, [r7, #12]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
	...

080083d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4a07      	ldr	r2, [pc, #28]	; (80083fc <vApplicationGetIdleTaskMemory+0x2c>)
 80083e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4a06      	ldr	r2, [pc, #24]	; (8008400 <vApplicationGetIdleTaskMemory+0x30>)
 80083e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2280      	movs	r2, #128	; 0x80
 80083ec:	601a      	str	r2, [r3, #0]
}
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	200004d4 	.word	0x200004d4
 8008400:	20000590 	.word	0x20000590

08008404 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4a07      	ldr	r2, [pc, #28]	; (8008430 <vApplicationGetTimerTaskMemory+0x2c>)
 8008414:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	4a06      	ldr	r2, [pc, #24]	; (8008434 <vApplicationGetTimerTaskMemory+0x30>)
 800841a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008422:	601a      	str	r2, [r3, #0]
}
 8008424:	bf00      	nop
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	20000790 	.word	0x20000790
 8008434:	2000084c 	.word	0x2000084c

08008438 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f103 0208 	add.w	r2, r3, #8
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f04f 32ff 	mov.w	r2, #4294967295
 8008450:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f103 0208 	add.w	r2, r3, #8
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f103 0208 	add.w	r2, r3, #8
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008492:	b480      	push	{r7}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	601a      	str	r2, [r3, #0]
}
 80084ce:	bf00      	nop
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084da:	b480      	push	{r7}
 80084dc:	b085      	sub	sp, #20
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d103      	bne.n	80084fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e00c      	b.n	8008514 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	3308      	adds	r3, #8
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	e002      	b.n	8008508 <vListInsert+0x2e>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	429a      	cmp	r2, r3
 8008512:	d2f6      	bcs.n	8008502 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	601a      	str	r2, [r3, #0]
}
 8008540:	bf00      	nop
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6892      	ldr	r2, [r2, #8]
 8008562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6852      	ldr	r2, [r2, #4]
 800856c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d103      	bne.n	8008580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	1e5a      	subs	r2, r3, #1
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085ca:	f002 f87b 	bl	800a6c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	441a      	add	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fa:	3b01      	subs	r3, #1
 80085fc:	68f9      	ldr	r1, [r7, #12]
 80085fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008600:	fb01 f303 	mul.w	r3, r1, r3
 8008604:	441a      	add	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	22ff      	movs	r2, #255	; 0xff
 800860e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d114      	bne.n	800864a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01a      	beq.n	800865e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3310      	adds	r3, #16
 800862c:	4618      	mov	r0, r3
 800862e:	f001 f929 	bl	8009884 <xTaskRemoveFromEventList>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d012      	beq.n	800865e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008638:	4b0c      	ldr	r3, [pc, #48]	; (800866c <xQueueGenericReset+0xcc>)
 800863a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	e009      	b.n	800865e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3310      	adds	r3, #16
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fef2 	bl	8008438 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff feed 	bl	8008438 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800865e:	f002 f861 	bl	800a724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008662:	2301      	movs	r3, #1
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	e000ed04 	.word	0xe000ed04

08008670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08e      	sub	sp, #56	; 0x38
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10a      	bne.n	80086b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <xQueueGenericCreateStatic+0x52>
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <xQueueGenericCreateStatic+0x56>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e000      	b.n	80086c8 <xQueueGenericCreateStatic+0x58>
 80086c6:	2300      	movs	r3, #0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	623b      	str	r3, [r7, #32]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <xQueueGenericCreateStatic+0x7e>
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <xQueueGenericCreateStatic+0x82>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <xQueueGenericCreateStatic+0x84>
 80086f2:	2300      	movs	r3, #0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	61fb      	str	r3, [r7, #28]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800870e:	2350      	movs	r3, #80	; 0x50
 8008710:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b50      	cmp	r3, #80	; 0x50
 8008716:	d00a      	beq.n	800872e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	61bb      	str	r3, [r7, #24]
}
 800872a:	bf00      	nop
 800872c:	e7fe      	b.n	800872c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800872e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00d      	beq.n	8008756 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008742:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	4613      	mov	r3, r2
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	68b9      	ldr	r1, [r7, #8]
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f000 f805 	bl	8008760 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008758:	4618      	mov	r0, r3
 800875a:	3730      	adds	r7, #48	; 0x30
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d103      	bne.n	800877c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	e002      	b.n	8008782 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800878e:	2101      	movs	r1, #1
 8008790:	69b8      	ldr	r0, [r7, #24]
 8008792:	f7ff ff05 	bl	80085a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08e      	sub	sp, #56	; 0x38
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087b6:	2300      	movs	r3, #0
 80087b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xQueueGenericSend+0x32>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <xQueueGenericSend+0x40>
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <xQueueGenericSend+0x44>
 80087e8:	2301      	movs	r3, #1
 80087ea:	e000      	b.n	80087ee <xQueueGenericSend+0x46>
 80087ec:	2300      	movs	r3, #0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10a      	bne.n	8008808 <xQueueGenericSend+0x60>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d103      	bne.n	8008816 <xQueueGenericSend+0x6e>
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <xQueueGenericSend+0x72>
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <xQueueGenericSend+0x74>
 800881a:	2300      	movs	r3, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <xQueueGenericSend+0x8e>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	623b      	str	r3, [r7, #32]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008836:	f001 f9e7 	bl	8009c08 <xTaskGetSchedulerState>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <xQueueGenericSend+0x9e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <xQueueGenericSend+0xa2>
 8008846:	2301      	movs	r3, #1
 8008848:	e000      	b.n	800884c <xQueueGenericSend+0xa4>
 800884a:	2300      	movs	r3, #0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <xQueueGenericSend+0xbe>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	61fb      	str	r3, [r7, #28]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008866:	f001 ff2d 	bl	800a6c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008872:	429a      	cmp	r2, r3
 8008874:	d302      	bcc.n	800887c <xQueueGenericSend+0xd4>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b02      	cmp	r3, #2
 800887a:	d129      	bne.n	80088d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008882:	f000 fa0b 	bl	8008c9c <prvCopyDataToQueue>
 8008886:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	d010      	beq.n	80088b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	3324      	adds	r3, #36	; 0x24
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fff5 	bl	8009884 <xTaskRemoveFromEventList>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d013      	beq.n	80088c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088a0:	4b3f      	ldr	r3, [pc, #252]	; (80089a0 <xQueueGenericSend+0x1f8>)
 80088a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a6:	601a      	str	r2, [r3, #0]
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	e00a      	b.n	80088c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088b8:	4b39      	ldr	r3, [pc, #228]	; (80089a0 <xQueueGenericSend+0x1f8>)
 80088ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088c8:	f001 ff2c 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e063      	b.n	8008998 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088d6:	f001 ff25 	bl	800a724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088da:	2300      	movs	r3, #0
 80088dc:	e05c      	b.n	8008998 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088e4:	f107 0314 	add.w	r3, r7, #20
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 f82f 	bl	800994c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088ee:	2301      	movs	r3, #1
 80088f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088f2:	f001 ff17 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088f6:	f000 fd9b 	bl	8009430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088fa:	f001 fee3 	bl	800a6c4 <vPortEnterCritical>
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008904:	b25b      	sxtb	r3, r3
 8008906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890a:	d103      	bne.n	8008914 <xQueueGenericSend+0x16c>
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800891a:	b25b      	sxtb	r3, r3
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d103      	bne.n	800892a <xQueueGenericSend+0x182>
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800892a:	f001 fefb 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800892e:	1d3a      	adds	r2, r7, #4
 8008930:	f107 0314 	add.w	r3, r7, #20
 8008934:	4611      	mov	r1, r2
 8008936:	4618      	mov	r0, r3
 8008938:	f001 f81e 	bl	8009978 <xTaskCheckForTimeOut>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d124      	bne.n	800898c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008944:	f000 faa2 	bl	8008e8c <prvIsQueueFull>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d018      	beq.n	8008980 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	3310      	adds	r3, #16
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f000 ff44 	bl	80097e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800895c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800895e:	f000 fa2d 	bl	8008dbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008962:	f000 fd73 	bl	800944c <xTaskResumeAll>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	f47f af7c 	bne.w	8008866 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800896e:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <xQueueGenericSend+0x1f8>)
 8008970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	e772      	b.n	8008866 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008982:	f000 fa1b 	bl	8008dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008986:	f000 fd61 	bl	800944c <xTaskResumeAll>
 800898a:	e76c      	b.n	8008866 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800898c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800898e:	f000 fa15 	bl	8008dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008992:	f000 fd5b 	bl	800944c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008996:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008998:	4618      	mov	r0, r3
 800899a:	3738      	adds	r7, #56	; 0x38
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b090      	sub	sp, #64	; 0x40
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d103      	bne.n	80089e0 <xQueueGenericSendFromISR+0x3c>
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <xQueueGenericSendFromISR+0x40>
 80089e0:	2301      	movs	r3, #1
 80089e2:	e000      	b.n	80089e6 <xQueueGenericSendFromISR+0x42>
 80089e4:	2300      	movs	r3, #0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d103      	bne.n	8008a0e <xQueueGenericSendFromISR+0x6a>
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d101      	bne.n	8008a12 <xQueueGenericSendFromISR+0x6e>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <xQueueGenericSendFromISR+0x70>
 8008a12:	2300      	movs	r3, #0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10a      	bne.n	8008a2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	623b      	str	r3, [r7, #32]
}
 8008a2a:	bf00      	nop
 8008a2c:	e7fe      	b.n	8008a2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a2e:	f001 ff2b 	bl	800a888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a32:	f3ef 8211 	mrs	r2, BASEPRI
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	61fa      	str	r2, [r7, #28]
 8008a48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d302      	bcc.n	8008a60 <xQueueGenericSendFromISR+0xbc>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d12f      	bne.n	8008ac0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	68b9      	ldr	r1, [r7, #8]
 8008a74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a76:	f000 f911 	bl	8008c9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a82:	d112      	bne.n	8008aaa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d016      	beq.n	8008aba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	3324      	adds	r3, #36	; 0x24
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fef7 	bl	8009884 <xTaskRemoveFromEventList>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00e      	beq.n	8008aba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00b      	beq.n	8008aba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	e007      	b.n	8008aba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008aae:	3301      	adds	r3, #1
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	b25a      	sxtb	r2, r3
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008aba:	2301      	movs	r3, #1
 8008abc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008abe:	e001      	b.n	8008ac4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ace:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3740      	adds	r7, #64	; 0x40
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08c      	sub	sp, #48	; 0x30
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <xQueueReceive+0x30>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	623b      	str	r3, [r7, #32]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d103      	bne.n	8008b1a <xQueueReceive+0x3e>
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <xQueueReceive+0x42>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e000      	b.n	8008b20 <xQueueReceive+0x44>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10a      	bne.n	8008b3a <xQueueReceive+0x5e>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	61fb      	str	r3, [r7, #28]
}
 8008b36:	bf00      	nop
 8008b38:	e7fe      	b.n	8008b38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b3a:	f001 f865 	bl	8009c08 <xTaskGetSchedulerState>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <xQueueReceive+0x6e>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <xQueueReceive+0x72>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <xQueueReceive+0x74>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <xQueueReceive+0x8e>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	61bb      	str	r3, [r7, #24]
}
 8008b66:	bf00      	nop
 8008b68:	e7fe      	b.n	8008b68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b6a:	f001 fdab 	bl	800a6c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d01f      	beq.n	8008bba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b7e:	f000 f8f7 	bl	8008d70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b84:	1e5a      	subs	r2, r3, #1
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00f      	beq.n	8008bb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	3310      	adds	r3, #16
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fe74 	bl	8009884 <xTaskRemoveFromEventList>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d007      	beq.n	8008bb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ba2:	4b3d      	ldr	r3, [pc, #244]	; (8008c98 <xQueueReceive+0x1bc>)
 8008ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bb2:	f001 fdb7 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e069      	b.n	8008c8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d103      	bne.n	8008bc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bc0:	f001 fdb0 	bl	800a724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e062      	b.n	8008c8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d106      	bne.n	8008bdc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bce:	f107 0310 	add.w	r3, r7, #16
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 feba 	bl	800994c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bdc:	f001 fda2 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008be0:	f000 fc26 	bl	8009430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008be4:	f001 fd6e 	bl	800a6c4 <vPortEnterCritical>
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bee:	b25b      	sxtb	r3, r3
 8008bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf4:	d103      	bne.n	8008bfe <xQueueReceive+0x122>
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c04:	b25b      	sxtb	r3, r3
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d103      	bne.n	8008c14 <xQueueReceive+0x138>
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c14:	f001 fd86 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c18:	1d3a      	adds	r2, r7, #4
 8008c1a:	f107 0310 	add.w	r3, r7, #16
 8008c1e:	4611      	mov	r1, r2
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 fea9 	bl	8009978 <xTaskCheckForTimeOut>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d123      	bne.n	8008c74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c2e:	f000 f917 	bl	8008e60 <prvIsQueueEmpty>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d017      	beq.n	8008c68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	3324      	adds	r3, #36	; 0x24
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f000 fdcf 	bl	80097e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c48:	f000 f8b8 	bl	8008dbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c4c:	f000 fbfe 	bl	800944c <xTaskResumeAll>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d189      	bne.n	8008b6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c56:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <xQueueReceive+0x1bc>)
 8008c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	e780      	b.n	8008b6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6a:	f000 f8a7 	bl	8008dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c6e:	f000 fbed 	bl	800944c <xTaskResumeAll>
 8008c72:	e77a      	b.n	8008b6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c76:	f000 f8a1 	bl	8008dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c7a:	f000 fbe7 	bl	800944c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c80:	f000 f8ee 	bl	8008e60 <prvIsQueueEmpty>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f43f af6f 	beq.w	8008b6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3730      	adds	r7, #48	; 0x30
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10d      	bne.n	8008cd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d14d      	bne.n	8008d5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 ffbc 	bl	8009c44 <xTaskPriorityDisinherit>
 8008ccc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	609a      	str	r2, [r3, #8]
 8008cd4:	e043      	b.n	8008d5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d119      	bne.n	8008d10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6858      	ldr	r0, [r3, #4]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	f002 fb4d 	bl	800b386 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	441a      	add	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d32b      	bcc.n	8008d5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	605a      	str	r2, [r3, #4]
 8008d0e:	e026      	b.n	8008d5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	68d8      	ldr	r0, [r3, #12]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d18:	461a      	mov	r2, r3
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	f002 fb33 	bl	800b386 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d28:	425b      	negs	r3, r3
 8008d2a:	441a      	add	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	68da      	ldr	r2, [r3, #12]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d207      	bcs.n	8008d4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d44:	425b      	negs	r3, r3
 8008d46:	441a      	add	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d105      	bne.n	8008d5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	1c5a      	adds	r2, r3, #1
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d66:	697b      	ldr	r3, [r7, #20]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d018      	beq.n	8008db4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	441a      	add	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d303      	bcc.n	8008da4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68d9      	ldr	r1, [r3, #12]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dac:	461a      	mov	r2, r3
 8008dae:	6838      	ldr	r0, [r7, #0]
 8008db0:	f002 fae9 	bl	800b386 <memcpy>
	}
}
 8008db4:	bf00      	nop
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008dc4:	f001 fc7e 	bl	800a6c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dd0:	e011      	b.n	8008df6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d012      	beq.n	8008e00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3324      	adds	r3, #36	; 0x24
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 fd50 	bl	8009884 <xTaskRemoveFromEventList>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008dea:	f000 fe27 	bl	8009a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	dce9      	bgt.n	8008dd2 <prvUnlockQueue+0x16>
 8008dfe:	e000      	b.n	8008e02 <prvUnlockQueue+0x46>
					break;
 8008e00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	22ff      	movs	r2, #255	; 0xff
 8008e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e0a:	f001 fc8b 	bl	800a724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e0e:	f001 fc59 	bl	800a6c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e1a:	e011      	b.n	8008e40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d012      	beq.n	8008e4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3310      	adds	r3, #16
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 fd2b 	bl	8009884 <xTaskRemoveFromEventList>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e34:	f000 fe02 	bl	8009a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dce9      	bgt.n	8008e1c <prvUnlockQueue+0x60>
 8008e48:	e000      	b.n	8008e4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	22ff      	movs	r2, #255	; 0xff
 8008e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e54:	f001 fc66 	bl	800a724 <vPortExitCritical>
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e68:	f001 fc2c 	bl	800a6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d102      	bne.n	8008e7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	e001      	b.n	8008e7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e7e:	f001 fc51 	bl	800a724 <vPortExitCritical>

	return xReturn;
 8008e82:	68fb      	ldr	r3, [r7, #12]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e94:	f001 fc16 	bl	800a6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d102      	bne.n	8008eaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	e001      	b.n	8008eae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008eae:	f001 fc39 	bl	800a724 <vPortExitCritical>

	return xReturn;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	e014      	b.n	8008ef6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ecc:	4a0f      	ldr	r2, [pc, #60]	; (8008f0c <vQueueAddToRegistry+0x50>)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10b      	bne.n	8008ef0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ed8:	490c      	ldr	r1, [pc, #48]	; (8008f0c <vQueueAddToRegistry+0x50>)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ee2:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <vQueueAddToRegistry+0x50>)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	4413      	add	r3, r2
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008eee:	e006      	b.n	8008efe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2b07      	cmp	r3, #7
 8008efa:	d9e7      	bls.n	8008ecc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008efc:	bf00      	nop
 8008efe:	bf00      	nop
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20000c4c 	.word	0x20000c4c

08008f10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f20:	f001 fbd0 	bl	800a6c4 <vPortEnterCritical>
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f2a:	b25b      	sxtb	r3, r3
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d103      	bne.n	8008f3a <vQueueWaitForMessageRestricted+0x2a>
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f40:	b25b      	sxtb	r3, r3
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f46:	d103      	bne.n	8008f50 <vQueueWaitForMessageRestricted+0x40>
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f50:	f001 fbe8 	bl	800a724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d106      	bne.n	8008f6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	3324      	adds	r3, #36	; 0x24
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fc61 	bl	800982c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f6a:	6978      	ldr	r0, [r7, #20]
 8008f6c:	f7ff ff26 	bl	8008dbc <prvUnlockQueue>
	}
 8008f70:	bf00      	nop
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08e      	sub	sp, #56	; 0x38
 8008f7c:	af04      	add	r7, sp, #16
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	623b      	str	r3, [r7, #32]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <xTaskCreateStatic+0x46>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	61fb      	str	r3, [r7, #28]
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fbe:	23bc      	movs	r3, #188	; 0xbc
 8008fc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2bbc      	cmp	r3, #188	; 0xbc
 8008fc6:	d00a      	beq.n	8008fde <xTaskCreateStatic+0x66>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	61bb      	str	r3, [r7, #24]
}
 8008fda:	bf00      	nop
 8008fdc:	e7fe      	b.n	8008fdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008fde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d01e      	beq.n	8009024 <xTaskCreateStatic+0xac>
 8008fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01b      	beq.n	8009024 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ff4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ffe:	2300      	movs	r3, #0
 8009000:	9303      	str	r3, [sp, #12]
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	9302      	str	r3, [sp, #8]
 8009006:	f107 0314 	add.w	r3, r7, #20
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 f850 	bl	80090bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800901c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800901e:	f000 f8f3 	bl	8009208 <prvAddNewTaskToReadyList>
 8009022:	e001      	b.n	8009028 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009024:	2300      	movs	r3, #0
 8009026:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009028:	697b      	ldr	r3, [r7, #20]
	}
 800902a:	4618      	mov	r0, r3
 800902c:	3728      	adds	r7, #40	; 0x28
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009032:	b580      	push	{r7, lr}
 8009034:	b08c      	sub	sp, #48	; 0x30
 8009036:	af04      	add	r7, sp, #16
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	603b      	str	r3, [r7, #0]
 800903e:	4613      	mov	r3, r2
 8009040:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009042:	88fb      	ldrh	r3, [r7, #6]
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4618      	mov	r0, r3
 8009048:	f001 fc5e 	bl	800a908 <pvPortMalloc>
 800904c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00e      	beq.n	8009072 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009054:	20bc      	movs	r0, #188	; 0xbc
 8009056:	f001 fc57 	bl	800a908 <pvPortMalloc>
 800905a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	631a      	str	r2, [r3, #48]	; 0x30
 8009068:	e005      	b.n	8009076 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800906a:	6978      	ldr	r0, [r7, #20]
 800906c:	f001 fd18 	bl	800aaa0 <vPortFree>
 8009070:	e001      	b.n	8009076 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009072:	2300      	movs	r3, #0
 8009074:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d017      	beq.n	80090ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009084:	88fa      	ldrh	r2, [r7, #6]
 8009086:	2300      	movs	r3, #0
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	9302      	str	r3, [sp, #8]
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 f80e 	bl	80090bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090a0:	69f8      	ldr	r0, [r7, #28]
 80090a2:	f000 f8b1 	bl	8009208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090a6:	2301      	movs	r3, #1
 80090a8:	61bb      	str	r3, [r7, #24]
 80090aa:	e002      	b.n	80090b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090ac:	f04f 33ff 	mov.w	r3, #4294967295
 80090b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090b2:	69bb      	ldr	r3, [r7, #24]
	}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3720      	adds	r7, #32
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	461a      	mov	r2, r3
 80090d4:	21a5      	movs	r1, #165	; 0xa5
 80090d6:	f002 f964 	bl	800b3a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090e4:	3b01      	subs	r3, #1
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	f023 0307 	bic.w	r3, r3, #7
 80090f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	f003 0307 	and.w	r3, r3, #7
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00a      	beq.n	8009114 <prvInitialiseNewTask+0x58>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	617b      	str	r3, [r7, #20]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d01f      	beq.n	800915a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800911a:	2300      	movs	r3, #0
 800911c:	61fb      	str	r3, [r7, #28]
 800911e:	e012      	b.n	8009146 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	4413      	add	r3, r2
 8009126:	7819      	ldrb	r1, [r3, #0]
 8009128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	4413      	add	r3, r2
 800912e:	3334      	adds	r3, #52	; 0x34
 8009130:	460a      	mov	r2, r1
 8009132:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	4413      	add	r3, r2
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d006      	beq.n	800914e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	3301      	adds	r3, #1
 8009144:	61fb      	str	r3, [r7, #28]
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	2b0f      	cmp	r3, #15
 800914a:	d9e9      	bls.n	8009120 <prvInitialiseNewTask+0x64>
 800914c:	e000      	b.n	8009150 <prvInitialiseNewTask+0x94>
			{
				break;
 800914e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009158:	e003      	b.n	8009162 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	2b37      	cmp	r3, #55	; 0x37
 8009166:	d901      	bls.n	800916c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009168:	2337      	movs	r3, #55	; 0x37
 800916a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009176:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917a:	2200      	movs	r2, #0
 800917c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	3304      	adds	r3, #4
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff f978 	bl	8008478 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	3318      	adds	r3, #24
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff f973 	bl	8008478 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	3354      	adds	r3, #84	; 0x54
 80091bc:	2260      	movs	r2, #96	; 0x60
 80091be:	2100      	movs	r1, #0
 80091c0:	4618      	mov	r0, r3
 80091c2:	f002 f8ee 	bl	800b3a2 <memset>
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	4a0c      	ldr	r2, [pc, #48]	; (80091fc <prvInitialiseNewTask+0x140>)
 80091ca:	659a      	str	r2, [r3, #88]	; 0x58
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	4a0c      	ldr	r2, [pc, #48]	; (8009200 <prvInitialiseNewTask+0x144>)
 80091d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	4a0b      	ldr	r2, [pc, #44]	; (8009204 <prvInitialiseNewTask+0x148>)
 80091d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	68f9      	ldr	r1, [r7, #12]
 80091dc:	69b8      	ldr	r0, [r7, #24]
 80091de:	f001 f941 	bl	800a464 <pxPortInitialiseStack>
 80091e2:	4602      	mov	r2, r0
 80091e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091f4:	bf00      	nop
 80091f6:	3720      	adds	r7, #32
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	0800ecfc 	.word	0x0800ecfc
 8009200:	0800ed1c 	.word	0x0800ed1c
 8009204:	0800ecdc 	.word	0x0800ecdc

08009208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009210:	f001 fa58 	bl	800a6c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009214:	4b2d      	ldr	r3, [pc, #180]	; (80092cc <prvAddNewTaskToReadyList+0xc4>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3301      	adds	r3, #1
 800921a:	4a2c      	ldr	r2, [pc, #176]	; (80092cc <prvAddNewTaskToReadyList+0xc4>)
 800921c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800921e:	4b2c      	ldr	r3, [pc, #176]	; (80092d0 <prvAddNewTaskToReadyList+0xc8>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009226:	4a2a      	ldr	r2, [pc, #168]	; (80092d0 <prvAddNewTaskToReadyList+0xc8>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800922c:	4b27      	ldr	r3, [pc, #156]	; (80092cc <prvAddNewTaskToReadyList+0xc4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d110      	bne.n	8009256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009234:	f000 fc26 	bl	8009a84 <prvInitialiseTaskLists>
 8009238:	e00d      	b.n	8009256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800923a:	4b26      	ldr	r3, [pc, #152]	; (80092d4 <prvAddNewTaskToReadyList+0xcc>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d109      	bne.n	8009256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009242:	4b23      	ldr	r3, [pc, #140]	; (80092d0 <prvAddNewTaskToReadyList+0xc8>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	429a      	cmp	r2, r3
 800924e:	d802      	bhi.n	8009256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009250:	4a1f      	ldr	r2, [pc, #124]	; (80092d0 <prvAddNewTaskToReadyList+0xc8>)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009256:	4b20      	ldr	r3, [pc, #128]	; (80092d8 <prvAddNewTaskToReadyList+0xd0>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3301      	adds	r3, #1
 800925c:	4a1e      	ldr	r2, [pc, #120]	; (80092d8 <prvAddNewTaskToReadyList+0xd0>)
 800925e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009260:	4b1d      	ldr	r3, [pc, #116]	; (80092d8 <prvAddNewTaskToReadyList+0xd0>)
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926c:	4b1b      	ldr	r3, [pc, #108]	; (80092dc <prvAddNewTaskToReadyList+0xd4>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d903      	bls.n	800927c <prvAddNewTaskToReadyList+0x74>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	4a18      	ldr	r2, [pc, #96]	; (80092dc <prvAddNewTaskToReadyList+0xd4>)
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4a15      	ldr	r2, [pc, #84]	; (80092e0 <prvAddNewTaskToReadyList+0xd8>)
 800928a:	441a      	add	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	3304      	adds	r3, #4
 8009290:	4619      	mov	r1, r3
 8009292:	4610      	mov	r0, r2
 8009294:	f7ff f8fd 	bl	8008492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009298:	f001 fa44 	bl	800a724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800929c:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <prvAddNewTaskToReadyList+0xcc>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00e      	beq.n	80092c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092a4:	4b0a      	ldr	r3, [pc, #40]	; (80092d0 <prvAddNewTaskToReadyList+0xc8>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d207      	bcs.n	80092c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092b2:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <prvAddNewTaskToReadyList+0xdc>)
 80092b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20001160 	.word	0x20001160
 80092d0:	20000c8c 	.word	0x20000c8c
 80092d4:	2000116c 	.word	0x2000116c
 80092d8:	2000117c 	.word	0x2000117c
 80092dc:	20001168 	.word	0x20001168
 80092e0:	20000c90 	.word	0x20000c90
 80092e4:	e000ed04 	.word	0xe000ed04

080092e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d017      	beq.n	800932a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092fa:	4b13      	ldr	r3, [pc, #76]	; (8009348 <vTaskDelay+0x60>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <vTaskDelay+0x30>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	60bb      	str	r3, [r7, #8]
}
 8009314:	bf00      	nop
 8009316:	e7fe      	b.n	8009316 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009318:	f000 f88a 	bl	8009430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800931c:	2100      	movs	r1, #0
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fcfe 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009324:	f000 f892 	bl	800944c <xTaskResumeAll>
 8009328:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d107      	bne.n	8009340 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009330:	4b06      	ldr	r3, [pc, #24]	; (800934c <vTaskDelay+0x64>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009340:	bf00      	nop
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20001188 	.word	0x20001188
 800934c:	e000ed04 	.word	0xe000ed04

08009350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08a      	sub	sp, #40	; 0x28
 8009354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009356:	2300      	movs	r3, #0
 8009358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800935a:	2300      	movs	r3, #0
 800935c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800935e:	463a      	mov	r2, r7
 8009360:	1d39      	adds	r1, r7, #4
 8009362:	f107 0308 	add.w	r3, r7, #8
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff f832 	bl	80083d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	9202      	str	r2, [sp, #8]
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	2300      	movs	r3, #0
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	2300      	movs	r3, #0
 800937c:	460a      	mov	r2, r1
 800937e:	4924      	ldr	r1, [pc, #144]	; (8009410 <vTaskStartScheduler+0xc0>)
 8009380:	4824      	ldr	r0, [pc, #144]	; (8009414 <vTaskStartScheduler+0xc4>)
 8009382:	f7ff fdf9 	bl	8008f78 <xTaskCreateStatic>
 8009386:	4603      	mov	r3, r0
 8009388:	4a23      	ldr	r2, [pc, #140]	; (8009418 <vTaskStartScheduler+0xc8>)
 800938a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800938c:	4b22      	ldr	r3, [pc, #136]	; (8009418 <vTaskStartScheduler+0xc8>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009394:	2301      	movs	r3, #1
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	e001      	b.n	800939e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800939a:	2300      	movs	r3, #0
 800939c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d102      	bne.n	80093aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093a4:	f000 fd10 	bl	8009dc8 <xTimerCreateTimerTask>
 80093a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d11b      	bne.n	80093e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	613b      	str	r3, [r7, #16]
}
 80093c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093c4:	4b15      	ldr	r3, [pc, #84]	; (800941c <vTaskStartScheduler+0xcc>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3354      	adds	r3, #84	; 0x54
 80093ca:	4a15      	ldr	r2, [pc, #84]	; (8009420 <vTaskStartScheduler+0xd0>)
 80093cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093ce:	4b15      	ldr	r3, [pc, #84]	; (8009424 <vTaskStartScheduler+0xd4>)
 80093d0:	f04f 32ff 	mov.w	r2, #4294967295
 80093d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093d6:	4b14      	ldr	r3, [pc, #80]	; (8009428 <vTaskStartScheduler+0xd8>)
 80093d8:	2201      	movs	r2, #1
 80093da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093dc:	4b13      	ldr	r3, [pc, #76]	; (800942c <vTaskStartScheduler+0xdc>)
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093e2:	f001 f8cd 	bl	800a580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093e6:	e00e      	b.n	8009406 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ee:	d10a      	bne.n	8009406 <vTaskStartScheduler+0xb6>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	60fb      	str	r3, [r7, #12]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <vTaskStartScheduler+0xb4>
}
 8009406:	bf00      	nop
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	0800e128 	.word	0x0800e128
 8009414:	08009a55 	.word	0x08009a55
 8009418:	20001184 	.word	0x20001184
 800941c:	20000c8c 	.word	0x20000c8c
 8009420:	20000014 	.word	0x20000014
 8009424:	20001180 	.word	0x20001180
 8009428:	2000116c 	.word	0x2000116c
 800942c:	20001164 	.word	0x20001164

08009430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009434:	4b04      	ldr	r3, [pc, #16]	; (8009448 <vTaskSuspendAll+0x18>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3301      	adds	r3, #1
 800943a:	4a03      	ldr	r2, [pc, #12]	; (8009448 <vTaskSuspendAll+0x18>)
 800943c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800943e:	bf00      	nop
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	20001188 	.word	0x20001188

0800944c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009456:	2300      	movs	r3, #0
 8009458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800945a:	4b42      	ldr	r3, [pc, #264]	; (8009564 <xTaskResumeAll+0x118>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10a      	bne.n	8009478 <xTaskResumeAll+0x2c>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	603b      	str	r3, [r7, #0]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009478:	f001 f924 	bl	800a6c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800947c:	4b39      	ldr	r3, [pc, #228]	; (8009564 <xTaskResumeAll+0x118>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3b01      	subs	r3, #1
 8009482:	4a38      	ldr	r2, [pc, #224]	; (8009564 <xTaskResumeAll+0x118>)
 8009484:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009486:	4b37      	ldr	r3, [pc, #220]	; (8009564 <xTaskResumeAll+0x118>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d162      	bne.n	8009554 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800948e:	4b36      	ldr	r3, [pc, #216]	; (8009568 <xTaskResumeAll+0x11c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d05e      	beq.n	8009554 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009496:	e02f      	b.n	80094f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009498:	4b34      	ldr	r3, [pc, #208]	; (800956c <xTaskResumeAll+0x120>)
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3318      	adds	r3, #24
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7ff f851 	bl	800854c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3304      	adds	r3, #4
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff f84c 	bl	800854c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b8:	4b2d      	ldr	r3, [pc, #180]	; (8009570 <xTaskResumeAll+0x124>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d903      	bls.n	80094c8 <xTaskResumeAll+0x7c>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	4a2a      	ldr	r2, [pc, #168]	; (8009570 <xTaskResumeAll+0x124>)
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4a27      	ldr	r2, [pc, #156]	; (8009574 <xTaskResumeAll+0x128>)
 80094d6:	441a      	add	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3304      	adds	r3, #4
 80094dc:	4619      	mov	r1, r3
 80094de:	4610      	mov	r0, r2
 80094e0:	f7fe ffd7 	bl	8008492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e8:	4b23      	ldr	r3, [pc, #140]	; (8009578 <xTaskResumeAll+0x12c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d302      	bcc.n	80094f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80094f2:	4b22      	ldr	r3, [pc, #136]	; (800957c <xTaskResumeAll+0x130>)
 80094f4:	2201      	movs	r2, #1
 80094f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094f8:	4b1c      	ldr	r3, [pc, #112]	; (800956c <xTaskResumeAll+0x120>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1cb      	bne.n	8009498 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009506:	f000 fb5f 	bl	8009bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800950a:	4b1d      	ldr	r3, [pc, #116]	; (8009580 <xTaskResumeAll+0x134>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d010      	beq.n	8009538 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009516:	f000 f847 	bl	80095a8 <xTaskIncrementTick>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009520:	4b16      	ldr	r3, [pc, #88]	; (800957c <xTaskResumeAll+0x130>)
 8009522:	2201      	movs	r2, #1
 8009524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3b01      	subs	r3, #1
 800952a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f1      	bne.n	8009516 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009532:	4b13      	ldr	r3, [pc, #76]	; (8009580 <xTaskResumeAll+0x134>)
 8009534:	2200      	movs	r2, #0
 8009536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009538:	4b10      	ldr	r3, [pc, #64]	; (800957c <xTaskResumeAll+0x130>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d009      	beq.n	8009554 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009540:	2301      	movs	r3, #1
 8009542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009544:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <xTaskResumeAll+0x138>)
 8009546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009554:	f001 f8e6 	bl	800a724 <vPortExitCritical>

	return xAlreadyYielded;
 8009558:	68bb      	ldr	r3, [r7, #8]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20001188 	.word	0x20001188
 8009568:	20001160 	.word	0x20001160
 800956c:	20001120 	.word	0x20001120
 8009570:	20001168 	.word	0x20001168
 8009574:	20000c90 	.word	0x20000c90
 8009578:	20000c8c 	.word	0x20000c8c
 800957c:	20001174 	.word	0x20001174
 8009580:	20001170 	.word	0x20001170
 8009584:	e000ed04 	.word	0xe000ed04

08009588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800958e:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <xTaskGetTickCount+0x1c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009594:	687b      	ldr	r3, [r7, #4]
}
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20001164 	.word	0x20001164

080095a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b2:	4b4f      	ldr	r3, [pc, #316]	; (80096f0 <xTaskIncrementTick+0x148>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f040 808f 	bne.w	80096da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095bc:	4b4d      	ldr	r3, [pc, #308]	; (80096f4 <xTaskIncrementTick+0x14c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095c4:	4a4b      	ldr	r2, [pc, #300]	; (80096f4 <xTaskIncrementTick+0x14c>)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d120      	bne.n	8009612 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80095d0:	4b49      	ldr	r3, [pc, #292]	; (80096f8 <xTaskIncrementTick+0x150>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00a      	beq.n	80095f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	603b      	str	r3, [r7, #0]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <xTaskIncrementTick+0x46>
 80095f0:	4b41      	ldr	r3, [pc, #260]	; (80096f8 <xTaskIncrementTick+0x150>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	4b41      	ldr	r3, [pc, #260]	; (80096fc <xTaskIncrementTick+0x154>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a3f      	ldr	r2, [pc, #252]	; (80096f8 <xTaskIncrementTick+0x150>)
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	4a3f      	ldr	r2, [pc, #252]	; (80096fc <xTaskIncrementTick+0x154>)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	4b3e      	ldr	r3, [pc, #248]	; (8009700 <xTaskIncrementTick+0x158>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3301      	adds	r3, #1
 800960a:	4a3d      	ldr	r2, [pc, #244]	; (8009700 <xTaskIncrementTick+0x158>)
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	f000 fadb 	bl	8009bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009612:	4b3c      	ldr	r3, [pc, #240]	; (8009704 <xTaskIncrementTick+0x15c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	429a      	cmp	r2, r3
 800961a:	d349      	bcc.n	80096b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800961c:	4b36      	ldr	r3, [pc, #216]	; (80096f8 <xTaskIncrementTick+0x150>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009626:	4b37      	ldr	r3, [pc, #220]	; (8009704 <xTaskIncrementTick+0x15c>)
 8009628:	f04f 32ff 	mov.w	r2, #4294967295
 800962c:	601a      	str	r2, [r3, #0]
					break;
 800962e:	e03f      	b.n	80096b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009630:	4b31      	ldr	r3, [pc, #196]	; (80096f8 <xTaskIncrementTick+0x150>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	429a      	cmp	r2, r3
 8009646:	d203      	bcs.n	8009650 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009648:	4a2e      	ldr	r2, [pc, #184]	; (8009704 <xTaskIncrementTick+0x15c>)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800964e:	e02f      	b.n	80096b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	3304      	adds	r3, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe ff79 	bl	800854c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	d004      	beq.n	800966c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	3318      	adds	r3, #24
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe ff70 	bl	800854c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	4b25      	ldr	r3, [pc, #148]	; (8009708 <xTaskIncrementTick+0x160>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	d903      	bls.n	8009680 <xTaskIncrementTick+0xd8>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967c:	4a22      	ldr	r2, [pc, #136]	; (8009708 <xTaskIncrementTick+0x160>)
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4a1f      	ldr	r2, [pc, #124]	; (800970c <xTaskIncrementTick+0x164>)
 800968e:	441a      	add	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	3304      	adds	r3, #4
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7fe fefb 	bl	8008492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a0:	4b1b      	ldr	r3, [pc, #108]	; (8009710 <xTaskIncrementTick+0x168>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d3b8      	bcc.n	800961c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80096aa:	2301      	movs	r3, #1
 80096ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096ae:	e7b5      	b.n	800961c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096b0:	4b17      	ldr	r3, [pc, #92]	; (8009710 <xTaskIncrementTick+0x168>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b6:	4915      	ldr	r1, [pc, #84]	; (800970c <xTaskIncrementTick+0x164>)
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d901      	bls.n	80096cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80096c8:	2301      	movs	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096cc:	4b11      	ldr	r3, [pc, #68]	; (8009714 <xTaskIncrementTick+0x16c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	e004      	b.n	80096e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096da:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <xTaskIncrementTick+0x170>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3301      	adds	r3, #1
 80096e0:	4a0d      	ldr	r2, [pc, #52]	; (8009718 <xTaskIncrementTick+0x170>)
 80096e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096e4:	697b      	ldr	r3, [r7, #20]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20001188 	.word	0x20001188
 80096f4:	20001164 	.word	0x20001164
 80096f8:	20001118 	.word	0x20001118
 80096fc:	2000111c 	.word	0x2000111c
 8009700:	20001178 	.word	0x20001178
 8009704:	20001180 	.word	0x20001180
 8009708:	20001168 	.word	0x20001168
 800970c:	20000c90 	.word	0x20000c90
 8009710:	20000c8c 	.word	0x20000c8c
 8009714:	20001174 	.word	0x20001174
 8009718:	20001170 	.word	0x20001170

0800971c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009722:	4b2a      	ldr	r3, [pc, #168]	; (80097cc <vTaskSwitchContext+0xb0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800972a:	4b29      	ldr	r3, [pc, #164]	; (80097d0 <vTaskSwitchContext+0xb4>)
 800972c:	2201      	movs	r2, #1
 800972e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009730:	e046      	b.n	80097c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009732:	4b27      	ldr	r3, [pc, #156]	; (80097d0 <vTaskSwitchContext+0xb4>)
 8009734:	2200      	movs	r2, #0
 8009736:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009738:	4b26      	ldr	r3, [pc, #152]	; (80097d4 <vTaskSwitchContext+0xb8>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	e010      	b.n	8009762 <vTaskSwitchContext+0x46>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10a      	bne.n	800975c <vTaskSwitchContext+0x40>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	607b      	str	r3, [r7, #4]
}
 8009758:	bf00      	nop
 800975a:	e7fe      	b.n	800975a <vTaskSwitchContext+0x3e>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3b01      	subs	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	491d      	ldr	r1, [pc, #116]	; (80097d8 <vTaskSwitchContext+0xbc>)
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4613      	mov	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	440b      	add	r3, r1
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d0e4      	beq.n	8009740 <vTaskSwitchContext+0x24>
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <vTaskSwitchContext+0xbc>)
 8009782:	4413      	add	r3, r2
 8009784:	60bb      	str	r3, [r7, #8]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	605a      	str	r2, [r3, #4]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	685a      	ldr	r2, [r3, #4]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	3308      	adds	r3, #8
 8009798:	429a      	cmp	r2, r3
 800979a:	d104      	bne.n	80097a6 <vTaskSwitchContext+0x8a>
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	605a      	str	r2, [r3, #4]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	4a0b      	ldr	r2, [pc, #44]	; (80097dc <vTaskSwitchContext+0xc0>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	4a08      	ldr	r2, [pc, #32]	; (80097d4 <vTaskSwitchContext+0xb8>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097b6:	4b09      	ldr	r3, [pc, #36]	; (80097dc <vTaskSwitchContext+0xc0>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3354      	adds	r3, #84	; 0x54
 80097bc:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <vTaskSwitchContext+0xc4>)
 80097be:	6013      	str	r3, [r2, #0]
}
 80097c0:	bf00      	nop
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	20001188 	.word	0x20001188
 80097d0:	20001174 	.word	0x20001174
 80097d4:	20001168 	.word	0x20001168
 80097d8:	20000c90 	.word	0x20000c90
 80097dc:	20000c8c 	.word	0x20000c8c
 80097e0:	20000014 	.word	0x20000014

080097e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10a      	bne.n	800980a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	60fb      	str	r3, [r7, #12]
}
 8009806:	bf00      	nop
 8009808:	e7fe      	b.n	8009808 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800980a:	4b07      	ldr	r3, [pc, #28]	; (8009828 <vTaskPlaceOnEventList+0x44>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3318      	adds	r3, #24
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fe fe61 	bl	80084da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009818:	2101      	movs	r1, #1
 800981a:	6838      	ldr	r0, [r7, #0]
 800981c:	f000 fa80 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
}
 8009820:	bf00      	nop
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000c8c 	.word	0x20000c8c

0800982c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10a      	bne.n	8009854 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	617b      	str	r3, [r7, #20]
}
 8009850:	bf00      	nop
 8009852:	e7fe      	b.n	8009852 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009854:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <vTaskPlaceOnEventListRestricted+0x54>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	3318      	adds	r3, #24
 800985a:	4619      	mov	r1, r3
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f7fe fe18 	bl	8008492 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009868:	f04f 33ff 	mov.w	r3, #4294967295
 800986c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	68b8      	ldr	r0, [r7, #8]
 8009872:	f000 fa55 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
	}
 8009876:	bf00      	nop
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000c8c 	.word	0x20000c8c

08009884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10a      	bne.n	80098b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	60fb      	str	r3, [r7, #12]
}
 80098ac:	bf00      	nop
 80098ae:	e7fe      	b.n	80098ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	3318      	adds	r3, #24
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe fe49 	bl	800854c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ba:	4b1e      	ldr	r3, [pc, #120]	; (8009934 <xTaskRemoveFromEventList+0xb0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d11d      	bne.n	80098fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	3304      	adds	r3, #4
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe fe40 	bl	800854c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d0:	4b19      	ldr	r3, [pc, #100]	; (8009938 <xTaskRemoveFromEventList+0xb4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d903      	bls.n	80098e0 <xTaskRemoveFromEventList+0x5c>
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	4a16      	ldr	r2, [pc, #88]	; (8009938 <xTaskRemoveFromEventList+0xb4>)
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4a13      	ldr	r2, [pc, #76]	; (800993c <xTaskRemoveFromEventList+0xb8>)
 80098ee:	441a      	add	r2, r3
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f7fe fdcb 	bl	8008492 <vListInsertEnd>
 80098fc:	e005      	b.n	800990a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	3318      	adds	r3, #24
 8009902:	4619      	mov	r1, r3
 8009904:	480e      	ldr	r0, [pc, #56]	; (8009940 <xTaskRemoveFromEventList+0xbc>)
 8009906:	f7fe fdc4 	bl	8008492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990e:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <xTaskRemoveFromEventList+0xc0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	429a      	cmp	r2, r3
 8009916:	d905      	bls.n	8009924 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800991c:	4b0a      	ldr	r3, [pc, #40]	; (8009948 <xTaskRemoveFromEventList+0xc4>)
 800991e:	2201      	movs	r2, #1
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	e001      	b.n	8009928 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009924:	2300      	movs	r3, #0
 8009926:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009928:	697b      	ldr	r3, [r7, #20]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20001188 	.word	0x20001188
 8009938:	20001168 	.word	0x20001168
 800993c:	20000c90 	.word	0x20000c90
 8009940:	20001120 	.word	0x20001120
 8009944:	20000c8c 	.word	0x20000c8c
 8009948:	20001174 	.word	0x20001174

0800994c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009954:	4b06      	ldr	r3, [pc, #24]	; (8009970 <vTaskInternalSetTimeOutState+0x24>)
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800995c:	4b05      	ldr	r3, [pc, #20]	; (8009974 <vTaskInternalSetTimeOutState+0x28>)
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	605a      	str	r2, [r3, #4]
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	20001178 	.word	0x20001178
 8009974:	20001164 	.word	0x20001164

08009978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10a      	bne.n	800999e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	613b      	str	r3, [r7, #16]
}
 800999a:	bf00      	nop
 800999c:	e7fe      	b.n	800999c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	60fb      	str	r3, [r7, #12]
}
 80099b6:	bf00      	nop
 80099b8:	e7fe      	b.n	80099b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099ba:	f000 fe83 	bl	800a6c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099be:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <xTaskCheckForTimeOut+0xbc>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d6:	d102      	bne.n	80099de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099d8:	2300      	movs	r3, #0
 80099da:	61fb      	str	r3, [r7, #28]
 80099dc:	e023      	b.n	8009a26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	4b15      	ldr	r3, [pc, #84]	; (8009a38 <xTaskCheckForTimeOut+0xc0>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d007      	beq.n	80099fa <xTaskCheckForTimeOut+0x82>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d302      	bcc.n	80099fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099f4:	2301      	movs	r3, #1
 80099f6:	61fb      	str	r3, [r7, #28]
 80099f8:	e015      	b.n	8009a26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d20b      	bcs.n	8009a1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	1ad2      	subs	r2, r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7ff ff9b 	bl	800994c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a16:	2300      	movs	r3, #0
 8009a18:	61fb      	str	r3, [r7, #28]
 8009a1a:	e004      	b.n	8009a26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a22:	2301      	movs	r3, #1
 8009a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a26:	f000 fe7d 	bl	800a724 <vPortExitCritical>

	return xReturn;
 8009a2a:	69fb      	ldr	r3, [r7, #28]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3720      	adds	r7, #32
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20001164 	.word	0x20001164
 8009a38:	20001178 	.word	0x20001178

08009a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a40:	4b03      	ldr	r3, [pc, #12]	; (8009a50 <vTaskMissedYield+0x14>)
 8009a42:	2201      	movs	r2, #1
 8009a44:	601a      	str	r2, [r3, #0]
}
 8009a46:	bf00      	nop
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	20001174 	.word	0x20001174

08009a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a5c:	f000 f852 	bl	8009b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a60:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <prvIdleTask+0x28>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d9f9      	bls.n	8009a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <prvIdleTask+0x2c>)
 8009a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a78:	e7f0      	b.n	8009a5c <prvIdleTask+0x8>
 8009a7a:	bf00      	nop
 8009a7c:	20000c90 	.word	0x20000c90
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	607b      	str	r3, [r7, #4]
 8009a8e:	e00c      	b.n	8009aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4a12      	ldr	r2, [pc, #72]	; (8009ae4 <prvInitialiseTaskLists+0x60>)
 8009a9c:	4413      	add	r3, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fe fcca 	bl	8008438 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	607b      	str	r3, [r7, #4]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b37      	cmp	r3, #55	; 0x37
 8009aae:	d9ef      	bls.n	8009a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ab0:	480d      	ldr	r0, [pc, #52]	; (8009ae8 <prvInitialiseTaskLists+0x64>)
 8009ab2:	f7fe fcc1 	bl	8008438 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ab6:	480d      	ldr	r0, [pc, #52]	; (8009aec <prvInitialiseTaskLists+0x68>)
 8009ab8:	f7fe fcbe 	bl	8008438 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009abc:	480c      	ldr	r0, [pc, #48]	; (8009af0 <prvInitialiseTaskLists+0x6c>)
 8009abe:	f7fe fcbb 	bl	8008438 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ac2:	480c      	ldr	r0, [pc, #48]	; (8009af4 <prvInitialiseTaskLists+0x70>)
 8009ac4:	f7fe fcb8 	bl	8008438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ac8:	480b      	ldr	r0, [pc, #44]	; (8009af8 <prvInitialiseTaskLists+0x74>)
 8009aca:	f7fe fcb5 	bl	8008438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ace:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <prvInitialiseTaskLists+0x78>)
 8009ad0:	4a05      	ldr	r2, [pc, #20]	; (8009ae8 <prvInitialiseTaskLists+0x64>)
 8009ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ad4:	4b0a      	ldr	r3, [pc, #40]	; (8009b00 <prvInitialiseTaskLists+0x7c>)
 8009ad6:	4a05      	ldr	r2, [pc, #20]	; (8009aec <prvInitialiseTaskLists+0x68>)
 8009ad8:	601a      	str	r2, [r3, #0]
}
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000c90 	.word	0x20000c90
 8009ae8:	200010f0 	.word	0x200010f0
 8009aec:	20001104 	.word	0x20001104
 8009af0:	20001120 	.word	0x20001120
 8009af4:	20001134 	.word	0x20001134
 8009af8:	2000114c 	.word	0x2000114c
 8009afc:	20001118 	.word	0x20001118
 8009b00:	2000111c 	.word	0x2000111c

08009b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b0a:	e019      	b.n	8009b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b0c:	f000 fdda 	bl	800a6c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b10:	4b10      	ldr	r3, [pc, #64]	; (8009b54 <prvCheckTasksWaitingTermination+0x50>)
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fd15 	bl	800854c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b22:	4b0d      	ldr	r3, [pc, #52]	; (8009b58 <prvCheckTasksWaitingTermination+0x54>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	4a0b      	ldr	r2, [pc, #44]	; (8009b58 <prvCheckTasksWaitingTermination+0x54>)
 8009b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b2c:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <prvCheckTasksWaitingTermination+0x58>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <prvCheckTasksWaitingTermination+0x58>)
 8009b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b36:	f000 fdf5 	bl	800a724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f810 	bl	8009b60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b40:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <prvCheckTasksWaitingTermination+0x58>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e1      	bne.n	8009b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b48:	bf00      	nop
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20001134 	.word	0x20001134
 8009b58:	20001160 	.word	0x20001160
 8009b5c:	20001148 	.word	0x20001148

08009b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3354      	adds	r3, #84	; 0x54
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f002 f92d 	bl	800bdcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d108      	bne.n	8009b8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b80:	4618      	mov	r0, r3
 8009b82:	f000 ff8d 	bl	800aaa0 <vPortFree>
				vPortFree( pxTCB );
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 ff8a 	bl	800aaa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b8c:	e018      	b.n	8009bc0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d103      	bne.n	8009ba0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 ff81 	bl	800aaa0 <vPortFree>
	}
 8009b9e:	e00f      	b.n	8009bc0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d00a      	beq.n	8009bc0 <prvDeleteTCB+0x60>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	60fb      	str	r3, [r7, #12]
}
 8009bbc:	bf00      	nop
 8009bbe:	e7fe      	b.n	8009bbe <prvDeleteTCB+0x5e>
	}
 8009bc0:	bf00      	nop
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bce:	4b0c      	ldr	r3, [pc, #48]	; (8009c00 <prvResetNextTaskUnblockTime+0x38>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <prvResetNextTaskUnblockTime+0x3c>)
 8009bda:	f04f 32ff 	mov.w	r2, #4294967295
 8009bde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009be0:	e008      	b.n	8009bf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be2:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <prvResetNextTaskUnblockTime+0x38>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	4a04      	ldr	r2, [pc, #16]	; (8009c04 <prvResetNextTaskUnblockTime+0x3c>)
 8009bf2:	6013      	str	r3, [r2, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	20001118 	.word	0x20001118
 8009c04:	20001180 	.word	0x20001180

08009c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c0e:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <xTaskGetSchedulerState+0x34>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c16:	2301      	movs	r3, #1
 8009c18:	607b      	str	r3, [r7, #4]
 8009c1a:	e008      	b.n	8009c2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c1c:	4b08      	ldr	r3, [pc, #32]	; (8009c40 <xTaskGetSchedulerState+0x38>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d102      	bne.n	8009c2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c24:	2302      	movs	r3, #2
 8009c26:	607b      	str	r3, [r7, #4]
 8009c28:	e001      	b.n	8009c2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c2e:	687b      	ldr	r3, [r7, #4]
	}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	2000116c 	.word	0x2000116c
 8009c40:	20001188 	.word	0x20001188

08009c44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c50:	2300      	movs	r3, #0
 8009c52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d056      	beq.n	8009d08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c5a:	4b2e      	ldr	r3, [pc, #184]	; (8009d14 <xTaskPriorityDisinherit+0xd0>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d00a      	beq.n	8009c7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	60fb      	str	r3, [r7, #12]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	60bb      	str	r3, [r7, #8]
}
 8009c94:	bf00      	nop
 8009c96:	e7fe      	b.n	8009c96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c9c:	1e5a      	subs	r2, r3, #1
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d02c      	beq.n	8009d08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d128      	bne.n	8009d08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe fc46 	bl	800854c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	4b0f      	ldr	r3, [pc, #60]	; (8009d18 <xTaskPriorityDisinherit+0xd4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d903      	bls.n	8009ce8 <xTaskPriorityDisinherit+0xa4>
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	4a0c      	ldr	r2, [pc, #48]	; (8009d18 <xTaskPriorityDisinherit+0xd4>)
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cec:	4613      	mov	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <xTaskPriorityDisinherit+0xd8>)
 8009cf6:	441a      	add	r2, r3
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4610      	mov	r0, r2
 8009d00:	f7fe fbc7 	bl	8008492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d04:	2301      	movs	r3, #1
 8009d06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d08:	697b      	ldr	r3, [r7, #20]
	}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000c8c 	.word	0x20000c8c
 8009d18:	20001168 	.word	0x20001168
 8009d1c:	20000c90 	.word	0x20000c90

08009d20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d2a:	4b21      	ldr	r3, [pc, #132]	; (8009db0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d30:	4b20      	ldr	r3, [pc, #128]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3304      	adds	r3, #4
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fc08 	bl	800854c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d42:	d10a      	bne.n	8009d5a <prvAddCurrentTaskToDelayedList+0x3a>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d4a:	4b1a      	ldr	r3, [pc, #104]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	4619      	mov	r1, r3
 8009d52:	4819      	ldr	r0, [pc, #100]	; (8009db8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d54:	f7fe fb9d 	bl	8008492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d58:	e026      	b.n	8009da8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4413      	add	r3, r2
 8009d60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d62:	4b14      	ldr	r3, [pc, #80]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d209      	bcs.n	8009d86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d72:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4610      	mov	r0, r2
 8009d80:	f7fe fbab 	bl	80084da <vListInsert>
}
 8009d84:	e010      	b.n	8009da8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d86:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	4619      	mov	r1, r3
 8009d92:	4610      	mov	r0, r2
 8009d94:	f7fe fba1 	bl	80084da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d202      	bcs.n	8009da8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009da2:	4a08      	ldr	r2, [pc, #32]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	6013      	str	r3, [r2, #0]
}
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	20001164 	.word	0x20001164
 8009db4:	20000c8c 	.word	0x20000c8c
 8009db8:	2000114c 	.word	0x2000114c
 8009dbc:	2000111c 	.word	0x2000111c
 8009dc0:	20001118 	.word	0x20001118
 8009dc4:	20001180 	.word	0x20001180

08009dc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08a      	sub	sp, #40	; 0x28
 8009dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009dd2:	f000 fb07 	bl	800a3e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009dd6:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <xTimerCreateTimerTask+0x80>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d021      	beq.n	8009e22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009de6:	1d3a      	adds	r2, r7, #4
 8009de8:	f107 0108 	add.w	r1, r7, #8
 8009dec:	f107 030c 	add.w	r3, r7, #12
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe fb07 	bl	8008404 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	9202      	str	r2, [sp, #8]
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	2302      	movs	r3, #2
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	2300      	movs	r3, #0
 8009e06:	460a      	mov	r2, r1
 8009e08:	4910      	ldr	r1, [pc, #64]	; (8009e4c <xTimerCreateTimerTask+0x84>)
 8009e0a:	4811      	ldr	r0, [pc, #68]	; (8009e50 <xTimerCreateTimerTask+0x88>)
 8009e0c:	f7ff f8b4 	bl	8008f78 <xTaskCreateStatic>
 8009e10:	4603      	mov	r3, r0
 8009e12:	4a10      	ldr	r2, [pc, #64]	; (8009e54 <xTimerCreateTimerTask+0x8c>)
 8009e14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e16:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <xTimerCreateTimerTask+0x8c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	613b      	str	r3, [r7, #16]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e3e:	697b      	ldr	r3, [r7, #20]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	200011bc 	.word	0x200011bc
 8009e4c:	0800e130 	.word	0x0800e130
 8009e50:	08009f8d 	.word	0x08009f8d
 8009e54:	200011c0 	.word	0x200011c0

08009e58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b08a      	sub	sp, #40	; 0x28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	623b      	str	r3, [r7, #32]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e86:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <xTimerGenericCommand+0x98>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d02a      	beq.n	8009ee4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b05      	cmp	r3, #5
 8009e9e:	dc18      	bgt.n	8009ed2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ea0:	f7ff feb2 	bl	8009c08 <xTaskGetSchedulerState>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d109      	bne.n	8009ebe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009eaa:	4b11      	ldr	r3, [pc, #68]	; (8009ef0 <xTimerGenericCommand+0x98>)
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	f107 0110 	add.w	r1, r7, #16
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eb6:	f7fe fc77 	bl	80087a8 <xQueueGenericSend>
 8009eba:	6278      	str	r0, [r7, #36]	; 0x24
 8009ebc:	e012      	b.n	8009ee4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ebe:	4b0c      	ldr	r3, [pc, #48]	; (8009ef0 <xTimerGenericCommand+0x98>)
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	f107 0110 	add.w	r1, r7, #16
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f7fe fc6d 	bl	80087a8 <xQueueGenericSend>
 8009ece:	6278      	str	r0, [r7, #36]	; 0x24
 8009ed0:	e008      	b.n	8009ee4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ed2:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <xTimerGenericCommand+0x98>)
 8009ed4:	6818      	ldr	r0, [r3, #0]
 8009ed6:	f107 0110 	add.w	r1, r7, #16
 8009eda:	2300      	movs	r3, #0
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	f7fe fd61 	bl	80089a4 <xQueueGenericSendFromISR>
 8009ee2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3728      	adds	r7, #40	; 0x28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	200011bc 	.word	0x200011bc

08009ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009efe:	4b22      	ldr	r3, [pc, #136]	; (8009f88 <prvProcessExpiredTimer+0x94>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe fb1d 	bl	800854c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d022      	beq.n	8009f66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	699a      	ldr	r2, [r3, #24]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	18d1      	adds	r1, r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	6978      	ldr	r0, [r7, #20]
 8009f2e:	f000 f8d1 	bl	800a0d4 <prvInsertTimerInActiveList>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d01f      	beq.n	8009f78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	2100      	movs	r1, #0
 8009f42:	6978      	ldr	r0, [r7, #20]
 8009f44:	f7ff ff88 	bl	8009e58 <xTimerGenericCommand>
 8009f48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d113      	bne.n	8009f78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	60fb      	str	r3, [r7, #12]
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f6c:	f023 0301 	bic.w	r3, r3, #1
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	6978      	ldr	r0, [r7, #20]
 8009f7e:	4798      	blx	r3
}
 8009f80:	bf00      	nop
 8009f82:	3718      	adds	r7, #24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	200011b4 	.word	0x200011b4

08009f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f94:	f107 0308 	add.w	r3, r7, #8
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 f857 	bl	800a04c <prvGetNextExpireTime>
 8009f9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 f803 	bl	8009fb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009faa:	f000 f8d5 	bl	800a158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fae:	e7f1      	b.n	8009f94 <prvTimerTask+0x8>

08009fb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fba:	f7ff fa39 	bl	8009430 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fbe:	f107 0308 	add.w	r3, r7, #8
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f866 	bl	800a094 <prvSampleTimeNow>
 8009fc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d130      	bne.n	800a032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10a      	bne.n	8009fec <prvProcessTimerOrBlockTask+0x3c>
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d806      	bhi.n	8009fec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009fde:	f7ff fa35 	bl	800944c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009fe2:	68f9      	ldr	r1, [r7, #12]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff ff85 	bl	8009ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009fea:	e024      	b.n	800a036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d008      	beq.n	800a004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ff2:	4b13      	ldr	r3, [pc, #76]	; (800a040 <prvProcessTimerOrBlockTask+0x90>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <prvProcessTimerOrBlockTask+0x50>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e000      	b.n	800a002 <prvProcessTimerOrBlockTask+0x52>
 800a000:	2300      	movs	r3, #0
 800a002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a004:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <prvProcessTimerOrBlockTask+0x94>)
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	4619      	mov	r1, r3
 800a012:	f7fe ff7d 	bl	8008f10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a016:	f7ff fa19 	bl	800944c <xTaskResumeAll>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a020:	4b09      	ldr	r3, [pc, #36]	; (800a048 <prvProcessTimerOrBlockTask+0x98>)
 800a022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
}
 800a030:	e001      	b.n	800a036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a032:	f7ff fa0b 	bl	800944c <xTaskResumeAll>
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	200011b8 	.word	0x200011b8
 800a044:	200011bc 	.word	0x200011bc
 800a048:	e000ed04 	.word	0xe000ed04

0800a04c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a054:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <prvGetNextExpireTime+0x44>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <prvGetNextExpireTime+0x16>
 800a05e:	2201      	movs	r2, #1
 800a060:	e000      	b.n	800a064 <prvGetNextExpireTime+0x18>
 800a062:	2200      	movs	r2, #0
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d105      	bne.n	800a07c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <prvGetNextExpireTime+0x44>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e001      	b.n	800a080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a080:	68fb      	ldr	r3, [r7, #12]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	200011b4 	.word	0x200011b4

0800a094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a09c:	f7ff fa74 	bl	8009588 <xTaskGetTickCount>
 800a0a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0a2:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <prvSampleTimeNow+0x3c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d205      	bcs.n	800a0b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0ac:	f000 f936 	bl	800a31c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	e002      	b.n	800a0be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0be:	4a04      	ldr	r2, [pc, #16]	; (800a0d0 <prvSampleTimeNow+0x3c>)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200011c4 	.word	0x200011c4

0800a0d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d812      	bhi.n	800a120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	1ad2      	subs	r2, r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	429a      	cmp	r2, r3
 800a106:	d302      	bcc.n	800a10e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a108:	2301      	movs	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e01b      	b.n	800a146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a10e:	4b10      	ldr	r3, [pc, #64]	; (800a150 <prvInsertTimerInActiveList+0x7c>)
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3304      	adds	r3, #4
 800a116:	4619      	mov	r1, r3
 800a118:	4610      	mov	r0, r2
 800a11a:	f7fe f9de 	bl	80084da <vListInsert>
 800a11e:	e012      	b.n	800a146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	429a      	cmp	r2, r3
 800a126:	d206      	bcs.n	800a136 <prvInsertTimerInActiveList+0x62>
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d302      	bcc.n	800a136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a130:	2301      	movs	r3, #1
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	e007      	b.n	800a146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a136:	4b07      	ldr	r3, [pc, #28]	; (800a154 <prvInsertTimerInActiveList+0x80>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4619      	mov	r1, r3
 800a140:	4610      	mov	r0, r2
 800a142:	f7fe f9ca 	bl	80084da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a146:	697b      	ldr	r3, [r7, #20]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	200011b8 	.word	0x200011b8
 800a154:	200011b4 	.word	0x200011b4

0800a158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08e      	sub	sp, #56	; 0x38
 800a15c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a15e:	e0ca      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	da18      	bge.n	800a198 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a166:	1d3b      	adds	r3, r7, #4
 800a168:	3304      	adds	r3, #4
 800a16a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10a      	bne.n	800a188 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	61fb      	str	r3, [r7, #28]
}
 800a184:	bf00      	nop
 800a186:	e7fe      	b.n	800a186 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a18e:	6850      	ldr	r0, [r2, #4]
 800a190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a192:	6892      	ldr	r2, [r2, #8]
 800a194:	4611      	mov	r1, r2
 800a196:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f2c0 80aa 	blt.w	800a2f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d004      	beq.n	800a1b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe f9cb 	bl	800854c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff ff6b 	bl	800a094 <prvSampleTimeNow>
 800a1be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b09      	cmp	r3, #9
 800a1c4:	f200 8097 	bhi.w	800a2f6 <prvProcessReceivedCommands+0x19e>
 800a1c8:	a201      	add	r2, pc, #4	; (adr r2, 800a1d0 <prvProcessReceivedCommands+0x78>)
 800a1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ce:	bf00      	nop
 800a1d0:	0800a1f9 	.word	0x0800a1f9
 800a1d4:	0800a1f9 	.word	0x0800a1f9
 800a1d8:	0800a1f9 	.word	0x0800a1f9
 800a1dc:	0800a26d 	.word	0x0800a26d
 800a1e0:	0800a281 	.word	0x0800a281
 800a1e4:	0800a2cb 	.word	0x0800a2cb
 800a1e8:	0800a1f9 	.word	0x0800a1f9
 800a1ec:	0800a1f9 	.word	0x0800a1f9
 800a1f0:	0800a26d 	.word	0x0800a26d
 800a1f4:	0800a281 	.word	0x0800a281
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	b2da      	uxtb	r2, r3
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	18d1      	adds	r1, r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a218:	f7ff ff5c 	bl	800a0d4 <prvInsertTimerInActiveList>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d069      	beq.n	800a2f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a228:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a230:	f003 0304 	and.w	r3, r3, #4
 800a234:	2b00      	cmp	r3, #0
 800a236:	d05e      	beq.n	800a2f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	441a      	add	r2, r3
 800a240:	2300      	movs	r3, #0
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	2300      	movs	r3, #0
 800a246:	2100      	movs	r1, #0
 800a248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a24a:	f7ff fe05 	bl	8009e58 <xTimerGenericCommand>
 800a24e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d14f      	bne.n	800a2f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	61bb      	str	r3, [r7, #24]
}
 800a268:	bf00      	nop
 800a26a:	e7fe      	b.n	800a26a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a272:	f023 0301 	bic.w	r3, r3, #1
 800a276:	b2da      	uxtb	r2, r3
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a27e:	e03a      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10a      	bne.n	800a2b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	617b      	str	r3, [r7, #20]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	699a      	ldr	r2, [r3, #24]
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	18d1      	adds	r1, r2, r3
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c4:	f7ff ff06 	bl	800a0d4 <prvInsertTimerInActiveList>
					break;
 800a2c8:	e015      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a2d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2da:	f000 fbe1 	bl	800aaa0 <vPortFree>
 800a2de:	e00a      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2e6:	f023 0301 	bic.w	r3, r3, #1
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2f2:	e000      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a2f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2f6:	4b08      	ldr	r3, [pc, #32]	; (800a318 <prvProcessReceivedCommands+0x1c0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	1d39      	adds	r1, r7, #4
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe fbec 	bl	8008adc <xQueueReceive>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	f47f af2a 	bne.w	800a160 <prvProcessReceivedCommands+0x8>
	}
}
 800a30c:	bf00      	nop
 800a30e:	bf00      	nop
 800a310:	3730      	adds	r7, #48	; 0x30
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	200011bc 	.word	0x200011bc

0800a31c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a322:	e048      	b.n	800a3b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a324:	4b2d      	ldr	r3, [pc, #180]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a32e:	4b2b      	ldr	r3, [pc, #172]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe f905 	bl	800854c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	2b00      	cmp	r3, #0
 800a356:	d02e      	beq.n	800a3b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	4413      	add	r3, r2
 800a360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	429a      	cmp	r2, r3
 800a368:	d90e      	bls.n	800a388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a376:	4b19      	ldr	r3, [pc, #100]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fe f8aa 	bl	80084da <vListInsert>
 800a386:	e016      	b.n	800a3b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a388:	2300      	movs	r3, #0
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	2300      	movs	r3, #0
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	2100      	movs	r1, #0
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7ff fd60 	bl	8009e58 <xTimerGenericCommand>
 800a398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10a      	bne.n	800a3b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	603b      	str	r3, [r7, #0]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3b6:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1b1      	bne.n	800a324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3c0:	4b06      	ldr	r3, [pc, #24]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3c6:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a04      	ldr	r2, [pc, #16]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a3cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3ce:	4a04      	ldr	r2, [pc, #16]	; (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	6013      	str	r3, [r2, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	200011b4 	.word	0x200011b4
 800a3e0:	200011b8 	.word	0x200011b8

0800a3e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3ea:	f000 f96b 	bl	800a6c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3ee:	4b15      	ldr	r3, [pc, #84]	; (800a444 <prvCheckForValidListAndQueue+0x60>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d120      	bne.n	800a438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a3f6:	4814      	ldr	r0, [pc, #80]	; (800a448 <prvCheckForValidListAndQueue+0x64>)
 800a3f8:	f7fe f81e 	bl	8008438 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a3fc:	4813      	ldr	r0, [pc, #76]	; (800a44c <prvCheckForValidListAndQueue+0x68>)
 800a3fe:	f7fe f81b 	bl	8008438 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a402:	4b13      	ldr	r3, [pc, #76]	; (800a450 <prvCheckForValidListAndQueue+0x6c>)
 800a404:	4a10      	ldr	r2, [pc, #64]	; (800a448 <prvCheckForValidListAndQueue+0x64>)
 800a406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a408:	4b12      	ldr	r3, [pc, #72]	; (800a454 <prvCheckForValidListAndQueue+0x70>)
 800a40a:	4a10      	ldr	r2, [pc, #64]	; (800a44c <prvCheckForValidListAndQueue+0x68>)
 800a40c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a40e:	2300      	movs	r3, #0
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	4b11      	ldr	r3, [pc, #68]	; (800a458 <prvCheckForValidListAndQueue+0x74>)
 800a414:	4a11      	ldr	r2, [pc, #68]	; (800a45c <prvCheckForValidListAndQueue+0x78>)
 800a416:	2110      	movs	r1, #16
 800a418:	200a      	movs	r0, #10
 800a41a:	f7fe f929 	bl	8008670 <xQueueGenericCreateStatic>
 800a41e:	4603      	mov	r3, r0
 800a420:	4a08      	ldr	r2, [pc, #32]	; (800a444 <prvCheckForValidListAndQueue+0x60>)
 800a422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a424:	4b07      	ldr	r3, [pc, #28]	; (800a444 <prvCheckForValidListAndQueue+0x60>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d005      	beq.n	800a438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a42c:	4b05      	ldr	r3, [pc, #20]	; (800a444 <prvCheckForValidListAndQueue+0x60>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	490b      	ldr	r1, [pc, #44]	; (800a460 <prvCheckForValidListAndQueue+0x7c>)
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe fd42 	bl	8008ebc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a438:	f000 f974 	bl	800a724 <vPortExitCritical>
}
 800a43c:	bf00      	nop
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	200011bc 	.word	0x200011bc
 800a448:	2000118c 	.word	0x2000118c
 800a44c:	200011a0 	.word	0x200011a0
 800a450:	200011b4 	.word	0x200011b4
 800a454:	200011b8 	.word	0x200011b8
 800a458:	20001268 	.word	0x20001268
 800a45c:	200011c8 	.word	0x200011c8
 800a460:	0800e138 	.word	0x0800e138

0800a464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3b04      	subs	r3, #4
 800a474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3b04      	subs	r3, #4
 800a482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f023 0201 	bic.w	r2, r3, #1
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	3b04      	subs	r3, #4
 800a492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a494:	4a0c      	ldr	r2, [pc, #48]	; (800a4c8 <pxPortInitialiseStack+0x64>)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3b14      	subs	r3, #20
 800a49e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3b04      	subs	r3, #4
 800a4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f06f 0202 	mvn.w	r2, #2
 800a4b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	3b20      	subs	r3, #32
 800a4b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	0800a4cd 	.word	0x0800a4cd

0800a4cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4d6:	4b12      	ldr	r3, [pc, #72]	; (800a520 <prvTaskExitError+0x54>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4de:	d00a      	beq.n	800a4f6 <prvTaskExitError+0x2a>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	60fb      	str	r3, [r7, #12]
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <prvTaskExitError+0x28>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	60bb      	str	r3, [r7, #8]
}
 800a508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a50a:	bf00      	nop
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0fc      	beq.n	800a50c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a512:	bf00      	nop
 800a514:	bf00      	nop
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	20000010 	.word	0x20000010
	...

0800a530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <pxCurrentTCBConst2>)
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	6808      	ldr	r0, [r1, #0]
 800a536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	f380 8809 	msr	PSP, r0
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8811 	msr	BASEPRI, r0
 800a54a:	4770      	bx	lr
 800a54c:	f3af 8000 	nop.w

0800a550 <pxCurrentTCBConst2>:
 800a550:	20000c8c 	.word	0x20000c8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a558:	4808      	ldr	r0, [pc, #32]	; (800a57c <prvPortStartFirstTask+0x24>)
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	6800      	ldr	r0, [r0, #0]
 800a55e:	f380 8808 	msr	MSP, r0
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8814 	msr	CONTROL, r0
 800a56a:	b662      	cpsie	i
 800a56c:	b661      	cpsie	f
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	df00      	svc	0
 800a578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a57a:	bf00      	nop
 800a57c:	e000ed08 	.word	0xe000ed08

0800a580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a586:	4b46      	ldr	r3, [pc, #280]	; (800a6a0 <xPortStartScheduler+0x120>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a46      	ldr	r2, [pc, #280]	; (800a6a4 <xPortStartScheduler+0x124>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d10a      	bne.n	800a5a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	613b      	str	r3, [r7, #16]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5a6:	4b3e      	ldr	r3, [pc, #248]	; (800a6a0 <xPortStartScheduler+0x120>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a3f      	ldr	r2, [pc, #252]	; (800a6a8 <xPortStartScheduler+0x128>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d10a      	bne.n	800a5c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	60fb      	str	r3, [r7, #12]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5c6:	4b39      	ldr	r3, [pc, #228]	; (800a6ac <xPortStartScheduler+0x12c>)
 800a5c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	22ff      	movs	r2, #255	; 0xff
 800a5d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	4b31      	ldr	r3, [pc, #196]	; (800a6b0 <xPortStartScheduler+0x130>)
 800a5ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5ee:	4b31      	ldr	r3, [pc, #196]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5f0:	2207      	movs	r2, #7
 800a5f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5f4:	e009      	b.n	800a60a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a5f6:	4b2f      	ldr	r3, [pc, #188]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	4a2d      	ldr	r2, [pc, #180]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a60a:	78fb      	ldrb	r3, [r7, #3]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b80      	cmp	r3, #128	; 0x80
 800a614:	d0ef      	beq.n	800a5f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a616:	4b27      	ldr	r3, [pc, #156]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f1c3 0307 	rsb	r3, r3, #7
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d00a      	beq.n	800a638 <xPortStartScheduler+0xb8>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	60bb      	str	r3, [r7, #8]
}
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a638:	4b1e      	ldr	r3, [pc, #120]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	4a1d      	ldr	r2, [pc, #116]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a642:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a64a:	4a1a      	ldr	r2, [pc, #104]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a64c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	b2da      	uxtb	r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a656:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a65c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a14      	ldr	r2, [pc, #80]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a66c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a66e:	f000 f8dd 	bl	800a82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a672:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <xPortStartScheduler+0x13c>)
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a678:	f000 f8fc 	bl	800a874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a67c:	4b10      	ldr	r3, [pc, #64]	; (800a6c0 <xPortStartScheduler+0x140>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a0f      	ldr	r2, [pc, #60]	; (800a6c0 <xPortStartScheduler+0x140>)
 800a682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a688:	f7ff ff66 	bl	800a558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a68c:	f7ff f846 	bl	800971c <vTaskSwitchContext>
	prvTaskExitError();
 800a690:	f7ff ff1c 	bl	800a4cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	e000ed00 	.word	0xe000ed00
 800a6a4:	410fc271 	.word	0x410fc271
 800a6a8:	410fc270 	.word	0x410fc270
 800a6ac:	e000e400 	.word	0xe000e400
 800a6b0:	200012b8 	.word	0x200012b8
 800a6b4:	200012bc 	.word	0x200012bc
 800a6b8:	e000ed20 	.word	0xe000ed20
 800a6bc:	20000010 	.word	0x20000010
 800a6c0:	e000ef34 	.word	0xe000ef34

0800a6c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	607b      	str	r3, [r7, #4]
}
 800a6dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6de:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <vPortEnterCritical+0x58>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	4a0d      	ldr	r2, [pc, #52]	; (800a71c <vPortEnterCritical+0x58>)
 800a6e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6e8:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <vPortEnterCritical+0x58>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d10f      	bne.n	800a710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6f0:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <vPortEnterCritical+0x5c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <vPortEnterCritical+0x4c>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	603b      	str	r3, [r7, #0]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <vPortEnterCritical+0x4a>
	}
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	20000010 	.word	0x20000010
 800a720:	e000ed04 	.word	0xe000ed04

0800a724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a72a:	4b12      	ldr	r3, [pc, #72]	; (800a774 <vPortExitCritical+0x50>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <vPortExitCritical+0x24>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	607b      	str	r3, [r7, #4]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a748:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <vPortExitCritical+0x50>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	4a09      	ldr	r2, [pc, #36]	; (800a774 <vPortExitCritical+0x50>)
 800a750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a752:	4b08      	ldr	r3, [pc, #32]	; (800a774 <vPortExitCritical+0x50>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d105      	bne.n	800a766 <vPortExitCritical+0x42>
 800a75a:	2300      	movs	r3, #0
 800a75c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	f383 8811 	msr	BASEPRI, r3
}
 800a764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20000010 	.word	0x20000010
	...

0800a780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a780:	f3ef 8009 	mrs	r0, PSP
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	4b15      	ldr	r3, [pc, #84]	; (800a7e0 <pxCurrentTCBConst>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	f01e 0f10 	tst.w	lr, #16
 800a790:	bf08      	it	eq
 800a792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7a4:	f380 8811 	msr	BASEPRI, r0
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f7fe ffb4 	bl	800971c <vTaskSwitchContext>
 800a7b4:	f04f 0000 	mov.w	r0, #0
 800a7b8:	f380 8811 	msr	BASEPRI, r0
 800a7bc:	bc09      	pop	{r0, r3}
 800a7be:	6819      	ldr	r1, [r3, #0]
 800a7c0:	6808      	ldr	r0, [r1, #0]
 800a7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c6:	f01e 0f10 	tst.w	lr, #16
 800a7ca:	bf08      	it	eq
 800a7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7d0:	f380 8809 	msr	PSP, r0
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	f3af 8000 	nop.w

0800a7e0 <pxCurrentTCBConst>:
 800a7e0:	20000c8c 	.word	0x20000c8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop

0800a7e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	607b      	str	r3, [r7, #4]
}
 800a800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a802:	f7fe fed1 	bl	80095a8 <xTaskIncrementTick>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <xPortSysTickHandler+0x40>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	2300      	movs	r3, #0
 800a816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	f383 8811 	msr	BASEPRI, r3
}
 800a81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <vPortSetupTimerInterrupt+0x38>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <vPortSetupTimerInterrupt+0x3c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <vPortSetupTimerInterrupt+0x40>)
 800a842:	fba2 2303 	umull	r2, r3, r2, r3
 800a846:	099b      	lsrs	r3, r3, #6
 800a848:	4a09      	ldr	r2, [pc, #36]	; (800a870 <vPortSetupTimerInterrupt+0x44>)
 800a84a:	3b01      	subs	r3, #1
 800a84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a84e:	4b04      	ldr	r3, [pc, #16]	; (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a850:	2207      	movs	r2, #7
 800a852:	601a      	str	r2, [r3, #0]
}
 800a854:	bf00      	nop
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	e000e010 	.word	0xe000e010
 800a864:	e000e018 	.word	0xe000e018
 800a868:	20000004 	.word	0x20000004
 800a86c:	10624dd3 	.word	0x10624dd3
 800a870:	e000e014 	.word	0xe000e014

0800a874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a884 <vPortEnableVFP+0x10>
 800a878:	6801      	ldr	r1, [r0, #0]
 800a87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a87e:	6001      	str	r1, [r0, #0]
 800a880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a882:	bf00      	nop
 800a884:	e000ed88 	.word	0xe000ed88

0800a888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a88e:	f3ef 8305 	mrs	r3, IPSR
 800a892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b0f      	cmp	r3, #15
 800a898:	d914      	bls.n	800a8c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a89a:	4a17      	ldr	r2, [pc, #92]	; (800a8f8 <vPortValidateInterruptPriority+0x70>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8a4:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <vPortValidateInterruptPriority+0x74>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	7afa      	ldrb	r2, [r7, #11]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d20a      	bcs.n	800a8c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	607b      	str	r3, [r7, #4]
}
 800a8c0:	bf00      	nop
 800a8c2:	e7fe      	b.n	800a8c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8c4:	4b0e      	ldr	r3, [pc, #56]	; (800a900 <vPortValidateInterruptPriority+0x78>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a8cc:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <vPortValidateInterruptPriority+0x7c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d90a      	bls.n	800a8ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	603b      	str	r3, [r7, #0]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <vPortValidateInterruptPriority+0x60>
	}
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	e000e3f0 	.word	0xe000e3f0
 800a8fc:	200012b8 	.word	0x200012b8
 800a900:	e000ed0c 	.word	0xe000ed0c
 800a904:	200012bc 	.word	0x200012bc

0800a908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	; 0x28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a910:	2300      	movs	r3, #0
 800a912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a914:	f7fe fd8c 	bl	8009430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a918:	4b5b      	ldr	r3, [pc, #364]	; (800aa88 <pvPortMalloc+0x180>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a920:	f000 f920 	bl	800ab64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a924:	4b59      	ldr	r3, [pc, #356]	; (800aa8c <pvPortMalloc+0x184>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4013      	ands	r3, r2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f040 8093 	bne.w	800aa58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d01d      	beq.n	800a974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a938:	2208      	movs	r2, #8
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	2b00      	cmp	r3, #0
 800a948:	d014      	beq.n	800a974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f023 0307 	bic.w	r3, r3, #7
 800a950:	3308      	adds	r3, #8
 800a952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00a      	beq.n	800a974 <pvPortMalloc+0x6c>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	617b      	str	r3, [r7, #20]
}
 800a970:	bf00      	nop
 800a972:	e7fe      	b.n	800a972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d06e      	beq.n	800aa58 <pvPortMalloc+0x150>
 800a97a:	4b45      	ldr	r3, [pc, #276]	; (800aa90 <pvPortMalloc+0x188>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	429a      	cmp	r2, r3
 800a982:	d869      	bhi.n	800aa58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a984:	4b43      	ldr	r3, [pc, #268]	; (800aa94 <pvPortMalloc+0x18c>)
 800a986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a988:	4b42      	ldr	r3, [pc, #264]	; (800aa94 <pvPortMalloc+0x18c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a98e:	e004      	b.n	800a99a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d903      	bls.n	800a9ac <pvPortMalloc+0xa4>
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1f1      	bne.n	800a990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9ac:	4b36      	ldr	r3, [pc, #216]	; (800aa88 <pvPortMalloc+0x180>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d050      	beq.n	800aa58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	4413      	add	r3, r2
 800a9be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	2308      	movs	r3, #8
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d91f      	bls.n	800aa18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	f003 0307 	and.w	r3, r3, #7
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <pvPortMalloc+0xf8>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	613b      	str	r3, [r7, #16]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa12:	69b8      	ldr	r0, [r7, #24]
 800aa14:	f000 f908 	bl	800ac28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa18:	4b1d      	ldr	r3, [pc, #116]	; (800aa90 <pvPortMalloc+0x188>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	4a1b      	ldr	r2, [pc, #108]	; (800aa90 <pvPortMalloc+0x188>)
 800aa24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa26:	4b1a      	ldr	r3, [pc, #104]	; (800aa90 <pvPortMalloc+0x188>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	; (800aa98 <pvPortMalloc+0x190>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d203      	bcs.n	800aa3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa32:	4b17      	ldr	r3, [pc, #92]	; (800aa90 <pvPortMalloc+0x188>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a18      	ldr	r2, [pc, #96]	; (800aa98 <pvPortMalloc+0x190>)
 800aa38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <pvPortMalloc+0x184>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa4e:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <pvPortMalloc+0x194>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3301      	adds	r3, #1
 800aa54:	4a11      	ldr	r2, [pc, #68]	; (800aa9c <pvPortMalloc+0x194>)
 800aa56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa58:	f7fe fcf8 	bl	800944c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00a      	beq.n	800aa7c <pvPortMalloc+0x174>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	60fb      	str	r3, [r7, #12]
}
 800aa78:	bf00      	nop
 800aa7a:	e7fe      	b.n	800aa7a <pvPortMalloc+0x172>
	return pvReturn;
 800aa7c:	69fb      	ldr	r3, [r7, #28]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3728      	adds	r7, #40	; 0x28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20004ec8 	.word	0x20004ec8
 800aa8c:	20004edc 	.word	0x20004edc
 800aa90:	20004ecc 	.word	0x20004ecc
 800aa94:	20004ec0 	.word	0x20004ec0
 800aa98:	20004ed0 	.word	0x20004ed0
 800aa9c:	20004ed4 	.word	0x20004ed4

0800aaa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d04d      	beq.n	800ab4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aab2:	2308      	movs	r3, #8
 800aab4:	425b      	negs	r3, r3
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	4413      	add	r3, r2
 800aaba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	4b24      	ldr	r3, [pc, #144]	; (800ab58 <vPortFree+0xb8>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4013      	ands	r3, r2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10a      	bne.n	800aae4 <vPortFree+0x44>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	60fb      	str	r3, [r7, #12]
}
 800aae0:	bf00      	nop
 800aae2:	e7fe      	b.n	800aae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00a      	beq.n	800ab02 <vPortFree+0x62>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	60bb      	str	r3, [r7, #8]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	685a      	ldr	r2, [r3, #4]
 800ab06:	4b14      	ldr	r3, [pc, #80]	; (800ab58 <vPortFree+0xb8>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d01e      	beq.n	800ab4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d11a      	bne.n	800ab4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	4b0e      	ldr	r3, [pc, #56]	; (800ab58 <vPortFree+0xb8>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	43db      	mvns	r3, r3
 800ab22:	401a      	ands	r2, r3
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab28:	f7fe fc82 	bl	8009430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	4b0a      	ldr	r3, [pc, #40]	; (800ab5c <vPortFree+0xbc>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4413      	add	r3, r2
 800ab36:	4a09      	ldr	r2, [pc, #36]	; (800ab5c <vPortFree+0xbc>)
 800ab38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab3a:	6938      	ldr	r0, [r7, #16]
 800ab3c:	f000 f874 	bl	800ac28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab40:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <vPortFree+0xc0>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3301      	adds	r3, #1
 800ab46:	4a06      	ldr	r2, [pc, #24]	; (800ab60 <vPortFree+0xc0>)
 800ab48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab4a:	f7fe fc7f 	bl	800944c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab4e:	bf00      	nop
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20004edc 	.word	0x20004edc
 800ab5c:	20004ecc 	.word	0x20004ecc
 800ab60:	20004ed8 	.word	0x20004ed8

0800ab64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ab6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab70:	4b27      	ldr	r3, [pc, #156]	; (800ac10 <prvHeapInit+0xac>)
 800ab72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00c      	beq.n	800ab98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3307      	adds	r3, #7
 800ab82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f023 0307 	bic.w	r3, r3, #7
 800ab8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	4a1f      	ldr	r2, [pc, #124]	; (800ac10 <prvHeapInit+0xac>)
 800ab94:	4413      	add	r3, r2
 800ab96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab9c:	4a1d      	ldr	r2, [pc, #116]	; (800ac14 <prvHeapInit+0xb0>)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aba2:	4b1c      	ldr	r3, [pc, #112]	; (800ac14 <prvHeapInit+0xb0>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	4413      	add	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abb0:	2208      	movs	r2, #8
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	1a9b      	subs	r3, r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 0307 	bic.w	r3, r3, #7
 800abbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4a15      	ldr	r2, [pc, #84]	; (800ac18 <prvHeapInit+0xb4>)
 800abc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abc6:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <prvHeapInit+0xb4>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2200      	movs	r2, #0
 800abcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abce:	4b12      	ldr	r3, [pc, #72]	; (800ac18 <prvHeapInit+0xb4>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	1ad2      	subs	r2, r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abe4:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <prvHeapInit+0xb4>)
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	4a0a      	ldr	r2, [pc, #40]	; (800ac1c <prvHeapInit+0xb8>)
 800abf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	4a09      	ldr	r2, [pc, #36]	; (800ac20 <prvHeapInit+0xbc>)
 800abfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abfc:	4b09      	ldr	r3, [pc, #36]	; (800ac24 <prvHeapInit+0xc0>)
 800abfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac02:	601a      	str	r2, [r3, #0]
}
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	200012c0 	.word	0x200012c0
 800ac14:	20004ec0 	.word	0x20004ec0
 800ac18:	20004ec8 	.word	0x20004ec8
 800ac1c:	20004ed0 	.word	0x20004ed0
 800ac20:	20004ecc 	.word	0x20004ecc
 800ac24:	20004edc 	.word	0x20004edc

0800ac28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac30:	4b28      	ldr	r3, [pc, #160]	; (800acd4 <prvInsertBlockIntoFreeList+0xac>)
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	e002      	b.n	800ac3c <prvInsertBlockIntoFreeList+0x14>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d8f7      	bhi.n	800ac36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	4413      	add	r3, r2
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d108      	bne.n	800ac6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	441a      	add	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	441a      	add	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d118      	bne.n	800acb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d00d      	beq.n	800aca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	441a      	add	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	601a      	str	r2, [r3, #0]
 800aca4:	e008      	b.n	800acb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aca6:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <prvInsertBlockIntoFreeList+0xb0>)
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	e003      	b.n	800acb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d002      	beq.n	800acc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acc6:	bf00      	nop
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20004ec0 	.word	0x20004ec0
 800acd8:	20004ec8 	.word	0x20004ec8

0800acdc <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800ace2:	2300      	movs	r3, #0
 800ace4:	71fb      	strb	r3, [r7, #7]
 800ace6:	e026      	b.n	800ad36 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800ace8:	79fb      	ldrb	r3, [r7, #7]
 800acea:	3b50      	subs	r3, #80	; 0x50
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2100      	movs	r1, #0
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 f82b 	bl	800ad4c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800acf6:	2100      	movs	r1, #0
 800acf8:	2000      	movs	r0, #0
 800acfa:	f000 f827 	bl	800ad4c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800acfe:	2100      	movs	r1, #0
 800ad00:	2010      	movs	r0, #16
 800ad02:	f000 f823 	bl	800ad4c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800ad06:	2300      	movs	r3, #0
 800ad08:	71bb      	strb	r3, [r7, #6]
 800ad0a:	e00d      	b.n	800ad28 <OLED_Refresh_Gram+0x4c>
 800ad0c:	79ba      	ldrb	r2, [r7, #6]
 800ad0e:	79fb      	ldrb	r3, [r7, #7]
 800ad10:	490d      	ldr	r1, [pc, #52]	; (800ad48 <OLED_Refresh_Gram+0x6c>)
 800ad12:	00d2      	lsls	r2, r2, #3
 800ad14:	440a      	add	r2, r1
 800ad16:	4413      	add	r3, r2
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 f815 	bl	800ad4c <OLED_WR_Byte>
 800ad22:	79bb      	ldrb	r3, [r7, #6]
 800ad24:	3301      	adds	r3, #1
 800ad26:	71bb      	strb	r3, [r7, #6]
 800ad28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	daed      	bge.n	800ad0c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800ad30:	79fb      	ldrb	r3, [r7, #7]
 800ad32:	3301      	adds	r3, #1
 800ad34:	71fb      	strb	r3, [r7, #7]
 800ad36:	79fb      	ldrb	r3, [r7, #7]
 800ad38:	2b07      	cmp	r3, #7
 800ad3a:	d9d5      	bls.n	800ace8 <OLED_Refresh_Gram+0xc>
	}   
}
 800ad3c:	bf00      	nop
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20004ee0 	.word	0x20004ee0

0800ad4c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	460a      	mov	r2, r1
 800ad56:	71fb      	strb	r3, [r7, #7]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800ad5c:	79bb      	ldrb	r3, [r7, #6]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d006      	beq.n	800ad70 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800ad62:	2201      	movs	r2, #1
 800ad64:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad68:	481c      	ldr	r0, [pc, #112]	; (800addc <OLED_WR_Byte+0x90>)
 800ad6a:	f7f9 f871 	bl	8003e50 <HAL_GPIO_WritePin>
 800ad6e:	e005      	b.n	800ad7c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800ad70:	2200      	movs	r2, #0
 800ad72:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad76:	4819      	ldr	r0, [pc, #100]	; (800addc <OLED_WR_Byte+0x90>)
 800ad78:	f7f9 f86a 	bl	8003e50 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
 800ad80:	e01e      	b.n	800adc0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800ad82:	2200      	movs	r2, #0
 800ad84:	2120      	movs	r1, #32
 800ad86:	4815      	ldr	r0, [pc, #84]	; (800addc <OLED_WR_Byte+0x90>)
 800ad88:	f7f9 f862 	bl	8003e50 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800ad8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	da05      	bge.n	800ada0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800ad94:	2201      	movs	r2, #1
 800ad96:	2140      	movs	r1, #64	; 0x40
 800ad98:	4810      	ldr	r0, [pc, #64]	; (800addc <OLED_WR_Byte+0x90>)
 800ad9a:	f7f9 f859 	bl	8003e50 <HAL_GPIO_WritePin>
 800ad9e:	e004      	b.n	800adaa <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800ada0:	2200      	movs	r2, #0
 800ada2:	2140      	movs	r1, #64	; 0x40
 800ada4:	480d      	ldr	r0, [pc, #52]	; (800addc <OLED_WR_Byte+0x90>)
 800ada6:	f7f9 f853 	bl	8003e50 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800adaa:	2201      	movs	r2, #1
 800adac:	2120      	movs	r1, #32
 800adae:	480b      	ldr	r0, [pc, #44]	; (800addc <OLED_WR_Byte+0x90>)
 800adb0:	f7f9 f84e 	bl	8003e50 <HAL_GPIO_WritePin>
		dat<<=1;   
 800adb4:	79fb      	ldrb	r3, [r7, #7]
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	3301      	adds	r3, #1
 800adbe:	73fb      	strb	r3, [r7, #15]
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	2b07      	cmp	r3, #7
 800adc4:	d9dd      	bls.n	800ad82 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800adc6:	2201      	movs	r2, #1
 800adc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800adcc:	4803      	ldr	r0, [pc, #12]	; (800addc <OLED_WR_Byte+0x90>)
 800adce:	f7f9 f83f 	bl	8003e50 <HAL_GPIO_WritePin>
} 
 800add2:	bf00      	nop
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	40021000 	.word	0x40021000

0800ade0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800ade6:	2300      	movs	r3, #0
 800ade8:	71fb      	strb	r3, [r7, #7]
 800adea:	e014      	b.n	800ae16 <OLED_Clear+0x36>
 800adec:	2300      	movs	r3, #0
 800adee:	71bb      	strb	r3, [r7, #6]
 800adf0:	e00a      	b.n	800ae08 <OLED_Clear+0x28>
 800adf2:	79ba      	ldrb	r2, [r7, #6]
 800adf4:	79fb      	ldrb	r3, [r7, #7]
 800adf6:	490c      	ldr	r1, [pc, #48]	; (800ae28 <OLED_Clear+0x48>)
 800adf8:	00d2      	lsls	r2, r2, #3
 800adfa:	440a      	add	r2, r1
 800adfc:	4413      	add	r3, r2
 800adfe:	2200      	movs	r2, #0
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	79bb      	ldrb	r3, [r7, #6]
 800ae04:	3301      	adds	r3, #1
 800ae06:	71bb      	strb	r3, [r7, #6]
 800ae08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	daf0      	bge.n	800adf2 <OLED_Clear+0x12>
 800ae10:	79fb      	ldrb	r3, [r7, #7]
 800ae12:	3301      	adds	r3, #1
 800ae14:	71fb      	strb	r3, [r7, #7]
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	2b07      	cmp	r3, #7
 800ae1a:	d9e7      	bls.n	800adec <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800ae1c:	f7ff ff5e 	bl	800acdc <OLED_Refresh_Gram>
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	20004ee0 	.word	0x20004ee0

0800ae2c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4603      	mov	r3, r0
 800ae34:	71fb      	strb	r3, [r7, #7]
 800ae36:	460b      	mov	r3, r1
 800ae38:	71bb      	strb	r3, [r7, #6]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800ae42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	db41      	blt.n	800aece <OLED_DrawPoint+0xa2>
 800ae4a:	79bb      	ldrb	r3, [r7, #6]
 800ae4c:	2b3f      	cmp	r3, #63	; 0x3f
 800ae4e:	d83e      	bhi.n	800aece <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800ae50:	79bb      	ldrb	r3, [r7, #6]
 800ae52:	08db      	lsrs	r3, r3, #3
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	f1c3 0307 	rsb	r3, r3, #7
 800ae5a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800ae5c:	79bb      	ldrb	r3, [r7, #6]
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800ae64:	7b7b      	ldrb	r3, [r7, #13]
 800ae66:	f1c3 0307 	rsb	r3, r3, #7
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae70:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800ae72:	797b      	ldrb	r3, [r7, #5]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d012      	beq.n	800ae9e <OLED_DrawPoint+0x72>
 800ae78:	79fa      	ldrb	r2, [r7, #7]
 800ae7a:	7bbb      	ldrb	r3, [r7, #14]
 800ae7c:	4917      	ldr	r1, [pc, #92]	; (800aedc <OLED_DrawPoint+0xb0>)
 800ae7e:	00d2      	lsls	r2, r2, #3
 800ae80:	440a      	add	r2, r1
 800ae82:	4413      	add	r3, r2
 800ae84:	7818      	ldrb	r0, [r3, #0]
 800ae86:	79fa      	ldrb	r2, [r7, #7]
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	7bf9      	ldrb	r1, [r7, #15]
 800ae8c:	4301      	orrs	r1, r0
 800ae8e:	b2c8      	uxtb	r0, r1
 800ae90:	4912      	ldr	r1, [pc, #72]	; (800aedc <OLED_DrawPoint+0xb0>)
 800ae92:	00d2      	lsls	r2, r2, #3
 800ae94:	440a      	add	r2, r1
 800ae96:	4413      	add	r3, r2
 800ae98:	4602      	mov	r2, r0
 800ae9a:	701a      	strb	r2, [r3, #0]
 800ae9c:	e018      	b.n	800aed0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800ae9e:	79fa      	ldrb	r2, [r7, #7]
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	490e      	ldr	r1, [pc, #56]	; (800aedc <OLED_DrawPoint+0xb0>)
 800aea4:	00d2      	lsls	r2, r2, #3
 800aea6:	440a      	add	r2, r1
 800aea8:	4413      	add	r3, r2
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	b25a      	sxtb	r2, r3
 800aeae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeb2:	43db      	mvns	r3, r3
 800aeb4:	b25b      	sxtb	r3, r3
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	b259      	sxtb	r1, r3
 800aeba:	79fa      	ldrb	r2, [r7, #7]
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	b2c8      	uxtb	r0, r1
 800aec0:	4906      	ldr	r1, [pc, #24]	; (800aedc <OLED_DrawPoint+0xb0>)
 800aec2:	00d2      	lsls	r2, r2, #3
 800aec4:	440a      	add	r2, r1
 800aec6:	4413      	add	r3, r2
 800aec8:	4602      	mov	r2, r0
 800aeca:	701a      	strb	r2, [r3, #0]
 800aecc:	e000      	b.n	800aed0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800aece:	bf00      	nop
}
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	20004ee0 	.word	0x20004ee0

0800aee0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800aee0:	b590      	push	{r4, r7, lr}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4604      	mov	r4, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	4611      	mov	r1, r2
 800aeec:	461a      	mov	r2, r3
 800aeee:	4623      	mov	r3, r4
 800aef0:	71fb      	strb	r3, [r7, #7]
 800aef2:	4603      	mov	r3, r0
 800aef4:	71bb      	strb	r3, [r7, #6]
 800aef6:	460b      	mov	r3, r1
 800aef8:	717b      	strb	r3, [r7, #5]
 800aefa:	4613      	mov	r3, r2
 800aefc:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800aefe:	79bb      	ldrb	r3, [r7, #6]
 800af00:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800af02:	797b      	ldrb	r3, [r7, #5]
 800af04:	3b20      	subs	r3, #32
 800af06:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800af08:	2300      	movs	r3, #0
 800af0a:	73bb      	strb	r3, [r7, #14]
 800af0c:	e04d      	b.n	800afaa <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800af0e:	793b      	ldrb	r3, [r7, #4]
 800af10:	2b0c      	cmp	r3, #12
 800af12:	d10b      	bne.n	800af2c <OLED_ShowChar+0x4c>
 800af14:	797a      	ldrb	r2, [r7, #5]
 800af16:	7bb9      	ldrb	r1, [r7, #14]
 800af18:	4828      	ldr	r0, [pc, #160]	; (800afbc <OLED_ShowChar+0xdc>)
 800af1a:	4613      	mov	r3, r2
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4403      	add	r3, r0
 800af24:	440b      	add	r3, r1
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	73fb      	strb	r3, [r7, #15]
 800af2a:	e007      	b.n	800af3c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800af2c:	797a      	ldrb	r2, [r7, #5]
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	4923      	ldr	r1, [pc, #140]	; (800afc0 <OLED_ShowChar+0xe0>)
 800af32:	0112      	lsls	r2, r2, #4
 800af34:	440a      	add	r2, r1
 800af36:	4413      	add	r3, r2
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800af3c:	2300      	movs	r3, #0
 800af3e:	737b      	strb	r3, [r7, #13]
 800af40:	e02d      	b.n	800af9e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800af42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af46:	2b00      	cmp	r3, #0
 800af48:	da07      	bge.n	800af5a <OLED_ShowChar+0x7a>
 800af4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800af4e:	79b9      	ldrb	r1, [r7, #6]
 800af50:	79fb      	ldrb	r3, [r7, #7]
 800af52:	4618      	mov	r0, r3
 800af54:	f7ff ff6a 	bl	800ae2c <OLED_DrawPoint>
 800af58:	e00c      	b.n	800af74 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800af5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	bf0c      	ite	eq
 800af62:	2301      	moveq	r3, #1
 800af64:	2300      	movne	r3, #0
 800af66:	b2db      	uxtb	r3, r3
 800af68:	461a      	mov	r2, r3
 800af6a:	79b9      	ldrb	r1, [r7, #6]
 800af6c:	79fb      	ldrb	r3, [r7, #7]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff ff5c 	bl	800ae2c <OLED_DrawPoint>
			temp<<=1;
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	005b      	lsls	r3, r3, #1
 800af78:	73fb      	strb	r3, [r7, #15]
			y++;
 800af7a:	79bb      	ldrb	r3, [r7, #6]
 800af7c:	3301      	adds	r3, #1
 800af7e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800af80:	79ba      	ldrb	r2, [r7, #6]
 800af82:	7b3b      	ldrb	r3, [r7, #12]
 800af84:	1ad2      	subs	r2, r2, r3
 800af86:	793b      	ldrb	r3, [r7, #4]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d105      	bne.n	800af98 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800af8c:	7b3b      	ldrb	r3, [r7, #12]
 800af8e:	71bb      	strb	r3, [r7, #6]
				x++;
 800af90:	79fb      	ldrb	r3, [r7, #7]
 800af92:	3301      	adds	r3, #1
 800af94:	71fb      	strb	r3, [r7, #7]
				break;
 800af96:	e005      	b.n	800afa4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800af98:	7b7b      	ldrb	r3, [r7, #13]
 800af9a:	3301      	adds	r3, #1
 800af9c:	737b      	strb	r3, [r7, #13]
 800af9e:	7b7b      	ldrb	r3, [r7, #13]
 800afa0:	2b07      	cmp	r3, #7
 800afa2:	d9ce      	bls.n	800af42 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
 800afa6:	3301      	adds	r3, #1
 800afa8:	73bb      	strb	r3, [r7, #14]
 800afaa:	7bba      	ldrb	r2, [r7, #14]
 800afac:	793b      	ldrb	r3, [r7, #4]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d3ad      	bcc.n	800af0e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd90      	pop	{r4, r7, pc}
 800afbc:	0800e278 	.word	0x0800e278
 800afc0:	0800e6ec 	.word	0x0800e6ec

0800afc4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af02      	add	r7, sp, #8
 800afca:	4603      	mov	r3, r0
 800afcc:	603a      	str	r2, [r7, #0]
 800afce:	71fb      	strb	r3, [r7, #7]
 800afd0:	460b      	mov	r3, r1
 800afd2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800afd4:	e01f      	b.n	800b016 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	2b7a      	cmp	r3, #122	; 0x7a
 800afda:	d904      	bls.n	800afe6 <OLED_ShowString+0x22>
 800afdc:	2300      	movs	r3, #0
 800afde:	71fb      	strb	r3, [r7, #7]
 800afe0:	79bb      	ldrb	r3, [r7, #6]
 800afe2:	3310      	adds	r3, #16
 800afe4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800afe6:	79bb      	ldrb	r3, [r7, #6]
 800afe8:	2b3a      	cmp	r3, #58	; 0x3a
 800afea:	d905      	bls.n	800aff8 <OLED_ShowString+0x34>
 800afec:	2300      	movs	r3, #0
 800afee:	71fb      	strb	r3, [r7, #7]
 800aff0:	79fb      	ldrb	r3, [r7, #7]
 800aff2:	71bb      	strb	r3, [r7, #6]
 800aff4:	f7ff fef4 	bl	800ade0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	781a      	ldrb	r2, [r3, #0]
 800affc:	79b9      	ldrb	r1, [r7, #6]
 800affe:	79f8      	ldrb	r0, [r7, #7]
 800b000:	2301      	movs	r3, #1
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	230c      	movs	r3, #12
 800b006:	f7ff ff6b 	bl	800aee0 <OLED_ShowChar>
        x+=8;
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	3308      	adds	r3, #8
 800b00e:	71fb      	strb	r3, [r7, #7]
        p++;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	3301      	adds	r3, #1
 800b014:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1db      	bne.n	800afd6 <OLED_ShowString+0x12>
    }  
}	 
 800b01e:	bf00      	nop
 800b020:	bf00      	nop
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <OLED_Init>:

void OLED_Init(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800b02c:	f7f9 feda 	bl	8004de4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800b030:	4b41      	ldr	r3, [pc, #260]	; (800b138 <OLED_Init+0x110>)
 800b032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b034:	4a40      	ldr	r2, [pc, #256]	; (800b138 <OLED_Init+0x110>)
 800b036:	f023 0301 	bic.w	r3, r3, #1
 800b03a:	6713      	str	r3, [r2, #112]	; 0x70
 800b03c:	4b3e      	ldr	r3, [pc, #248]	; (800b138 <OLED_Init+0x110>)
 800b03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b040:	4a3d      	ldr	r2, [pc, #244]	; (800b138 <OLED_Init+0x110>)
 800b042:	f023 0304 	bic.w	r3, r3, #4
 800b046:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b048:	f7f9 fee0 	bl	8004e0c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b04c:	2200      	movs	r2, #0
 800b04e:	2180      	movs	r1, #128	; 0x80
 800b050:	483a      	ldr	r0, [pc, #232]	; (800b13c <OLED_Init+0x114>)
 800b052:	f7f8 fefd 	bl	8003e50 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b056:	2064      	movs	r0, #100	; 0x64
 800b058:	f7f8 fb96 	bl	8003788 <HAL_Delay>
	OLED_RST_Set();
 800b05c:	2201      	movs	r2, #1
 800b05e:	2180      	movs	r1, #128	; 0x80
 800b060:	4836      	ldr	r0, [pc, #216]	; (800b13c <OLED_Init+0x114>)
 800b062:	f7f8 fef5 	bl	8003e50 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800b066:	2100      	movs	r1, #0
 800b068:	20ae      	movs	r0, #174	; 0xae
 800b06a:	f7ff fe6f 	bl	800ad4c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800b06e:	2100      	movs	r1, #0
 800b070:	20d5      	movs	r0, #213	; 0xd5
 800b072:	f7ff fe6b 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800b076:	2100      	movs	r1, #0
 800b078:	2050      	movs	r0, #80	; 0x50
 800b07a:	f7ff fe67 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800b07e:	2100      	movs	r1, #0
 800b080:	20a8      	movs	r0, #168	; 0xa8
 800b082:	f7ff fe63 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800b086:	2100      	movs	r1, #0
 800b088:	203f      	movs	r0, #63	; 0x3f
 800b08a:	f7ff fe5f 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800b08e:	2100      	movs	r1, #0
 800b090:	20d3      	movs	r0, #211	; 0xd3
 800b092:	f7ff fe5b 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800b096:	2100      	movs	r1, #0
 800b098:	2000      	movs	r0, #0
 800b09a:	f7ff fe57 	bl	800ad4c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800b09e:	2100      	movs	r1, #0
 800b0a0:	2040      	movs	r0, #64	; 0x40
 800b0a2:	f7ff fe53 	bl	800ad4c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	208d      	movs	r0, #141	; 0x8d
 800b0aa:	f7ff fe4f 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	2014      	movs	r0, #20
 800b0b2:	f7ff fe4b 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	2020      	movs	r0, #32
 800b0ba:	f7ff fe47 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800b0be:	2100      	movs	r1, #0
 800b0c0:	2002      	movs	r0, #2
 800b0c2:	f7ff fe43 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	20a1      	movs	r0, #161	; 0xa1
 800b0ca:	f7ff fe3f 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	20c0      	movs	r0, #192	; 0xc0
 800b0d2:	f7ff fe3b 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	20da      	movs	r0, #218	; 0xda
 800b0da:	f7ff fe37 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800b0de:	2100      	movs	r1, #0
 800b0e0:	2012      	movs	r0, #18
 800b0e2:	f7ff fe33 	bl	800ad4c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	2081      	movs	r0, #129	; 0x81
 800b0ea:	f7ff fe2f 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	20ef      	movs	r0, #239	; 0xef
 800b0f2:	f7ff fe2b 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	20d9      	movs	r0, #217	; 0xd9
 800b0fa:	f7ff fe27 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800b0fe:	2100      	movs	r1, #0
 800b100:	20f1      	movs	r0, #241	; 0xf1
 800b102:	f7ff fe23 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800b106:	2100      	movs	r1, #0
 800b108:	20db      	movs	r0, #219	; 0xdb
 800b10a:	f7ff fe1f 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800b10e:	2100      	movs	r1, #0
 800b110:	2030      	movs	r0, #48	; 0x30
 800b112:	f7ff fe1b 	bl	800ad4c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800b116:	2100      	movs	r1, #0
 800b118:	20a4      	movs	r0, #164	; 0xa4
 800b11a:	f7ff fe17 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800b11e:	2100      	movs	r1, #0
 800b120:	20a6      	movs	r0, #166	; 0xa6
 800b122:	f7ff fe13 	bl	800ad4c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800b126:	2100      	movs	r1, #0
 800b128:	20af      	movs	r0, #175	; 0xaf
 800b12a:	f7ff fe0f 	bl	800ad4c <OLED_WR_Byte>
	OLED_Clear(); 
 800b12e:	f7ff fe57 	bl	800ade0 <OLED_Clear>
 800b132:	bf00      	nop
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	40023800 	.word	0x40023800
 800b13c:	40021000 	.word	0x40021000

0800b140 <__errno>:
 800b140:	4b01      	ldr	r3, [pc, #4]	; (800b148 <__errno+0x8>)
 800b142:	6818      	ldr	r0, [r3, #0]
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20000014 	.word	0x20000014

0800b14c <std>:
 800b14c:	2300      	movs	r3, #0
 800b14e:	b510      	push	{r4, lr}
 800b150:	4604      	mov	r4, r0
 800b152:	e9c0 3300 	strd	r3, r3, [r0]
 800b156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b15a:	6083      	str	r3, [r0, #8]
 800b15c:	8181      	strh	r1, [r0, #12]
 800b15e:	6643      	str	r3, [r0, #100]	; 0x64
 800b160:	81c2      	strh	r2, [r0, #14]
 800b162:	6183      	str	r3, [r0, #24]
 800b164:	4619      	mov	r1, r3
 800b166:	2208      	movs	r2, #8
 800b168:	305c      	adds	r0, #92	; 0x5c
 800b16a:	f000 f91a 	bl	800b3a2 <memset>
 800b16e:	4b05      	ldr	r3, [pc, #20]	; (800b184 <std+0x38>)
 800b170:	6263      	str	r3, [r4, #36]	; 0x24
 800b172:	4b05      	ldr	r3, [pc, #20]	; (800b188 <std+0x3c>)
 800b174:	62a3      	str	r3, [r4, #40]	; 0x28
 800b176:	4b05      	ldr	r3, [pc, #20]	; (800b18c <std+0x40>)
 800b178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b17a:	4b05      	ldr	r3, [pc, #20]	; (800b190 <std+0x44>)
 800b17c:	6224      	str	r4, [r4, #32]
 800b17e:	6323      	str	r3, [r4, #48]	; 0x30
 800b180:	bd10      	pop	{r4, pc}
 800b182:	bf00      	nop
 800b184:	0800bee5 	.word	0x0800bee5
 800b188:	0800bf07 	.word	0x0800bf07
 800b18c:	0800bf3f 	.word	0x0800bf3f
 800b190:	0800bf63 	.word	0x0800bf63

0800b194 <_cleanup_r>:
 800b194:	4901      	ldr	r1, [pc, #4]	; (800b19c <_cleanup_r+0x8>)
 800b196:	f000 b8af 	b.w	800b2f8 <_fwalk_reent>
 800b19a:	bf00      	nop
 800b19c:	0800cdb1 	.word	0x0800cdb1

0800b1a0 <__sfmoreglue>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	2268      	movs	r2, #104	; 0x68
 800b1a4:	1e4d      	subs	r5, r1, #1
 800b1a6:	4355      	muls	r5, r2
 800b1a8:	460e      	mov	r6, r1
 800b1aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1ae:	f000 f921 	bl	800b3f4 <_malloc_r>
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	b140      	cbz	r0, 800b1c8 <__sfmoreglue+0x28>
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	e9c0 1600 	strd	r1, r6, [r0]
 800b1bc:	300c      	adds	r0, #12
 800b1be:	60a0      	str	r0, [r4, #8]
 800b1c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1c4:	f000 f8ed 	bl	800b3a2 <memset>
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}

0800b1cc <__sfp_lock_acquire>:
 800b1cc:	4801      	ldr	r0, [pc, #4]	; (800b1d4 <__sfp_lock_acquire+0x8>)
 800b1ce:	f000 b8d8 	b.w	800b382 <__retarget_lock_acquire_recursive>
 800b1d2:	bf00      	nop
 800b1d4:	200052e1 	.word	0x200052e1

0800b1d8 <__sfp_lock_release>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__sfp_lock_release+0x8>)
 800b1da:	f000 b8d3 	b.w	800b384 <__retarget_lock_release_recursive>
 800b1de:	bf00      	nop
 800b1e0:	200052e1 	.word	0x200052e1

0800b1e4 <__sinit_lock_acquire>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__sinit_lock_acquire+0x8>)
 800b1e6:	f000 b8cc 	b.w	800b382 <__retarget_lock_acquire_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	200052e2 	.word	0x200052e2

0800b1f0 <__sinit_lock_release>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <__sinit_lock_release+0x8>)
 800b1f2:	f000 b8c7 	b.w	800b384 <__retarget_lock_release_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	200052e2 	.word	0x200052e2

0800b1fc <__sinit>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	4604      	mov	r4, r0
 800b200:	f7ff fff0 	bl	800b1e4 <__sinit_lock_acquire>
 800b204:	69a3      	ldr	r3, [r4, #24]
 800b206:	b11b      	cbz	r3, 800b210 <__sinit+0x14>
 800b208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b20c:	f7ff bff0 	b.w	800b1f0 <__sinit_lock_release>
 800b210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b214:	6523      	str	r3, [r4, #80]	; 0x50
 800b216:	4b13      	ldr	r3, [pc, #76]	; (800b264 <__sinit+0x68>)
 800b218:	4a13      	ldr	r2, [pc, #76]	; (800b268 <__sinit+0x6c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b21e:	42a3      	cmp	r3, r4
 800b220:	bf04      	itt	eq
 800b222:	2301      	moveq	r3, #1
 800b224:	61a3      	streq	r3, [r4, #24]
 800b226:	4620      	mov	r0, r4
 800b228:	f000 f820 	bl	800b26c <__sfp>
 800b22c:	6060      	str	r0, [r4, #4]
 800b22e:	4620      	mov	r0, r4
 800b230:	f000 f81c 	bl	800b26c <__sfp>
 800b234:	60a0      	str	r0, [r4, #8]
 800b236:	4620      	mov	r0, r4
 800b238:	f000 f818 	bl	800b26c <__sfp>
 800b23c:	2200      	movs	r2, #0
 800b23e:	60e0      	str	r0, [r4, #12]
 800b240:	2104      	movs	r1, #4
 800b242:	6860      	ldr	r0, [r4, #4]
 800b244:	f7ff ff82 	bl	800b14c <std>
 800b248:	68a0      	ldr	r0, [r4, #8]
 800b24a:	2201      	movs	r2, #1
 800b24c:	2109      	movs	r1, #9
 800b24e:	f7ff ff7d 	bl	800b14c <std>
 800b252:	68e0      	ldr	r0, [r4, #12]
 800b254:	2202      	movs	r2, #2
 800b256:	2112      	movs	r1, #18
 800b258:	f7ff ff78 	bl	800b14c <std>
 800b25c:	2301      	movs	r3, #1
 800b25e:	61a3      	str	r3, [r4, #24]
 800b260:	e7d2      	b.n	800b208 <__sinit+0xc>
 800b262:	bf00      	nop
 800b264:	0800ed3c 	.word	0x0800ed3c
 800b268:	0800b195 	.word	0x0800b195

0800b26c <__sfp>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	4607      	mov	r7, r0
 800b270:	f7ff ffac 	bl	800b1cc <__sfp_lock_acquire>
 800b274:	4b1e      	ldr	r3, [pc, #120]	; (800b2f0 <__sfp+0x84>)
 800b276:	681e      	ldr	r6, [r3, #0]
 800b278:	69b3      	ldr	r3, [r6, #24]
 800b27a:	b913      	cbnz	r3, 800b282 <__sfp+0x16>
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff ffbd 	bl	800b1fc <__sinit>
 800b282:	3648      	adds	r6, #72	; 0x48
 800b284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b288:	3b01      	subs	r3, #1
 800b28a:	d503      	bpl.n	800b294 <__sfp+0x28>
 800b28c:	6833      	ldr	r3, [r6, #0]
 800b28e:	b30b      	cbz	r3, 800b2d4 <__sfp+0x68>
 800b290:	6836      	ldr	r6, [r6, #0]
 800b292:	e7f7      	b.n	800b284 <__sfp+0x18>
 800b294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b298:	b9d5      	cbnz	r5, 800b2d0 <__sfp+0x64>
 800b29a:	4b16      	ldr	r3, [pc, #88]	; (800b2f4 <__sfp+0x88>)
 800b29c:	60e3      	str	r3, [r4, #12]
 800b29e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2a2:	6665      	str	r5, [r4, #100]	; 0x64
 800b2a4:	f000 f86c 	bl	800b380 <__retarget_lock_init_recursive>
 800b2a8:	f7ff ff96 	bl	800b1d8 <__sfp_lock_release>
 800b2ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2b4:	6025      	str	r5, [r4, #0]
 800b2b6:	61a5      	str	r5, [r4, #24]
 800b2b8:	2208      	movs	r2, #8
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2c0:	f000 f86f 	bl	800b3a2 <memset>
 800b2c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d0:	3468      	adds	r4, #104	; 0x68
 800b2d2:	e7d9      	b.n	800b288 <__sfp+0x1c>
 800b2d4:	2104      	movs	r1, #4
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f7ff ff62 	bl	800b1a0 <__sfmoreglue>
 800b2dc:	4604      	mov	r4, r0
 800b2de:	6030      	str	r0, [r6, #0]
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d1d5      	bne.n	800b290 <__sfp+0x24>
 800b2e4:	f7ff ff78 	bl	800b1d8 <__sfp_lock_release>
 800b2e8:	230c      	movs	r3, #12
 800b2ea:	603b      	str	r3, [r7, #0]
 800b2ec:	e7ee      	b.n	800b2cc <__sfp+0x60>
 800b2ee:	bf00      	nop
 800b2f0:	0800ed3c 	.word	0x0800ed3c
 800b2f4:	ffff0001 	.word	0xffff0001

0800b2f8 <_fwalk_reent>:
 800b2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2fc:	4606      	mov	r6, r0
 800b2fe:	4688      	mov	r8, r1
 800b300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b304:	2700      	movs	r7, #0
 800b306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b30a:	f1b9 0901 	subs.w	r9, r9, #1
 800b30e:	d505      	bpl.n	800b31c <_fwalk_reent+0x24>
 800b310:	6824      	ldr	r4, [r4, #0]
 800b312:	2c00      	cmp	r4, #0
 800b314:	d1f7      	bne.n	800b306 <_fwalk_reent+0xe>
 800b316:	4638      	mov	r0, r7
 800b318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b31c:	89ab      	ldrh	r3, [r5, #12]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d907      	bls.n	800b332 <_fwalk_reent+0x3a>
 800b322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b326:	3301      	adds	r3, #1
 800b328:	d003      	beq.n	800b332 <_fwalk_reent+0x3a>
 800b32a:	4629      	mov	r1, r5
 800b32c:	4630      	mov	r0, r6
 800b32e:	47c0      	blx	r8
 800b330:	4307      	orrs	r7, r0
 800b332:	3568      	adds	r5, #104	; 0x68
 800b334:	e7e9      	b.n	800b30a <_fwalk_reent+0x12>
	...

0800b338 <__libc_init_array>:
 800b338:	b570      	push	{r4, r5, r6, lr}
 800b33a:	4d0d      	ldr	r5, [pc, #52]	; (800b370 <__libc_init_array+0x38>)
 800b33c:	4c0d      	ldr	r4, [pc, #52]	; (800b374 <__libc_init_array+0x3c>)
 800b33e:	1b64      	subs	r4, r4, r5
 800b340:	10a4      	asrs	r4, r4, #2
 800b342:	2600      	movs	r6, #0
 800b344:	42a6      	cmp	r6, r4
 800b346:	d109      	bne.n	800b35c <__libc_init_array+0x24>
 800b348:	4d0b      	ldr	r5, [pc, #44]	; (800b378 <__libc_init_array+0x40>)
 800b34a:	4c0c      	ldr	r4, [pc, #48]	; (800b37c <__libc_init_array+0x44>)
 800b34c:	f002 fe76 	bl	800e03c <_init>
 800b350:	1b64      	subs	r4, r4, r5
 800b352:	10a4      	asrs	r4, r4, #2
 800b354:	2600      	movs	r6, #0
 800b356:	42a6      	cmp	r6, r4
 800b358:	d105      	bne.n	800b366 <__libc_init_array+0x2e>
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b360:	4798      	blx	r3
 800b362:	3601      	adds	r6, #1
 800b364:	e7ee      	b.n	800b344 <__libc_init_array+0xc>
 800b366:	f855 3b04 	ldr.w	r3, [r5], #4
 800b36a:	4798      	blx	r3
 800b36c:	3601      	adds	r6, #1
 800b36e:	e7f2      	b.n	800b356 <__libc_init_array+0x1e>
 800b370:	0800f0bc 	.word	0x0800f0bc
 800b374:	0800f0bc 	.word	0x0800f0bc
 800b378:	0800f0bc 	.word	0x0800f0bc
 800b37c:	0800f0c0 	.word	0x0800f0c0

0800b380 <__retarget_lock_init_recursive>:
 800b380:	4770      	bx	lr

0800b382 <__retarget_lock_acquire_recursive>:
 800b382:	4770      	bx	lr

0800b384 <__retarget_lock_release_recursive>:
 800b384:	4770      	bx	lr

0800b386 <memcpy>:
 800b386:	440a      	add	r2, r1
 800b388:	4291      	cmp	r1, r2
 800b38a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b38e:	d100      	bne.n	800b392 <memcpy+0xc>
 800b390:	4770      	bx	lr
 800b392:	b510      	push	{r4, lr}
 800b394:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b398:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b39c:	4291      	cmp	r1, r2
 800b39e:	d1f9      	bne.n	800b394 <memcpy+0xe>
 800b3a0:	bd10      	pop	{r4, pc}

0800b3a2 <memset>:
 800b3a2:	4402      	add	r2, r0
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d100      	bne.n	800b3ac <memset+0xa>
 800b3aa:	4770      	bx	lr
 800b3ac:	f803 1b01 	strb.w	r1, [r3], #1
 800b3b0:	e7f9      	b.n	800b3a6 <memset+0x4>
	...

0800b3b4 <sbrk_aligned>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	4e0e      	ldr	r6, [pc, #56]	; (800b3f0 <sbrk_aligned+0x3c>)
 800b3b8:	460c      	mov	r4, r1
 800b3ba:	6831      	ldr	r1, [r6, #0]
 800b3bc:	4605      	mov	r5, r0
 800b3be:	b911      	cbnz	r1, 800b3c6 <sbrk_aligned+0x12>
 800b3c0:	f000 fd60 	bl	800be84 <_sbrk_r>
 800b3c4:	6030      	str	r0, [r6, #0]
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f000 fd5b 	bl	800be84 <_sbrk_r>
 800b3ce:	1c43      	adds	r3, r0, #1
 800b3d0:	d00a      	beq.n	800b3e8 <sbrk_aligned+0x34>
 800b3d2:	1cc4      	adds	r4, r0, #3
 800b3d4:	f024 0403 	bic.w	r4, r4, #3
 800b3d8:	42a0      	cmp	r0, r4
 800b3da:	d007      	beq.n	800b3ec <sbrk_aligned+0x38>
 800b3dc:	1a21      	subs	r1, r4, r0
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f000 fd50 	bl	800be84 <_sbrk_r>
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d101      	bne.n	800b3ec <sbrk_aligned+0x38>
 800b3e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}
 800b3f0:	200052e8 	.word	0x200052e8

0800b3f4 <_malloc_r>:
 800b3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f8:	1ccd      	adds	r5, r1, #3
 800b3fa:	f025 0503 	bic.w	r5, r5, #3
 800b3fe:	3508      	adds	r5, #8
 800b400:	2d0c      	cmp	r5, #12
 800b402:	bf38      	it	cc
 800b404:	250c      	movcc	r5, #12
 800b406:	2d00      	cmp	r5, #0
 800b408:	4607      	mov	r7, r0
 800b40a:	db01      	blt.n	800b410 <_malloc_r+0x1c>
 800b40c:	42a9      	cmp	r1, r5
 800b40e:	d905      	bls.n	800b41c <_malloc_r+0x28>
 800b410:	230c      	movs	r3, #12
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	2600      	movs	r6, #0
 800b416:	4630      	mov	r0, r6
 800b418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b41c:	4e2e      	ldr	r6, [pc, #184]	; (800b4d8 <_malloc_r+0xe4>)
 800b41e:	f001 fd21 	bl	800ce64 <__malloc_lock>
 800b422:	6833      	ldr	r3, [r6, #0]
 800b424:	461c      	mov	r4, r3
 800b426:	bb34      	cbnz	r4, 800b476 <_malloc_r+0x82>
 800b428:	4629      	mov	r1, r5
 800b42a:	4638      	mov	r0, r7
 800b42c:	f7ff ffc2 	bl	800b3b4 <sbrk_aligned>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	4604      	mov	r4, r0
 800b434:	d14d      	bne.n	800b4d2 <_malloc_r+0xde>
 800b436:	6834      	ldr	r4, [r6, #0]
 800b438:	4626      	mov	r6, r4
 800b43a:	2e00      	cmp	r6, #0
 800b43c:	d140      	bne.n	800b4c0 <_malloc_r+0xcc>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	4631      	mov	r1, r6
 800b442:	4638      	mov	r0, r7
 800b444:	eb04 0803 	add.w	r8, r4, r3
 800b448:	f000 fd1c 	bl	800be84 <_sbrk_r>
 800b44c:	4580      	cmp	r8, r0
 800b44e:	d13a      	bne.n	800b4c6 <_malloc_r+0xd2>
 800b450:	6821      	ldr	r1, [r4, #0]
 800b452:	3503      	adds	r5, #3
 800b454:	1a6d      	subs	r5, r5, r1
 800b456:	f025 0503 	bic.w	r5, r5, #3
 800b45a:	3508      	adds	r5, #8
 800b45c:	2d0c      	cmp	r5, #12
 800b45e:	bf38      	it	cc
 800b460:	250c      	movcc	r5, #12
 800b462:	4629      	mov	r1, r5
 800b464:	4638      	mov	r0, r7
 800b466:	f7ff ffa5 	bl	800b3b4 <sbrk_aligned>
 800b46a:	3001      	adds	r0, #1
 800b46c:	d02b      	beq.n	800b4c6 <_malloc_r+0xd2>
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	442b      	add	r3, r5
 800b472:	6023      	str	r3, [r4, #0]
 800b474:	e00e      	b.n	800b494 <_malloc_r+0xa0>
 800b476:	6822      	ldr	r2, [r4, #0]
 800b478:	1b52      	subs	r2, r2, r5
 800b47a:	d41e      	bmi.n	800b4ba <_malloc_r+0xc6>
 800b47c:	2a0b      	cmp	r2, #11
 800b47e:	d916      	bls.n	800b4ae <_malloc_r+0xba>
 800b480:	1961      	adds	r1, r4, r5
 800b482:	42a3      	cmp	r3, r4
 800b484:	6025      	str	r5, [r4, #0]
 800b486:	bf18      	it	ne
 800b488:	6059      	strne	r1, [r3, #4]
 800b48a:	6863      	ldr	r3, [r4, #4]
 800b48c:	bf08      	it	eq
 800b48e:	6031      	streq	r1, [r6, #0]
 800b490:	5162      	str	r2, [r4, r5]
 800b492:	604b      	str	r3, [r1, #4]
 800b494:	4638      	mov	r0, r7
 800b496:	f104 060b 	add.w	r6, r4, #11
 800b49a:	f001 fce9 	bl	800ce70 <__malloc_unlock>
 800b49e:	f026 0607 	bic.w	r6, r6, #7
 800b4a2:	1d23      	adds	r3, r4, #4
 800b4a4:	1af2      	subs	r2, r6, r3
 800b4a6:	d0b6      	beq.n	800b416 <_malloc_r+0x22>
 800b4a8:	1b9b      	subs	r3, r3, r6
 800b4aa:	50a3      	str	r3, [r4, r2]
 800b4ac:	e7b3      	b.n	800b416 <_malloc_r+0x22>
 800b4ae:	6862      	ldr	r2, [r4, #4]
 800b4b0:	42a3      	cmp	r3, r4
 800b4b2:	bf0c      	ite	eq
 800b4b4:	6032      	streq	r2, [r6, #0]
 800b4b6:	605a      	strne	r2, [r3, #4]
 800b4b8:	e7ec      	b.n	800b494 <_malloc_r+0xa0>
 800b4ba:	4623      	mov	r3, r4
 800b4bc:	6864      	ldr	r4, [r4, #4]
 800b4be:	e7b2      	b.n	800b426 <_malloc_r+0x32>
 800b4c0:	4634      	mov	r4, r6
 800b4c2:	6876      	ldr	r6, [r6, #4]
 800b4c4:	e7b9      	b.n	800b43a <_malloc_r+0x46>
 800b4c6:	230c      	movs	r3, #12
 800b4c8:	603b      	str	r3, [r7, #0]
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	f001 fcd0 	bl	800ce70 <__malloc_unlock>
 800b4d0:	e7a1      	b.n	800b416 <_malloc_r+0x22>
 800b4d2:	6025      	str	r5, [r4, #0]
 800b4d4:	e7de      	b.n	800b494 <_malloc_r+0xa0>
 800b4d6:	bf00      	nop
 800b4d8:	200052e4 	.word	0x200052e4

0800b4dc <__cvt>:
 800b4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e0:	ec55 4b10 	vmov	r4, r5, d0
 800b4e4:	2d00      	cmp	r5, #0
 800b4e6:	460e      	mov	r6, r1
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	462b      	mov	r3, r5
 800b4ec:	bfbb      	ittet	lt
 800b4ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b4f2:	461d      	movlt	r5, r3
 800b4f4:	2300      	movge	r3, #0
 800b4f6:	232d      	movlt	r3, #45	; 0x2d
 800b4f8:	700b      	strb	r3, [r1, #0]
 800b4fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b500:	4691      	mov	r9, r2
 800b502:	f023 0820 	bic.w	r8, r3, #32
 800b506:	bfbc      	itt	lt
 800b508:	4622      	movlt	r2, r4
 800b50a:	4614      	movlt	r4, r2
 800b50c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b510:	d005      	beq.n	800b51e <__cvt+0x42>
 800b512:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b516:	d100      	bne.n	800b51a <__cvt+0x3e>
 800b518:	3601      	adds	r6, #1
 800b51a:	2102      	movs	r1, #2
 800b51c:	e000      	b.n	800b520 <__cvt+0x44>
 800b51e:	2103      	movs	r1, #3
 800b520:	ab03      	add	r3, sp, #12
 800b522:	9301      	str	r3, [sp, #4]
 800b524:	ab02      	add	r3, sp, #8
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	ec45 4b10 	vmov	d0, r4, r5
 800b52c:	4653      	mov	r3, sl
 800b52e:	4632      	mov	r2, r6
 800b530:	f000 fdca 	bl	800c0c8 <_dtoa_r>
 800b534:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b538:	4607      	mov	r7, r0
 800b53a:	d102      	bne.n	800b542 <__cvt+0x66>
 800b53c:	f019 0f01 	tst.w	r9, #1
 800b540:	d022      	beq.n	800b588 <__cvt+0xac>
 800b542:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b546:	eb07 0906 	add.w	r9, r7, r6
 800b54a:	d110      	bne.n	800b56e <__cvt+0x92>
 800b54c:	783b      	ldrb	r3, [r7, #0]
 800b54e:	2b30      	cmp	r3, #48	; 0x30
 800b550:	d10a      	bne.n	800b568 <__cvt+0x8c>
 800b552:	2200      	movs	r2, #0
 800b554:	2300      	movs	r3, #0
 800b556:	4620      	mov	r0, r4
 800b558:	4629      	mov	r1, r5
 800b55a:	f7f5 fab5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b55e:	b918      	cbnz	r0, 800b568 <__cvt+0x8c>
 800b560:	f1c6 0601 	rsb	r6, r6, #1
 800b564:	f8ca 6000 	str.w	r6, [sl]
 800b568:	f8da 3000 	ldr.w	r3, [sl]
 800b56c:	4499      	add	r9, r3
 800b56e:	2200      	movs	r2, #0
 800b570:	2300      	movs	r3, #0
 800b572:	4620      	mov	r0, r4
 800b574:	4629      	mov	r1, r5
 800b576:	f7f5 faa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b57a:	b108      	cbz	r0, 800b580 <__cvt+0xa4>
 800b57c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b580:	2230      	movs	r2, #48	; 0x30
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	454b      	cmp	r3, r9
 800b586:	d307      	bcc.n	800b598 <__cvt+0xbc>
 800b588:	9b03      	ldr	r3, [sp, #12]
 800b58a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b58c:	1bdb      	subs	r3, r3, r7
 800b58e:	4638      	mov	r0, r7
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	b004      	add	sp, #16
 800b594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b598:	1c59      	adds	r1, r3, #1
 800b59a:	9103      	str	r1, [sp, #12]
 800b59c:	701a      	strb	r2, [r3, #0]
 800b59e:	e7f0      	b.n	800b582 <__cvt+0xa6>

0800b5a0 <__exponent>:
 800b5a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	bfb8      	it	lt
 800b5a8:	4249      	neglt	r1, r1
 800b5aa:	f803 2b02 	strb.w	r2, [r3], #2
 800b5ae:	bfb4      	ite	lt
 800b5b0:	222d      	movlt	r2, #45	; 0x2d
 800b5b2:	222b      	movge	r2, #43	; 0x2b
 800b5b4:	2909      	cmp	r1, #9
 800b5b6:	7042      	strb	r2, [r0, #1]
 800b5b8:	dd2a      	ble.n	800b610 <__exponent+0x70>
 800b5ba:	f10d 0407 	add.w	r4, sp, #7
 800b5be:	46a4      	mov	ip, r4
 800b5c0:	270a      	movs	r7, #10
 800b5c2:	46a6      	mov	lr, r4
 800b5c4:	460a      	mov	r2, r1
 800b5c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800b5ca:	fb07 1516 	mls	r5, r7, r6, r1
 800b5ce:	3530      	adds	r5, #48	; 0x30
 800b5d0:	2a63      	cmp	r2, #99	; 0x63
 800b5d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b5da:	4631      	mov	r1, r6
 800b5dc:	dcf1      	bgt.n	800b5c2 <__exponent+0x22>
 800b5de:	3130      	adds	r1, #48	; 0x30
 800b5e0:	f1ae 0502 	sub.w	r5, lr, #2
 800b5e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5e8:	1c44      	adds	r4, r0, #1
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	4561      	cmp	r1, ip
 800b5ee:	d30a      	bcc.n	800b606 <__exponent+0x66>
 800b5f0:	f10d 0209 	add.w	r2, sp, #9
 800b5f4:	eba2 020e 	sub.w	r2, r2, lr
 800b5f8:	4565      	cmp	r5, ip
 800b5fa:	bf88      	it	hi
 800b5fc:	2200      	movhi	r2, #0
 800b5fe:	4413      	add	r3, r2
 800b600:	1a18      	subs	r0, r3, r0
 800b602:	b003      	add	sp, #12
 800b604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b60a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b60e:	e7ed      	b.n	800b5ec <__exponent+0x4c>
 800b610:	2330      	movs	r3, #48	; 0x30
 800b612:	3130      	adds	r1, #48	; 0x30
 800b614:	7083      	strb	r3, [r0, #2]
 800b616:	70c1      	strb	r1, [r0, #3]
 800b618:	1d03      	adds	r3, r0, #4
 800b61a:	e7f1      	b.n	800b600 <__exponent+0x60>

0800b61c <_printf_float>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	ed2d 8b02 	vpush	{d8}
 800b624:	b08d      	sub	sp, #52	; 0x34
 800b626:	460c      	mov	r4, r1
 800b628:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b62c:	4616      	mov	r6, r2
 800b62e:	461f      	mov	r7, r3
 800b630:	4605      	mov	r5, r0
 800b632:	f001 fbf9 	bl	800ce28 <_localeconv_r>
 800b636:	f8d0 a000 	ldr.w	sl, [r0]
 800b63a:	4650      	mov	r0, sl
 800b63c:	f7f4 fdc8 	bl	80001d0 <strlen>
 800b640:	2300      	movs	r3, #0
 800b642:	930a      	str	r3, [sp, #40]	; 0x28
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	9305      	str	r3, [sp, #20]
 800b648:	f8d8 3000 	ldr.w	r3, [r8]
 800b64c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b650:	3307      	adds	r3, #7
 800b652:	f023 0307 	bic.w	r3, r3, #7
 800b656:	f103 0208 	add.w	r2, r3, #8
 800b65a:	f8c8 2000 	str.w	r2, [r8]
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b666:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b66a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b66e:	9307      	str	r3, [sp, #28]
 800b670:	f8cd 8018 	str.w	r8, [sp, #24]
 800b674:	ee08 0a10 	vmov	s16, r0
 800b678:	4b9f      	ldr	r3, [pc, #636]	; (800b8f8 <_printf_float+0x2dc>)
 800b67a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b67e:	f04f 32ff 	mov.w	r2, #4294967295
 800b682:	f7f5 fa53 	bl	8000b2c <__aeabi_dcmpun>
 800b686:	bb88      	cbnz	r0, 800b6ec <_printf_float+0xd0>
 800b688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b68c:	4b9a      	ldr	r3, [pc, #616]	; (800b8f8 <_printf_float+0x2dc>)
 800b68e:	f04f 32ff 	mov.w	r2, #4294967295
 800b692:	f7f5 fa2d 	bl	8000af0 <__aeabi_dcmple>
 800b696:	bb48      	cbnz	r0, 800b6ec <_printf_float+0xd0>
 800b698:	2200      	movs	r2, #0
 800b69a:	2300      	movs	r3, #0
 800b69c:	4640      	mov	r0, r8
 800b69e:	4649      	mov	r1, r9
 800b6a0:	f7f5 fa1c 	bl	8000adc <__aeabi_dcmplt>
 800b6a4:	b110      	cbz	r0, 800b6ac <_printf_float+0x90>
 800b6a6:	232d      	movs	r3, #45	; 0x2d
 800b6a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ac:	4b93      	ldr	r3, [pc, #588]	; (800b8fc <_printf_float+0x2e0>)
 800b6ae:	4894      	ldr	r0, [pc, #592]	; (800b900 <_printf_float+0x2e4>)
 800b6b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b6b4:	bf94      	ite	ls
 800b6b6:	4698      	movls	r8, r3
 800b6b8:	4680      	movhi	r8, r0
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	6123      	str	r3, [r4, #16]
 800b6be:	9b05      	ldr	r3, [sp, #20]
 800b6c0:	f023 0204 	bic.w	r2, r3, #4
 800b6c4:	6022      	str	r2, [r4, #0]
 800b6c6:	f04f 0900 	mov.w	r9, #0
 800b6ca:	9700      	str	r7, [sp, #0]
 800b6cc:	4633      	mov	r3, r6
 800b6ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f000 f9d8 	bl	800ba88 <_printf_common>
 800b6d8:	3001      	adds	r0, #1
 800b6da:	f040 8090 	bne.w	800b7fe <_printf_float+0x1e2>
 800b6de:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e2:	b00d      	add	sp, #52	; 0x34
 800b6e4:	ecbd 8b02 	vpop	{d8}
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	4640      	mov	r0, r8
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	f7f5 fa1a 	bl	8000b2c <__aeabi_dcmpun>
 800b6f8:	b140      	cbz	r0, 800b70c <_printf_float+0xf0>
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	bfbc      	itt	lt
 800b700:	232d      	movlt	r3, #45	; 0x2d
 800b702:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b706:	487f      	ldr	r0, [pc, #508]	; (800b904 <_printf_float+0x2e8>)
 800b708:	4b7f      	ldr	r3, [pc, #508]	; (800b908 <_printf_float+0x2ec>)
 800b70a:	e7d1      	b.n	800b6b0 <_printf_float+0x94>
 800b70c:	6863      	ldr	r3, [r4, #4]
 800b70e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b712:	9206      	str	r2, [sp, #24]
 800b714:	1c5a      	adds	r2, r3, #1
 800b716:	d13f      	bne.n	800b798 <_printf_float+0x17c>
 800b718:	2306      	movs	r3, #6
 800b71a:	6063      	str	r3, [r4, #4]
 800b71c:	9b05      	ldr	r3, [sp, #20]
 800b71e:	6861      	ldr	r1, [r4, #4]
 800b720:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b724:	2300      	movs	r3, #0
 800b726:	9303      	str	r3, [sp, #12]
 800b728:	ab0a      	add	r3, sp, #40	; 0x28
 800b72a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b72e:	ab09      	add	r3, sp, #36	; 0x24
 800b730:	ec49 8b10 	vmov	d0, r8, r9
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	6022      	str	r2, [r4, #0]
 800b738:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b73c:	4628      	mov	r0, r5
 800b73e:	f7ff fecd 	bl	800b4dc <__cvt>
 800b742:	9b06      	ldr	r3, [sp, #24]
 800b744:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b746:	2b47      	cmp	r3, #71	; 0x47
 800b748:	4680      	mov	r8, r0
 800b74a:	d108      	bne.n	800b75e <_printf_float+0x142>
 800b74c:	1cc8      	adds	r0, r1, #3
 800b74e:	db02      	blt.n	800b756 <_printf_float+0x13a>
 800b750:	6863      	ldr	r3, [r4, #4]
 800b752:	4299      	cmp	r1, r3
 800b754:	dd41      	ble.n	800b7da <_printf_float+0x1be>
 800b756:	f1ab 0b02 	sub.w	fp, fp, #2
 800b75a:	fa5f fb8b 	uxtb.w	fp, fp
 800b75e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b762:	d820      	bhi.n	800b7a6 <_printf_float+0x18a>
 800b764:	3901      	subs	r1, #1
 800b766:	465a      	mov	r2, fp
 800b768:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b76c:	9109      	str	r1, [sp, #36]	; 0x24
 800b76e:	f7ff ff17 	bl	800b5a0 <__exponent>
 800b772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b774:	1813      	adds	r3, r2, r0
 800b776:	2a01      	cmp	r2, #1
 800b778:	4681      	mov	r9, r0
 800b77a:	6123      	str	r3, [r4, #16]
 800b77c:	dc02      	bgt.n	800b784 <_printf_float+0x168>
 800b77e:	6822      	ldr	r2, [r4, #0]
 800b780:	07d2      	lsls	r2, r2, #31
 800b782:	d501      	bpl.n	800b788 <_printf_float+0x16c>
 800b784:	3301      	adds	r3, #1
 800b786:	6123      	str	r3, [r4, #16]
 800b788:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d09c      	beq.n	800b6ca <_printf_float+0xae>
 800b790:	232d      	movs	r3, #45	; 0x2d
 800b792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b796:	e798      	b.n	800b6ca <_printf_float+0xae>
 800b798:	9a06      	ldr	r2, [sp, #24]
 800b79a:	2a47      	cmp	r2, #71	; 0x47
 800b79c:	d1be      	bne.n	800b71c <_printf_float+0x100>
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1bc      	bne.n	800b71c <_printf_float+0x100>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e7b9      	b.n	800b71a <_printf_float+0xfe>
 800b7a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b7aa:	d118      	bne.n	800b7de <_printf_float+0x1c2>
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	6863      	ldr	r3, [r4, #4]
 800b7b0:	dd0b      	ble.n	800b7ca <_printf_float+0x1ae>
 800b7b2:	6121      	str	r1, [r4, #16]
 800b7b4:	b913      	cbnz	r3, 800b7bc <_printf_float+0x1a0>
 800b7b6:	6822      	ldr	r2, [r4, #0]
 800b7b8:	07d0      	lsls	r0, r2, #31
 800b7ba:	d502      	bpl.n	800b7c2 <_printf_float+0x1a6>
 800b7bc:	3301      	adds	r3, #1
 800b7be:	440b      	add	r3, r1
 800b7c0:	6123      	str	r3, [r4, #16]
 800b7c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b7c4:	f04f 0900 	mov.w	r9, #0
 800b7c8:	e7de      	b.n	800b788 <_printf_float+0x16c>
 800b7ca:	b913      	cbnz	r3, 800b7d2 <_printf_float+0x1b6>
 800b7cc:	6822      	ldr	r2, [r4, #0]
 800b7ce:	07d2      	lsls	r2, r2, #31
 800b7d0:	d501      	bpl.n	800b7d6 <_printf_float+0x1ba>
 800b7d2:	3302      	adds	r3, #2
 800b7d4:	e7f4      	b.n	800b7c0 <_printf_float+0x1a4>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e7f2      	b.n	800b7c0 <_printf_float+0x1a4>
 800b7da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7e0:	4299      	cmp	r1, r3
 800b7e2:	db05      	blt.n	800b7f0 <_printf_float+0x1d4>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	6121      	str	r1, [r4, #16]
 800b7e8:	07d8      	lsls	r0, r3, #31
 800b7ea:	d5ea      	bpl.n	800b7c2 <_printf_float+0x1a6>
 800b7ec:	1c4b      	adds	r3, r1, #1
 800b7ee:	e7e7      	b.n	800b7c0 <_printf_float+0x1a4>
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	bfd4      	ite	le
 800b7f4:	f1c1 0202 	rsble	r2, r1, #2
 800b7f8:	2201      	movgt	r2, #1
 800b7fa:	4413      	add	r3, r2
 800b7fc:	e7e0      	b.n	800b7c0 <_printf_float+0x1a4>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	055a      	lsls	r2, r3, #21
 800b802:	d407      	bmi.n	800b814 <_printf_float+0x1f8>
 800b804:	6923      	ldr	r3, [r4, #16]
 800b806:	4642      	mov	r2, r8
 800b808:	4631      	mov	r1, r6
 800b80a:	4628      	mov	r0, r5
 800b80c:	47b8      	blx	r7
 800b80e:	3001      	adds	r0, #1
 800b810:	d12c      	bne.n	800b86c <_printf_float+0x250>
 800b812:	e764      	b.n	800b6de <_printf_float+0xc2>
 800b814:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b818:	f240 80e0 	bls.w	800b9dc <_printf_float+0x3c0>
 800b81c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b820:	2200      	movs	r2, #0
 800b822:	2300      	movs	r3, #0
 800b824:	f7f5 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d034      	beq.n	800b896 <_printf_float+0x27a>
 800b82c:	4a37      	ldr	r2, [pc, #220]	; (800b90c <_printf_float+0x2f0>)
 800b82e:	2301      	movs	r3, #1
 800b830:	4631      	mov	r1, r6
 800b832:	4628      	mov	r0, r5
 800b834:	47b8      	blx	r7
 800b836:	3001      	adds	r0, #1
 800b838:	f43f af51 	beq.w	800b6de <_printf_float+0xc2>
 800b83c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b840:	429a      	cmp	r2, r3
 800b842:	db02      	blt.n	800b84a <_printf_float+0x22e>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	07d8      	lsls	r0, r3, #31
 800b848:	d510      	bpl.n	800b86c <_printf_float+0x250>
 800b84a:	ee18 3a10 	vmov	r3, s16
 800b84e:	4652      	mov	r2, sl
 800b850:	4631      	mov	r1, r6
 800b852:	4628      	mov	r0, r5
 800b854:	47b8      	blx	r7
 800b856:	3001      	adds	r0, #1
 800b858:	f43f af41 	beq.w	800b6de <_printf_float+0xc2>
 800b85c:	f04f 0800 	mov.w	r8, #0
 800b860:	f104 091a 	add.w	r9, r4, #26
 800b864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b866:	3b01      	subs	r3, #1
 800b868:	4543      	cmp	r3, r8
 800b86a:	dc09      	bgt.n	800b880 <_printf_float+0x264>
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	079b      	lsls	r3, r3, #30
 800b870:	f100 8105 	bmi.w	800ba7e <_printf_float+0x462>
 800b874:	68e0      	ldr	r0, [r4, #12]
 800b876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b878:	4298      	cmp	r0, r3
 800b87a:	bfb8      	it	lt
 800b87c:	4618      	movlt	r0, r3
 800b87e:	e730      	b.n	800b6e2 <_printf_float+0xc6>
 800b880:	2301      	movs	r3, #1
 800b882:	464a      	mov	r2, r9
 800b884:	4631      	mov	r1, r6
 800b886:	4628      	mov	r0, r5
 800b888:	47b8      	blx	r7
 800b88a:	3001      	adds	r0, #1
 800b88c:	f43f af27 	beq.w	800b6de <_printf_float+0xc2>
 800b890:	f108 0801 	add.w	r8, r8, #1
 800b894:	e7e6      	b.n	800b864 <_printf_float+0x248>
 800b896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dc39      	bgt.n	800b910 <_printf_float+0x2f4>
 800b89c:	4a1b      	ldr	r2, [pc, #108]	; (800b90c <_printf_float+0x2f0>)
 800b89e:	2301      	movs	r3, #1
 800b8a0:	4631      	mov	r1, r6
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	47b8      	blx	r7
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	f43f af19 	beq.w	800b6de <_printf_float+0xc2>
 800b8ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	d102      	bne.n	800b8ba <_printf_float+0x29e>
 800b8b4:	6823      	ldr	r3, [r4, #0]
 800b8b6:	07d9      	lsls	r1, r3, #31
 800b8b8:	d5d8      	bpl.n	800b86c <_printf_float+0x250>
 800b8ba:	ee18 3a10 	vmov	r3, s16
 800b8be:	4652      	mov	r2, sl
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	47b8      	blx	r7
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	f43f af09 	beq.w	800b6de <_printf_float+0xc2>
 800b8cc:	f04f 0900 	mov.w	r9, #0
 800b8d0:	f104 0a1a 	add.w	sl, r4, #26
 800b8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d6:	425b      	negs	r3, r3
 800b8d8:	454b      	cmp	r3, r9
 800b8da:	dc01      	bgt.n	800b8e0 <_printf_float+0x2c4>
 800b8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8de:	e792      	b.n	800b806 <_printf_float+0x1ea>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	4652      	mov	r2, sl
 800b8e4:	4631      	mov	r1, r6
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	47b8      	blx	r7
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	f43f aef7 	beq.w	800b6de <_printf_float+0xc2>
 800b8f0:	f109 0901 	add.w	r9, r9, #1
 800b8f4:	e7ee      	b.n	800b8d4 <_printf_float+0x2b8>
 800b8f6:	bf00      	nop
 800b8f8:	7fefffff 	.word	0x7fefffff
 800b8fc:	0800ed40 	.word	0x0800ed40
 800b900:	0800ed44 	.word	0x0800ed44
 800b904:	0800ed4c 	.word	0x0800ed4c
 800b908:	0800ed48 	.word	0x0800ed48
 800b90c:	0800ed50 	.word	0x0800ed50
 800b910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b912:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b914:	429a      	cmp	r2, r3
 800b916:	bfa8      	it	ge
 800b918:	461a      	movge	r2, r3
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	4691      	mov	r9, r2
 800b91e:	dc37      	bgt.n	800b990 <_printf_float+0x374>
 800b920:	f04f 0b00 	mov.w	fp, #0
 800b924:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b928:	f104 021a 	add.w	r2, r4, #26
 800b92c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b92e:	9305      	str	r3, [sp, #20]
 800b930:	eba3 0309 	sub.w	r3, r3, r9
 800b934:	455b      	cmp	r3, fp
 800b936:	dc33      	bgt.n	800b9a0 <_printf_float+0x384>
 800b938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b93c:	429a      	cmp	r2, r3
 800b93e:	db3b      	blt.n	800b9b8 <_printf_float+0x39c>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	07da      	lsls	r2, r3, #31
 800b944:	d438      	bmi.n	800b9b8 <_printf_float+0x39c>
 800b946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b948:	9a05      	ldr	r2, [sp, #20]
 800b94a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b94c:	1a9a      	subs	r2, r3, r2
 800b94e:	eba3 0901 	sub.w	r9, r3, r1
 800b952:	4591      	cmp	r9, r2
 800b954:	bfa8      	it	ge
 800b956:	4691      	movge	r9, r2
 800b958:	f1b9 0f00 	cmp.w	r9, #0
 800b95c:	dc35      	bgt.n	800b9ca <_printf_float+0x3ae>
 800b95e:	f04f 0800 	mov.w	r8, #0
 800b962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b966:	f104 0a1a 	add.w	sl, r4, #26
 800b96a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b96e:	1a9b      	subs	r3, r3, r2
 800b970:	eba3 0309 	sub.w	r3, r3, r9
 800b974:	4543      	cmp	r3, r8
 800b976:	f77f af79 	ble.w	800b86c <_printf_float+0x250>
 800b97a:	2301      	movs	r3, #1
 800b97c:	4652      	mov	r2, sl
 800b97e:	4631      	mov	r1, r6
 800b980:	4628      	mov	r0, r5
 800b982:	47b8      	blx	r7
 800b984:	3001      	adds	r0, #1
 800b986:	f43f aeaa 	beq.w	800b6de <_printf_float+0xc2>
 800b98a:	f108 0801 	add.w	r8, r8, #1
 800b98e:	e7ec      	b.n	800b96a <_printf_float+0x34e>
 800b990:	4613      	mov	r3, r2
 800b992:	4631      	mov	r1, r6
 800b994:	4642      	mov	r2, r8
 800b996:	4628      	mov	r0, r5
 800b998:	47b8      	blx	r7
 800b99a:	3001      	adds	r0, #1
 800b99c:	d1c0      	bne.n	800b920 <_printf_float+0x304>
 800b99e:	e69e      	b.n	800b6de <_printf_float+0xc2>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	4631      	mov	r1, r6
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	9205      	str	r2, [sp, #20]
 800b9a8:	47b8      	blx	r7
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	f43f ae97 	beq.w	800b6de <_printf_float+0xc2>
 800b9b0:	9a05      	ldr	r2, [sp, #20]
 800b9b2:	f10b 0b01 	add.w	fp, fp, #1
 800b9b6:	e7b9      	b.n	800b92c <_printf_float+0x310>
 800b9b8:	ee18 3a10 	vmov	r3, s16
 800b9bc:	4652      	mov	r2, sl
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	47b8      	blx	r7
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	d1be      	bne.n	800b946 <_printf_float+0x32a>
 800b9c8:	e689      	b.n	800b6de <_printf_float+0xc2>
 800b9ca:	9a05      	ldr	r2, [sp, #20]
 800b9cc:	464b      	mov	r3, r9
 800b9ce:	4442      	add	r2, r8
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	47b8      	blx	r7
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	d1c1      	bne.n	800b95e <_printf_float+0x342>
 800b9da:	e680      	b.n	800b6de <_printf_float+0xc2>
 800b9dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9de:	2a01      	cmp	r2, #1
 800b9e0:	dc01      	bgt.n	800b9e6 <_printf_float+0x3ca>
 800b9e2:	07db      	lsls	r3, r3, #31
 800b9e4:	d538      	bpl.n	800ba58 <_printf_float+0x43c>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	4642      	mov	r2, r8
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	47b8      	blx	r7
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	f43f ae74 	beq.w	800b6de <_printf_float+0xc2>
 800b9f6:	ee18 3a10 	vmov	r3, s16
 800b9fa:	4652      	mov	r2, sl
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4628      	mov	r0, r5
 800ba00:	47b8      	blx	r7
 800ba02:	3001      	adds	r0, #1
 800ba04:	f43f ae6b 	beq.w	800b6de <_printf_float+0xc2>
 800ba08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f7f5 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba14:	b9d8      	cbnz	r0, 800ba4e <_printf_float+0x432>
 800ba16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba18:	f108 0201 	add.w	r2, r8, #1
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	4631      	mov	r1, r6
 800ba20:	4628      	mov	r0, r5
 800ba22:	47b8      	blx	r7
 800ba24:	3001      	adds	r0, #1
 800ba26:	d10e      	bne.n	800ba46 <_printf_float+0x42a>
 800ba28:	e659      	b.n	800b6de <_printf_float+0xc2>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	4652      	mov	r2, sl
 800ba2e:	4631      	mov	r1, r6
 800ba30:	4628      	mov	r0, r5
 800ba32:	47b8      	blx	r7
 800ba34:	3001      	adds	r0, #1
 800ba36:	f43f ae52 	beq.w	800b6de <_printf_float+0xc2>
 800ba3a:	f108 0801 	add.w	r8, r8, #1
 800ba3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba40:	3b01      	subs	r3, #1
 800ba42:	4543      	cmp	r3, r8
 800ba44:	dcf1      	bgt.n	800ba2a <_printf_float+0x40e>
 800ba46:	464b      	mov	r3, r9
 800ba48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba4c:	e6dc      	b.n	800b808 <_printf_float+0x1ec>
 800ba4e:	f04f 0800 	mov.w	r8, #0
 800ba52:	f104 0a1a 	add.w	sl, r4, #26
 800ba56:	e7f2      	b.n	800ba3e <_printf_float+0x422>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	4642      	mov	r2, r8
 800ba5c:	e7df      	b.n	800ba1e <_printf_float+0x402>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	464a      	mov	r2, r9
 800ba62:	4631      	mov	r1, r6
 800ba64:	4628      	mov	r0, r5
 800ba66:	47b8      	blx	r7
 800ba68:	3001      	adds	r0, #1
 800ba6a:	f43f ae38 	beq.w	800b6de <_printf_float+0xc2>
 800ba6e:	f108 0801 	add.w	r8, r8, #1
 800ba72:	68e3      	ldr	r3, [r4, #12]
 800ba74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba76:	1a5b      	subs	r3, r3, r1
 800ba78:	4543      	cmp	r3, r8
 800ba7a:	dcf0      	bgt.n	800ba5e <_printf_float+0x442>
 800ba7c:	e6fa      	b.n	800b874 <_printf_float+0x258>
 800ba7e:	f04f 0800 	mov.w	r8, #0
 800ba82:	f104 0919 	add.w	r9, r4, #25
 800ba86:	e7f4      	b.n	800ba72 <_printf_float+0x456>

0800ba88 <_printf_common>:
 800ba88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba8c:	4616      	mov	r6, r2
 800ba8e:	4699      	mov	r9, r3
 800ba90:	688a      	ldr	r2, [r1, #8]
 800ba92:	690b      	ldr	r3, [r1, #16]
 800ba94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	bfb8      	it	lt
 800ba9c:	4613      	movlt	r3, r2
 800ba9e:	6033      	str	r3, [r6, #0]
 800baa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baa4:	4607      	mov	r7, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	b10a      	cbz	r2, 800baae <_printf_common+0x26>
 800baaa:	3301      	adds	r3, #1
 800baac:	6033      	str	r3, [r6, #0]
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	0699      	lsls	r1, r3, #26
 800bab2:	bf42      	ittt	mi
 800bab4:	6833      	ldrmi	r3, [r6, #0]
 800bab6:	3302      	addmi	r3, #2
 800bab8:	6033      	strmi	r3, [r6, #0]
 800baba:	6825      	ldr	r5, [r4, #0]
 800babc:	f015 0506 	ands.w	r5, r5, #6
 800bac0:	d106      	bne.n	800bad0 <_printf_common+0x48>
 800bac2:	f104 0a19 	add.w	sl, r4, #25
 800bac6:	68e3      	ldr	r3, [r4, #12]
 800bac8:	6832      	ldr	r2, [r6, #0]
 800baca:	1a9b      	subs	r3, r3, r2
 800bacc:	42ab      	cmp	r3, r5
 800bace:	dc26      	bgt.n	800bb1e <_printf_common+0x96>
 800bad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bad4:	1e13      	subs	r3, r2, #0
 800bad6:	6822      	ldr	r2, [r4, #0]
 800bad8:	bf18      	it	ne
 800bada:	2301      	movne	r3, #1
 800badc:	0692      	lsls	r2, r2, #26
 800bade:	d42b      	bmi.n	800bb38 <_printf_common+0xb0>
 800bae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bae4:	4649      	mov	r1, r9
 800bae6:	4638      	mov	r0, r7
 800bae8:	47c0      	blx	r8
 800baea:	3001      	adds	r0, #1
 800baec:	d01e      	beq.n	800bb2c <_printf_common+0xa4>
 800baee:	6823      	ldr	r3, [r4, #0]
 800baf0:	68e5      	ldr	r5, [r4, #12]
 800baf2:	6832      	ldr	r2, [r6, #0]
 800baf4:	f003 0306 	and.w	r3, r3, #6
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	bf08      	it	eq
 800bafc:	1aad      	subeq	r5, r5, r2
 800bafe:	68a3      	ldr	r3, [r4, #8]
 800bb00:	6922      	ldr	r2, [r4, #16]
 800bb02:	bf0c      	ite	eq
 800bb04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb08:	2500      	movne	r5, #0
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	bfc4      	itt	gt
 800bb0e:	1a9b      	subgt	r3, r3, r2
 800bb10:	18ed      	addgt	r5, r5, r3
 800bb12:	2600      	movs	r6, #0
 800bb14:	341a      	adds	r4, #26
 800bb16:	42b5      	cmp	r5, r6
 800bb18:	d11a      	bne.n	800bb50 <_printf_common+0xc8>
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	e008      	b.n	800bb30 <_printf_common+0xa8>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4652      	mov	r2, sl
 800bb22:	4649      	mov	r1, r9
 800bb24:	4638      	mov	r0, r7
 800bb26:	47c0      	blx	r8
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d103      	bne.n	800bb34 <_printf_common+0xac>
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb34:	3501      	adds	r5, #1
 800bb36:	e7c6      	b.n	800bac6 <_printf_common+0x3e>
 800bb38:	18e1      	adds	r1, r4, r3
 800bb3a:	1c5a      	adds	r2, r3, #1
 800bb3c:	2030      	movs	r0, #48	; 0x30
 800bb3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb42:	4422      	add	r2, r4
 800bb44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb4c:	3302      	adds	r3, #2
 800bb4e:	e7c7      	b.n	800bae0 <_printf_common+0x58>
 800bb50:	2301      	movs	r3, #1
 800bb52:	4622      	mov	r2, r4
 800bb54:	4649      	mov	r1, r9
 800bb56:	4638      	mov	r0, r7
 800bb58:	47c0      	blx	r8
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	d0e6      	beq.n	800bb2c <_printf_common+0xa4>
 800bb5e:	3601      	adds	r6, #1
 800bb60:	e7d9      	b.n	800bb16 <_printf_common+0x8e>
	...

0800bb64 <_printf_i>:
 800bb64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb68:	7e0f      	ldrb	r7, [r1, #24]
 800bb6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb6c:	2f78      	cmp	r7, #120	; 0x78
 800bb6e:	4691      	mov	r9, r2
 800bb70:	4680      	mov	r8, r0
 800bb72:	460c      	mov	r4, r1
 800bb74:	469a      	mov	sl, r3
 800bb76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb7a:	d807      	bhi.n	800bb8c <_printf_i+0x28>
 800bb7c:	2f62      	cmp	r7, #98	; 0x62
 800bb7e:	d80a      	bhi.n	800bb96 <_printf_i+0x32>
 800bb80:	2f00      	cmp	r7, #0
 800bb82:	f000 80d8 	beq.w	800bd36 <_printf_i+0x1d2>
 800bb86:	2f58      	cmp	r7, #88	; 0x58
 800bb88:	f000 80a3 	beq.w	800bcd2 <_printf_i+0x16e>
 800bb8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb94:	e03a      	b.n	800bc0c <_printf_i+0xa8>
 800bb96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb9a:	2b15      	cmp	r3, #21
 800bb9c:	d8f6      	bhi.n	800bb8c <_printf_i+0x28>
 800bb9e:	a101      	add	r1, pc, #4	; (adr r1, 800bba4 <_printf_i+0x40>)
 800bba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bba4:	0800bbfd 	.word	0x0800bbfd
 800bba8:	0800bc11 	.word	0x0800bc11
 800bbac:	0800bb8d 	.word	0x0800bb8d
 800bbb0:	0800bb8d 	.word	0x0800bb8d
 800bbb4:	0800bb8d 	.word	0x0800bb8d
 800bbb8:	0800bb8d 	.word	0x0800bb8d
 800bbbc:	0800bc11 	.word	0x0800bc11
 800bbc0:	0800bb8d 	.word	0x0800bb8d
 800bbc4:	0800bb8d 	.word	0x0800bb8d
 800bbc8:	0800bb8d 	.word	0x0800bb8d
 800bbcc:	0800bb8d 	.word	0x0800bb8d
 800bbd0:	0800bd1d 	.word	0x0800bd1d
 800bbd4:	0800bc41 	.word	0x0800bc41
 800bbd8:	0800bcff 	.word	0x0800bcff
 800bbdc:	0800bb8d 	.word	0x0800bb8d
 800bbe0:	0800bb8d 	.word	0x0800bb8d
 800bbe4:	0800bd3f 	.word	0x0800bd3f
 800bbe8:	0800bb8d 	.word	0x0800bb8d
 800bbec:	0800bc41 	.word	0x0800bc41
 800bbf0:	0800bb8d 	.word	0x0800bb8d
 800bbf4:	0800bb8d 	.word	0x0800bb8d
 800bbf8:	0800bd07 	.word	0x0800bd07
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	1d1a      	adds	r2, r3, #4
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	602a      	str	r2, [r5, #0]
 800bc04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e0a3      	b.n	800bd58 <_printf_i+0x1f4>
 800bc10:	6820      	ldr	r0, [r4, #0]
 800bc12:	6829      	ldr	r1, [r5, #0]
 800bc14:	0606      	lsls	r6, r0, #24
 800bc16:	f101 0304 	add.w	r3, r1, #4
 800bc1a:	d50a      	bpl.n	800bc32 <_printf_i+0xce>
 800bc1c:	680e      	ldr	r6, [r1, #0]
 800bc1e:	602b      	str	r3, [r5, #0]
 800bc20:	2e00      	cmp	r6, #0
 800bc22:	da03      	bge.n	800bc2c <_printf_i+0xc8>
 800bc24:	232d      	movs	r3, #45	; 0x2d
 800bc26:	4276      	negs	r6, r6
 800bc28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc2c:	485e      	ldr	r0, [pc, #376]	; (800bda8 <_printf_i+0x244>)
 800bc2e:	230a      	movs	r3, #10
 800bc30:	e019      	b.n	800bc66 <_printf_i+0x102>
 800bc32:	680e      	ldr	r6, [r1, #0]
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc3a:	bf18      	it	ne
 800bc3c:	b236      	sxthne	r6, r6
 800bc3e:	e7ef      	b.n	800bc20 <_printf_i+0xbc>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	6820      	ldr	r0, [r4, #0]
 800bc44:	1d19      	adds	r1, r3, #4
 800bc46:	6029      	str	r1, [r5, #0]
 800bc48:	0601      	lsls	r1, r0, #24
 800bc4a:	d501      	bpl.n	800bc50 <_printf_i+0xec>
 800bc4c:	681e      	ldr	r6, [r3, #0]
 800bc4e:	e002      	b.n	800bc56 <_printf_i+0xf2>
 800bc50:	0646      	lsls	r6, r0, #25
 800bc52:	d5fb      	bpl.n	800bc4c <_printf_i+0xe8>
 800bc54:	881e      	ldrh	r6, [r3, #0]
 800bc56:	4854      	ldr	r0, [pc, #336]	; (800bda8 <_printf_i+0x244>)
 800bc58:	2f6f      	cmp	r7, #111	; 0x6f
 800bc5a:	bf0c      	ite	eq
 800bc5c:	2308      	moveq	r3, #8
 800bc5e:	230a      	movne	r3, #10
 800bc60:	2100      	movs	r1, #0
 800bc62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc66:	6865      	ldr	r5, [r4, #4]
 800bc68:	60a5      	str	r5, [r4, #8]
 800bc6a:	2d00      	cmp	r5, #0
 800bc6c:	bfa2      	ittt	ge
 800bc6e:	6821      	ldrge	r1, [r4, #0]
 800bc70:	f021 0104 	bicge.w	r1, r1, #4
 800bc74:	6021      	strge	r1, [r4, #0]
 800bc76:	b90e      	cbnz	r6, 800bc7c <_printf_i+0x118>
 800bc78:	2d00      	cmp	r5, #0
 800bc7a:	d04d      	beq.n	800bd18 <_printf_i+0x1b4>
 800bc7c:	4615      	mov	r5, r2
 800bc7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc82:	fb03 6711 	mls	r7, r3, r1, r6
 800bc86:	5dc7      	ldrb	r7, [r0, r7]
 800bc88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc8c:	4637      	mov	r7, r6
 800bc8e:	42bb      	cmp	r3, r7
 800bc90:	460e      	mov	r6, r1
 800bc92:	d9f4      	bls.n	800bc7e <_printf_i+0x11a>
 800bc94:	2b08      	cmp	r3, #8
 800bc96:	d10b      	bne.n	800bcb0 <_printf_i+0x14c>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	07de      	lsls	r6, r3, #31
 800bc9c:	d508      	bpl.n	800bcb0 <_printf_i+0x14c>
 800bc9e:	6923      	ldr	r3, [r4, #16]
 800bca0:	6861      	ldr	r1, [r4, #4]
 800bca2:	4299      	cmp	r1, r3
 800bca4:	bfde      	ittt	le
 800bca6:	2330      	movle	r3, #48	; 0x30
 800bca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bcb0:	1b52      	subs	r2, r2, r5
 800bcb2:	6122      	str	r2, [r4, #16]
 800bcb4:	f8cd a000 	str.w	sl, [sp]
 800bcb8:	464b      	mov	r3, r9
 800bcba:	aa03      	add	r2, sp, #12
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	4640      	mov	r0, r8
 800bcc0:	f7ff fee2 	bl	800ba88 <_printf_common>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d14c      	bne.n	800bd62 <_printf_i+0x1fe>
 800bcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bccc:	b004      	add	sp, #16
 800bcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd2:	4835      	ldr	r0, [pc, #212]	; (800bda8 <_printf_i+0x244>)
 800bcd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bcd8:	6829      	ldr	r1, [r5, #0]
 800bcda:	6823      	ldr	r3, [r4, #0]
 800bcdc:	f851 6b04 	ldr.w	r6, [r1], #4
 800bce0:	6029      	str	r1, [r5, #0]
 800bce2:	061d      	lsls	r5, r3, #24
 800bce4:	d514      	bpl.n	800bd10 <_printf_i+0x1ac>
 800bce6:	07df      	lsls	r7, r3, #31
 800bce8:	bf44      	itt	mi
 800bcea:	f043 0320 	orrmi.w	r3, r3, #32
 800bcee:	6023      	strmi	r3, [r4, #0]
 800bcf0:	b91e      	cbnz	r6, 800bcfa <_printf_i+0x196>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	f023 0320 	bic.w	r3, r3, #32
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	2310      	movs	r3, #16
 800bcfc:	e7b0      	b.n	800bc60 <_printf_i+0xfc>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	f043 0320 	orr.w	r3, r3, #32
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	2378      	movs	r3, #120	; 0x78
 800bd08:	4828      	ldr	r0, [pc, #160]	; (800bdac <_printf_i+0x248>)
 800bd0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd0e:	e7e3      	b.n	800bcd8 <_printf_i+0x174>
 800bd10:	0659      	lsls	r1, r3, #25
 800bd12:	bf48      	it	mi
 800bd14:	b2b6      	uxthmi	r6, r6
 800bd16:	e7e6      	b.n	800bce6 <_printf_i+0x182>
 800bd18:	4615      	mov	r5, r2
 800bd1a:	e7bb      	b.n	800bc94 <_printf_i+0x130>
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	6826      	ldr	r6, [r4, #0]
 800bd20:	6961      	ldr	r1, [r4, #20]
 800bd22:	1d18      	adds	r0, r3, #4
 800bd24:	6028      	str	r0, [r5, #0]
 800bd26:	0635      	lsls	r5, r6, #24
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	d501      	bpl.n	800bd30 <_printf_i+0x1cc>
 800bd2c:	6019      	str	r1, [r3, #0]
 800bd2e:	e002      	b.n	800bd36 <_printf_i+0x1d2>
 800bd30:	0670      	lsls	r0, r6, #25
 800bd32:	d5fb      	bpl.n	800bd2c <_printf_i+0x1c8>
 800bd34:	8019      	strh	r1, [r3, #0]
 800bd36:	2300      	movs	r3, #0
 800bd38:	6123      	str	r3, [r4, #16]
 800bd3a:	4615      	mov	r5, r2
 800bd3c:	e7ba      	b.n	800bcb4 <_printf_i+0x150>
 800bd3e:	682b      	ldr	r3, [r5, #0]
 800bd40:	1d1a      	adds	r2, r3, #4
 800bd42:	602a      	str	r2, [r5, #0]
 800bd44:	681d      	ldr	r5, [r3, #0]
 800bd46:	6862      	ldr	r2, [r4, #4]
 800bd48:	2100      	movs	r1, #0
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	f7f4 fa48 	bl	80001e0 <memchr>
 800bd50:	b108      	cbz	r0, 800bd56 <_printf_i+0x1f2>
 800bd52:	1b40      	subs	r0, r0, r5
 800bd54:	6060      	str	r0, [r4, #4]
 800bd56:	6863      	ldr	r3, [r4, #4]
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd60:	e7a8      	b.n	800bcb4 <_printf_i+0x150>
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	462a      	mov	r2, r5
 800bd66:	4649      	mov	r1, r9
 800bd68:	4640      	mov	r0, r8
 800bd6a:	47d0      	blx	sl
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d0ab      	beq.n	800bcc8 <_printf_i+0x164>
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	079b      	lsls	r3, r3, #30
 800bd74:	d413      	bmi.n	800bd9e <_printf_i+0x23a>
 800bd76:	68e0      	ldr	r0, [r4, #12]
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	4298      	cmp	r0, r3
 800bd7c:	bfb8      	it	lt
 800bd7e:	4618      	movlt	r0, r3
 800bd80:	e7a4      	b.n	800bccc <_printf_i+0x168>
 800bd82:	2301      	movs	r3, #1
 800bd84:	4632      	mov	r2, r6
 800bd86:	4649      	mov	r1, r9
 800bd88:	4640      	mov	r0, r8
 800bd8a:	47d0      	blx	sl
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	d09b      	beq.n	800bcc8 <_printf_i+0x164>
 800bd90:	3501      	adds	r5, #1
 800bd92:	68e3      	ldr	r3, [r4, #12]
 800bd94:	9903      	ldr	r1, [sp, #12]
 800bd96:	1a5b      	subs	r3, r3, r1
 800bd98:	42ab      	cmp	r3, r5
 800bd9a:	dcf2      	bgt.n	800bd82 <_printf_i+0x21e>
 800bd9c:	e7eb      	b.n	800bd76 <_printf_i+0x212>
 800bd9e:	2500      	movs	r5, #0
 800bda0:	f104 0619 	add.w	r6, r4, #25
 800bda4:	e7f5      	b.n	800bd92 <_printf_i+0x22e>
 800bda6:	bf00      	nop
 800bda8:	0800ed52 	.word	0x0800ed52
 800bdac:	0800ed63 	.word	0x0800ed63

0800bdb0 <cleanup_glue>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	6809      	ldr	r1, [r1, #0]
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	b109      	cbz	r1, 800bdbe <cleanup_glue+0xe>
 800bdba:	f7ff fff9 	bl	800bdb0 <cleanup_glue>
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdc6:	f001 bbf3 	b.w	800d5b0 <_free_r>
	...

0800bdcc <_reclaim_reent>:
 800bdcc:	4b2c      	ldr	r3, [pc, #176]	; (800be80 <_reclaim_reent+0xb4>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4283      	cmp	r3, r0
 800bdd2:	b570      	push	{r4, r5, r6, lr}
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	d051      	beq.n	800be7c <_reclaim_reent+0xb0>
 800bdd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bdda:	b143      	cbz	r3, 800bdee <_reclaim_reent+0x22>
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d14a      	bne.n	800be78 <_reclaim_reent+0xac>
 800bde2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bde4:	6819      	ldr	r1, [r3, #0]
 800bde6:	b111      	cbz	r1, 800bdee <_reclaim_reent+0x22>
 800bde8:	4620      	mov	r0, r4
 800bdea:	f001 fbe1 	bl	800d5b0 <_free_r>
 800bdee:	6961      	ldr	r1, [r4, #20]
 800bdf0:	b111      	cbz	r1, 800bdf8 <_reclaim_reent+0x2c>
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f001 fbdc 	bl	800d5b0 <_free_r>
 800bdf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bdfa:	b111      	cbz	r1, 800be02 <_reclaim_reent+0x36>
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f001 fbd7 	bl	800d5b0 <_free_r>
 800be02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be04:	b111      	cbz	r1, 800be0c <_reclaim_reent+0x40>
 800be06:	4620      	mov	r0, r4
 800be08:	f001 fbd2 	bl	800d5b0 <_free_r>
 800be0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800be0e:	b111      	cbz	r1, 800be16 <_reclaim_reent+0x4a>
 800be10:	4620      	mov	r0, r4
 800be12:	f001 fbcd 	bl	800d5b0 <_free_r>
 800be16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800be18:	b111      	cbz	r1, 800be20 <_reclaim_reent+0x54>
 800be1a:	4620      	mov	r0, r4
 800be1c:	f001 fbc8 	bl	800d5b0 <_free_r>
 800be20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800be22:	b111      	cbz	r1, 800be2a <_reclaim_reent+0x5e>
 800be24:	4620      	mov	r0, r4
 800be26:	f001 fbc3 	bl	800d5b0 <_free_r>
 800be2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800be2c:	b111      	cbz	r1, 800be34 <_reclaim_reent+0x68>
 800be2e:	4620      	mov	r0, r4
 800be30:	f001 fbbe 	bl	800d5b0 <_free_r>
 800be34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be36:	b111      	cbz	r1, 800be3e <_reclaim_reent+0x72>
 800be38:	4620      	mov	r0, r4
 800be3a:	f001 fbb9 	bl	800d5b0 <_free_r>
 800be3e:	69a3      	ldr	r3, [r4, #24]
 800be40:	b1e3      	cbz	r3, 800be7c <_reclaim_reent+0xb0>
 800be42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be44:	4620      	mov	r0, r4
 800be46:	4798      	blx	r3
 800be48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be4a:	b1b9      	cbz	r1, 800be7c <_reclaim_reent+0xb0>
 800be4c:	4620      	mov	r0, r4
 800be4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be52:	f7ff bfad 	b.w	800bdb0 <cleanup_glue>
 800be56:	5949      	ldr	r1, [r1, r5]
 800be58:	b941      	cbnz	r1, 800be6c <_reclaim_reent+0xa0>
 800be5a:	3504      	adds	r5, #4
 800be5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be5e:	2d80      	cmp	r5, #128	; 0x80
 800be60:	68d9      	ldr	r1, [r3, #12]
 800be62:	d1f8      	bne.n	800be56 <_reclaim_reent+0x8a>
 800be64:	4620      	mov	r0, r4
 800be66:	f001 fba3 	bl	800d5b0 <_free_r>
 800be6a:	e7ba      	b.n	800bde2 <_reclaim_reent+0x16>
 800be6c:	680e      	ldr	r6, [r1, #0]
 800be6e:	4620      	mov	r0, r4
 800be70:	f001 fb9e 	bl	800d5b0 <_free_r>
 800be74:	4631      	mov	r1, r6
 800be76:	e7ef      	b.n	800be58 <_reclaim_reent+0x8c>
 800be78:	2500      	movs	r5, #0
 800be7a:	e7ef      	b.n	800be5c <_reclaim_reent+0x90>
 800be7c:	bd70      	pop	{r4, r5, r6, pc}
 800be7e:	bf00      	nop
 800be80:	20000014 	.word	0x20000014

0800be84 <_sbrk_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4d06      	ldr	r5, [pc, #24]	; (800bea0 <_sbrk_r+0x1c>)
 800be88:	2300      	movs	r3, #0
 800be8a:	4604      	mov	r4, r0
 800be8c:	4608      	mov	r0, r1
 800be8e:	602b      	str	r3, [r5, #0]
 800be90:	f7f7 fb96 	bl	80035c0 <_sbrk>
 800be94:	1c43      	adds	r3, r0, #1
 800be96:	d102      	bne.n	800be9e <_sbrk_r+0x1a>
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	b103      	cbz	r3, 800be9e <_sbrk_r+0x1a>
 800be9c:	6023      	str	r3, [r4, #0]
 800be9e:	bd38      	pop	{r3, r4, r5, pc}
 800bea0:	200052ec 	.word	0x200052ec

0800bea4 <siprintf>:
 800bea4:	b40e      	push	{r1, r2, r3}
 800bea6:	b500      	push	{lr}
 800bea8:	b09c      	sub	sp, #112	; 0x70
 800beaa:	ab1d      	add	r3, sp, #116	; 0x74
 800beac:	9002      	str	r0, [sp, #8]
 800beae:	9006      	str	r0, [sp, #24]
 800beb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800beb4:	4809      	ldr	r0, [pc, #36]	; (800bedc <siprintf+0x38>)
 800beb6:	9107      	str	r1, [sp, #28]
 800beb8:	9104      	str	r1, [sp, #16]
 800beba:	4909      	ldr	r1, [pc, #36]	; (800bee0 <siprintf+0x3c>)
 800bebc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bec0:	9105      	str	r1, [sp, #20]
 800bec2:	6800      	ldr	r0, [r0, #0]
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	a902      	add	r1, sp, #8
 800bec8:	f001 fc1a 	bl	800d700 <_svfiprintf_r>
 800becc:	9b02      	ldr	r3, [sp, #8]
 800bece:	2200      	movs	r2, #0
 800bed0:	701a      	strb	r2, [r3, #0]
 800bed2:	b01c      	add	sp, #112	; 0x70
 800bed4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bed8:	b003      	add	sp, #12
 800beda:	4770      	bx	lr
 800bedc:	20000014 	.word	0x20000014
 800bee0:	ffff0208 	.word	0xffff0208

0800bee4 <__sread>:
 800bee4:	b510      	push	{r4, lr}
 800bee6:	460c      	mov	r4, r1
 800bee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beec:	f001 fd08 	bl	800d900 <_read_r>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	bfab      	itete	ge
 800bef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bef6:	89a3      	ldrhlt	r3, [r4, #12]
 800bef8:	181b      	addge	r3, r3, r0
 800befa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800befe:	bfac      	ite	ge
 800bf00:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf02:	81a3      	strhlt	r3, [r4, #12]
 800bf04:	bd10      	pop	{r4, pc}

0800bf06 <__swrite>:
 800bf06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf0a:	461f      	mov	r7, r3
 800bf0c:	898b      	ldrh	r3, [r1, #12]
 800bf0e:	05db      	lsls	r3, r3, #23
 800bf10:	4605      	mov	r5, r0
 800bf12:	460c      	mov	r4, r1
 800bf14:	4616      	mov	r6, r2
 800bf16:	d505      	bpl.n	800bf24 <__swrite+0x1e>
 800bf18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f000 ff86 	bl	800ce30 <_lseek_r>
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf2e:	81a3      	strh	r3, [r4, #12]
 800bf30:	4632      	mov	r2, r6
 800bf32:	463b      	mov	r3, r7
 800bf34:	4628      	mov	r0, r5
 800bf36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3a:	f000 b817 	b.w	800bf6c <_write_r>

0800bf3e <__sseek>:
 800bf3e:	b510      	push	{r4, lr}
 800bf40:	460c      	mov	r4, r1
 800bf42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf46:	f000 ff73 	bl	800ce30 <_lseek_r>
 800bf4a:	1c43      	adds	r3, r0, #1
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	bf15      	itete	ne
 800bf50:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf5a:	81a3      	strheq	r3, [r4, #12]
 800bf5c:	bf18      	it	ne
 800bf5e:	81a3      	strhne	r3, [r4, #12]
 800bf60:	bd10      	pop	{r4, pc}

0800bf62 <__sclose>:
 800bf62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf66:	f000 b813 	b.w	800bf90 <_close_r>
	...

0800bf6c <_write_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4d07      	ldr	r5, [pc, #28]	; (800bf8c <_write_r+0x20>)
 800bf70:	4604      	mov	r4, r0
 800bf72:	4608      	mov	r0, r1
 800bf74:	4611      	mov	r1, r2
 800bf76:	2200      	movs	r2, #0
 800bf78:	602a      	str	r2, [r5, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	f7f7 facf 	bl	800351e <_write>
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d102      	bne.n	800bf8a <_write_r+0x1e>
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	b103      	cbz	r3, 800bf8a <_write_r+0x1e>
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	bd38      	pop	{r3, r4, r5, pc}
 800bf8c:	200052ec 	.word	0x200052ec

0800bf90 <_close_r>:
 800bf90:	b538      	push	{r3, r4, r5, lr}
 800bf92:	4d06      	ldr	r5, [pc, #24]	; (800bfac <_close_r+0x1c>)
 800bf94:	2300      	movs	r3, #0
 800bf96:	4604      	mov	r4, r0
 800bf98:	4608      	mov	r0, r1
 800bf9a:	602b      	str	r3, [r5, #0]
 800bf9c:	f7f7 fadb 	bl	8003556 <_close>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d102      	bne.n	800bfaa <_close_r+0x1a>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	b103      	cbz	r3, 800bfaa <_close_r+0x1a>
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	200052ec 	.word	0x200052ec

0800bfb0 <quorem>:
 800bfb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	6903      	ldr	r3, [r0, #16]
 800bfb6:	690c      	ldr	r4, [r1, #16]
 800bfb8:	42a3      	cmp	r3, r4
 800bfba:	4607      	mov	r7, r0
 800bfbc:	f2c0 8081 	blt.w	800c0c2 <quorem+0x112>
 800bfc0:	3c01      	subs	r4, #1
 800bfc2:	f101 0814 	add.w	r8, r1, #20
 800bfc6:	f100 0514 	add.w	r5, r0, #20
 800bfca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfce:	9301      	str	r3, [sp, #4]
 800bfd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bfe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfe4:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfe8:	d331      	bcc.n	800c04e <quorem+0x9e>
 800bfea:	f04f 0e00 	mov.w	lr, #0
 800bfee:	4640      	mov	r0, r8
 800bff0:	46ac      	mov	ip, r5
 800bff2:	46f2      	mov	sl, lr
 800bff4:	f850 2b04 	ldr.w	r2, [r0], #4
 800bff8:	b293      	uxth	r3, r2
 800bffa:	fb06 e303 	mla	r3, r6, r3, lr
 800bffe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c002:	b29b      	uxth	r3, r3
 800c004:	ebaa 0303 	sub.w	r3, sl, r3
 800c008:	f8dc a000 	ldr.w	sl, [ip]
 800c00c:	0c12      	lsrs	r2, r2, #16
 800c00e:	fa13 f38a 	uxtah	r3, r3, sl
 800c012:	fb06 e202 	mla	r2, r6, r2, lr
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	9b00      	ldr	r3, [sp, #0]
 800c01a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c01e:	b292      	uxth	r2, r2
 800c020:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c024:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c028:	f8bd 3000 	ldrh.w	r3, [sp]
 800c02c:	4581      	cmp	r9, r0
 800c02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c032:	f84c 3b04 	str.w	r3, [ip], #4
 800c036:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c03a:	d2db      	bcs.n	800bff4 <quorem+0x44>
 800c03c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c040:	b92b      	cbnz	r3, 800c04e <quorem+0x9e>
 800c042:	9b01      	ldr	r3, [sp, #4]
 800c044:	3b04      	subs	r3, #4
 800c046:	429d      	cmp	r5, r3
 800c048:	461a      	mov	r2, r3
 800c04a:	d32e      	bcc.n	800c0aa <quorem+0xfa>
 800c04c:	613c      	str	r4, [r7, #16]
 800c04e:	4638      	mov	r0, r7
 800c050:	f001 f996 	bl	800d380 <__mcmp>
 800c054:	2800      	cmp	r0, #0
 800c056:	db24      	blt.n	800c0a2 <quorem+0xf2>
 800c058:	3601      	adds	r6, #1
 800c05a:	4628      	mov	r0, r5
 800c05c:	f04f 0c00 	mov.w	ip, #0
 800c060:	f858 2b04 	ldr.w	r2, [r8], #4
 800c064:	f8d0 e000 	ldr.w	lr, [r0]
 800c068:	b293      	uxth	r3, r2
 800c06a:	ebac 0303 	sub.w	r3, ip, r3
 800c06e:	0c12      	lsrs	r2, r2, #16
 800c070:	fa13 f38e 	uxtah	r3, r3, lr
 800c074:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c078:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c082:	45c1      	cmp	r9, r8
 800c084:	f840 3b04 	str.w	r3, [r0], #4
 800c088:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c08c:	d2e8      	bcs.n	800c060 <quorem+0xb0>
 800c08e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c096:	b922      	cbnz	r2, 800c0a2 <quorem+0xf2>
 800c098:	3b04      	subs	r3, #4
 800c09a:	429d      	cmp	r5, r3
 800c09c:	461a      	mov	r2, r3
 800c09e:	d30a      	bcc.n	800c0b6 <quorem+0x106>
 800c0a0:	613c      	str	r4, [r7, #16]
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	b003      	add	sp, #12
 800c0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0aa:	6812      	ldr	r2, [r2, #0]
 800c0ac:	3b04      	subs	r3, #4
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	d1cc      	bne.n	800c04c <quorem+0x9c>
 800c0b2:	3c01      	subs	r4, #1
 800c0b4:	e7c7      	b.n	800c046 <quorem+0x96>
 800c0b6:	6812      	ldr	r2, [r2, #0]
 800c0b8:	3b04      	subs	r3, #4
 800c0ba:	2a00      	cmp	r2, #0
 800c0bc:	d1f0      	bne.n	800c0a0 <quorem+0xf0>
 800c0be:	3c01      	subs	r4, #1
 800c0c0:	e7eb      	b.n	800c09a <quorem+0xea>
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	e7ee      	b.n	800c0a4 <quorem+0xf4>
	...

0800c0c8 <_dtoa_r>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	ed2d 8b04 	vpush	{d8-d9}
 800c0d0:	ec57 6b10 	vmov	r6, r7, d0
 800c0d4:	b093      	sub	sp, #76	; 0x4c
 800c0d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c0d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c0dc:	9106      	str	r1, [sp, #24]
 800c0de:	ee10 aa10 	vmov	sl, s0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c0e6:	930c      	str	r3, [sp, #48]	; 0x30
 800c0e8:	46bb      	mov	fp, r7
 800c0ea:	b975      	cbnz	r5, 800c10a <_dtoa_r+0x42>
 800c0ec:	2010      	movs	r0, #16
 800c0ee:	f000 feb1 	bl	800ce54 <malloc>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	6260      	str	r0, [r4, #36]	; 0x24
 800c0f6:	b920      	cbnz	r0, 800c102 <_dtoa_r+0x3a>
 800c0f8:	4ba7      	ldr	r3, [pc, #668]	; (800c398 <_dtoa_r+0x2d0>)
 800c0fa:	21ea      	movs	r1, #234	; 0xea
 800c0fc:	48a7      	ldr	r0, [pc, #668]	; (800c39c <_dtoa_r+0x2d4>)
 800c0fe:	f001 fc11 	bl	800d924 <__assert_func>
 800c102:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c106:	6005      	str	r5, [r0, #0]
 800c108:	60c5      	str	r5, [r0, #12]
 800c10a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c10c:	6819      	ldr	r1, [r3, #0]
 800c10e:	b151      	cbz	r1, 800c126 <_dtoa_r+0x5e>
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	604a      	str	r2, [r1, #4]
 800c114:	2301      	movs	r3, #1
 800c116:	4093      	lsls	r3, r2
 800c118:	608b      	str	r3, [r1, #8]
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 feee 	bl	800cefc <_Bfree>
 800c120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c122:	2200      	movs	r2, #0
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	1e3b      	subs	r3, r7, #0
 800c128:	bfaa      	itet	ge
 800c12a:	2300      	movge	r3, #0
 800c12c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c130:	f8c8 3000 	strge.w	r3, [r8]
 800c134:	4b9a      	ldr	r3, [pc, #616]	; (800c3a0 <_dtoa_r+0x2d8>)
 800c136:	bfbc      	itt	lt
 800c138:	2201      	movlt	r2, #1
 800c13a:	f8c8 2000 	strlt.w	r2, [r8]
 800c13e:	ea33 030b 	bics.w	r3, r3, fp
 800c142:	d11b      	bne.n	800c17c <_dtoa_r+0xb4>
 800c144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c146:	f242 730f 	movw	r3, #9999	; 0x270f
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c150:	4333      	orrs	r3, r6
 800c152:	f000 8592 	beq.w	800cc7a <_dtoa_r+0xbb2>
 800c156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c158:	b963      	cbnz	r3, 800c174 <_dtoa_r+0xac>
 800c15a:	4b92      	ldr	r3, [pc, #584]	; (800c3a4 <_dtoa_r+0x2dc>)
 800c15c:	e022      	b.n	800c1a4 <_dtoa_r+0xdc>
 800c15e:	4b92      	ldr	r3, [pc, #584]	; (800c3a8 <_dtoa_r+0x2e0>)
 800c160:	9301      	str	r3, [sp, #4]
 800c162:	3308      	adds	r3, #8
 800c164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	9801      	ldr	r0, [sp, #4]
 800c16a:	b013      	add	sp, #76	; 0x4c
 800c16c:	ecbd 8b04 	vpop	{d8-d9}
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c174:	4b8b      	ldr	r3, [pc, #556]	; (800c3a4 <_dtoa_r+0x2dc>)
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	3303      	adds	r3, #3
 800c17a:	e7f3      	b.n	800c164 <_dtoa_r+0x9c>
 800c17c:	2200      	movs	r2, #0
 800c17e:	2300      	movs	r3, #0
 800c180:	4650      	mov	r0, sl
 800c182:	4659      	mov	r1, fp
 800c184:	f7f4 fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c188:	ec4b ab19 	vmov	d9, sl, fp
 800c18c:	4680      	mov	r8, r0
 800c18e:	b158      	cbz	r0, 800c1a8 <_dtoa_r+0xe0>
 800c190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c192:	2301      	movs	r3, #1
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 856b 	beq.w	800cc74 <_dtoa_r+0xbac>
 800c19e:	4883      	ldr	r0, [pc, #524]	; (800c3ac <_dtoa_r+0x2e4>)
 800c1a0:	6018      	str	r0, [r3, #0]
 800c1a2:	1e43      	subs	r3, r0, #1
 800c1a4:	9301      	str	r3, [sp, #4]
 800c1a6:	e7df      	b.n	800c168 <_dtoa_r+0xa0>
 800c1a8:	ec4b ab10 	vmov	d0, sl, fp
 800c1ac:	aa10      	add	r2, sp, #64	; 0x40
 800c1ae:	a911      	add	r1, sp, #68	; 0x44
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f001 f98b 	bl	800d4cc <__d2b>
 800c1b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c1ba:	ee08 0a10 	vmov	s16, r0
 800c1be:	2d00      	cmp	r5, #0
 800c1c0:	f000 8084 	beq.w	800c2cc <_dtoa_r+0x204>
 800c1c4:	ee19 3a90 	vmov	r3, s19
 800c1c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c1d0:	4656      	mov	r6, sl
 800c1d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c1d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c1da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c1de:	4b74      	ldr	r3, [pc, #464]	; (800c3b0 <_dtoa_r+0x2e8>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	f7f4 f84f 	bl	8000288 <__aeabi_dsub>
 800c1ea:	a365      	add	r3, pc, #404	; (adr r3, 800c380 <_dtoa_r+0x2b8>)
 800c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f0:	f7f4 fa02 	bl	80005f8 <__aeabi_dmul>
 800c1f4:	a364      	add	r3, pc, #400	; (adr r3, 800c388 <_dtoa_r+0x2c0>)
 800c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fa:	f7f4 f847 	bl	800028c <__adddf3>
 800c1fe:	4606      	mov	r6, r0
 800c200:	4628      	mov	r0, r5
 800c202:	460f      	mov	r7, r1
 800c204:	f7f4 f98e 	bl	8000524 <__aeabi_i2d>
 800c208:	a361      	add	r3, pc, #388	; (adr r3, 800c390 <_dtoa_r+0x2c8>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 f9f3 	bl	80005f8 <__aeabi_dmul>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	4630      	mov	r0, r6
 800c218:	4639      	mov	r1, r7
 800c21a:	f7f4 f837 	bl	800028c <__adddf3>
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	f7f4 fc99 	bl	8000b58 <__aeabi_d2iz>
 800c226:	2200      	movs	r2, #0
 800c228:	9000      	str	r0, [sp, #0]
 800c22a:	2300      	movs	r3, #0
 800c22c:	4630      	mov	r0, r6
 800c22e:	4639      	mov	r1, r7
 800c230:	f7f4 fc54 	bl	8000adc <__aeabi_dcmplt>
 800c234:	b150      	cbz	r0, 800c24c <_dtoa_r+0x184>
 800c236:	9800      	ldr	r0, [sp, #0]
 800c238:	f7f4 f974 	bl	8000524 <__aeabi_i2d>
 800c23c:	4632      	mov	r2, r6
 800c23e:	463b      	mov	r3, r7
 800c240:	f7f4 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 800c244:	b910      	cbnz	r0, 800c24c <_dtoa_r+0x184>
 800c246:	9b00      	ldr	r3, [sp, #0]
 800c248:	3b01      	subs	r3, #1
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	9b00      	ldr	r3, [sp, #0]
 800c24e:	2b16      	cmp	r3, #22
 800c250:	d85a      	bhi.n	800c308 <_dtoa_r+0x240>
 800c252:	9a00      	ldr	r2, [sp, #0]
 800c254:	4b57      	ldr	r3, [pc, #348]	; (800c3b4 <_dtoa_r+0x2ec>)
 800c256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	ec51 0b19 	vmov	r0, r1, d9
 800c262:	f7f4 fc3b 	bl	8000adc <__aeabi_dcmplt>
 800c266:	2800      	cmp	r0, #0
 800c268:	d050      	beq.n	800c30c <_dtoa_r+0x244>
 800c26a:	9b00      	ldr	r3, [sp, #0]
 800c26c:	3b01      	subs	r3, #1
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	2300      	movs	r3, #0
 800c272:	930b      	str	r3, [sp, #44]	; 0x2c
 800c274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c276:	1b5d      	subs	r5, r3, r5
 800c278:	1e6b      	subs	r3, r5, #1
 800c27a:	9305      	str	r3, [sp, #20]
 800c27c:	bf45      	ittet	mi
 800c27e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c282:	9304      	strmi	r3, [sp, #16]
 800c284:	2300      	movpl	r3, #0
 800c286:	2300      	movmi	r3, #0
 800c288:	bf4c      	ite	mi
 800c28a:	9305      	strmi	r3, [sp, #20]
 800c28c:	9304      	strpl	r3, [sp, #16]
 800c28e:	9b00      	ldr	r3, [sp, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	db3d      	blt.n	800c310 <_dtoa_r+0x248>
 800c294:	9b05      	ldr	r3, [sp, #20]
 800c296:	9a00      	ldr	r2, [sp, #0]
 800c298:	920a      	str	r2, [sp, #40]	; 0x28
 800c29a:	4413      	add	r3, r2
 800c29c:	9305      	str	r3, [sp, #20]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9307      	str	r3, [sp, #28]
 800c2a2:	9b06      	ldr	r3, [sp, #24]
 800c2a4:	2b09      	cmp	r3, #9
 800c2a6:	f200 8089 	bhi.w	800c3bc <_dtoa_r+0x2f4>
 800c2aa:	2b05      	cmp	r3, #5
 800c2ac:	bfc4      	itt	gt
 800c2ae:	3b04      	subgt	r3, #4
 800c2b0:	9306      	strgt	r3, [sp, #24]
 800c2b2:	9b06      	ldr	r3, [sp, #24]
 800c2b4:	f1a3 0302 	sub.w	r3, r3, #2
 800c2b8:	bfcc      	ite	gt
 800c2ba:	2500      	movgt	r5, #0
 800c2bc:	2501      	movle	r5, #1
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	f200 8087 	bhi.w	800c3d2 <_dtoa_r+0x30a>
 800c2c4:	e8df f003 	tbb	[pc, r3]
 800c2c8:	59383a2d 	.word	0x59383a2d
 800c2cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c2d0:	441d      	add	r5, r3
 800c2d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c2d6:	2b20      	cmp	r3, #32
 800c2d8:	bfc1      	itttt	gt
 800c2da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c2de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c2e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c2e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c2ea:	bfda      	itte	le
 800c2ec:	f1c3 0320 	rsble	r3, r3, #32
 800c2f0:	fa06 f003 	lslle.w	r0, r6, r3
 800c2f4:	4318      	orrgt	r0, r3
 800c2f6:	f7f4 f905 	bl	8000504 <__aeabi_ui2d>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c302:	3d01      	subs	r5, #1
 800c304:	930e      	str	r3, [sp, #56]	; 0x38
 800c306:	e76a      	b.n	800c1de <_dtoa_r+0x116>
 800c308:	2301      	movs	r3, #1
 800c30a:	e7b2      	b.n	800c272 <_dtoa_r+0x1aa>
 800c30c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c30e:	e7b1      	b.n	800c274 <_dtoa_r+0x1ac>
 800c310:	9b04      	ldr	r3, [sp, #16]
 800c312:	9a00      	ldr	r2, [sp, #0]
 800c314:	1a9b      	subs	r3, r3, r2
 800c316:	9304      	str	r3, [sp, #16]
 800c318:	4253      	negs	r3, r2
 800c31a:	9307      	str	r3, [sp, #28]
 800c31c:	2300      	movs	r3, #0
 800c31e:	930a      	str	r3, [sp, #40]	; 0x28
 800c320:	e7bf      	b.n	800c2a2 <_dtoa_r+0x1da>
 800c322:	2300      	movs	r3, #0
 800c324:	9308      	str	r3, [sp, #32]
 800c326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c328:	2b00      	cmp	r3, #0
 800c32a:	dc55      	bgt.n	800c3d8 <_dtoa_r+0x310>
 800c32c:	2301      	movs	r3, #1
 800c32e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c332:	461a      	mov	r2, r3
 800c334:	9209      	str	r2, [sp, #36]	; 0x24
 800c336:	e00c      	b.n	800c352 <_dtoa_r+0x28a>
 800c338:	2301      	movs	r3, #1
 800c33a:	e7f3      	b.n	800c324 <_dtoa_r+0x25c>
 800c33c:	2300      	movs	r3, #0
 800c33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c340:	9308      	str	r3, [sp, #32]
 800c342:	9b00      	ldr	r3, [sp, #0]
 800c344:	4413      	add	r3, r2
 800c346:	9302      	str	r3, [sp, #8]
 800c348:	3301      	adds	r3, #1
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	9303      	str	r3, [sp, #12]
 800c34e:	bfb8      	it	lt
 800c350:	2301      	movlt	r3, #1
 800c352:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c354:	2200      	movs	r2, #0
 800c356:	6042      	str	r2, [r0, #4]
 800c358:	2204      	movs	r2, #4
 800c35a:	f102 0614 	add.w	r6, r2, #20
 800c35e:	429e      	cmp	r6, r3
 800c360:	6841      	ldr	r1, [r0, #4]
 800c362:	d93d      	bls.n	800c3e0 <_dtoa_r+0x318>
 800c364:	4620      	mov	r0, r4
 800c366:	f000 fd89 	bl	800ce7c <_Balloc>
 800c36a:	9001      	str	r0, [sp, #4]
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d13b      	bne.n	800c3e8 <_dtoa_r+0x320>
 800c370:	4b11      	ldr	r3, [pc, #68]	; (800c3b8 <_dtoa_r+0x2f0>)
 800c372:	4602      	mov	r2, r0
 800c374:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c378:	e6c0      	b.n	800c0fc <_dtoa_r+0x34>
 800c37a:	2301      	movs	r3, #1
 800c37c:	e7df      	b.n	800c33e <_dtoa_r+0x276>
 800c37e:	bf00      	nop
 800c380:	636f4361 	.word	0x636f4361
 800c384:	3fd287a7 	.word	0x3fd287a7
 800c388:	8b60c8b3 	.word	0x8b60c8b3
 800c38c:	3fc68a28 	.word	0x3fc68a28
 800c390:	509f79fb 	.word	0x509f79fb
 800c394:	3fd34413 	.word	0x3fd34413
 800c398:	0800ed81 	.word	0x0800ed81
 800c39c:	0800ed98 	.word	0x0800ed98
 800c3a0:	7ff00000 	.word	0x7ff00000
 800c3a4:	0800ed7d 	.word	0x0800ed7d
 800c3a8:	0800ed74 	.word	0x0800ed74
 800c3ac:	0800ed51 	.word	0x0800ed51
 800c3b0:	3ff80000 	.word	0x3ff80000
 800c3b4:	0800ee88 	.word	0x0800ee88
 800c3b8:	0800edf3 	.word	0x0800edf3
 800c3bc:	2501      	movs	r5, #1
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9306      	str	r3, [sp, #24]
 800c3c2:	9508      	str	r5, [sp, #32]
 800c3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	2312      	movs	r3, #18
 800c3d0:	e7b0      	b.n	800c334 <_dtoa_r+0x26c>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	9308      	str	r3, [sp, #32]
 800c3d6:	e7f5      	b.n	800c3c4 <_dtoa_r+0x2fc>
 800c3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3de:	e7b8      	b.n	800c352 <_dtoa_r+0x28a>
 800c3e0:	3101      	adds	r1, #1
 800c3e2:	6041      	str	r1, [r0, #4]
 800c3e4:	0052      	lsls	r2, r2, #1
 800c3e6:	e7b8      	b.n	800c35a <_dtoa_r+0x292>
 800c3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ea:	9a01      	ldr	r2, [sp, #4]
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	9b03      	ldr	r3, [sp, #12]
 800c3f0:	2b0e      	cmp	r3, #14
 800c3f2:	f200 809d 	bhi.w	800c530 <_dtoa_r+0x468>
 800c3f6:	2d00      	cmp	r5, #0
 800c3f8:	f000 809a 	beq.w	800c530 <_dtoa_r+0x468>
 800c3fc:	9b00      	ldr	r3, [sp, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dd32      	ble.n	800c468 <_dtoa_r+0x3a0>
 800c402:	4ab7      	ldr	r2, [pc, #732]	; (800c6e0 <_dtoa_r+0x618>)
 800c404:	f003 030f 	and.w	r3, r3, #15
 800c408:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c40c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c410:	9b00      	ldr	r3, [sp, #0]
 800c412:	05d8      	lsls	r0, r3, #23
 800c414:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c418:	d516      	bpl.n	800c448 <_dtoa_r+0x380>
 800c41a:	4bb2      	ldr	r3, [pc, #712]	; (800c6e4 <_dtoa_r+0x61c>)
 800c41c:	ec51 0b19 	vmov	r0, r1, d9
 800c420:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c424:	f7f4 fa12 	bl	800084c <__aeabi_ddiv>
 800c428:	f007 070f 	and.w	r7, r7, #15
 800c42c:	4682      	mov	sl, r0
 800c42e:	468b      	mov	fp, r1
 800c430:	2503      	movs	r5, #3
 800c432:	4eac      	ldr	r6, [pc, #688]	; (800c6e4 <_dtoa_r+0x61c>)
 800c434:	b957      	cbnz	r7, 800c44c <_dtoa_r+0x384>
 800c436:	4642      	mov	r2, r8
 800c438:	464b      	mov	r3, r9
 800c43a:	4650      	mov	r0, sl
 800c43c:	4659      	mov	r1, fp
 800c43e:	f7f4 fa05 	bl	800084c <__aeabi_ddiv>
 800c442:	4682      	mov	sl, r0
 800c444:	468b      	mov	fp, r1
 800c446:	e028      	b.n	800c49a <_dtoa_r+0x3d2>
 800c448:	2502      	movs	r5, #2
 800c44a:	e7f2      	b.n	800c432 <_dtoa_r+0x36a>
 800c44c:	07f9      	lsls	r1, r7, #31
 800c44e:	d508      	bpl.n	800c462 <_dtoa_r+0x39a>
 800c450:	4640      	mov	r0, r8
 800c452:	4649      	mov	r1, r9
 800c454:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c458:	f7f4 f8ce 	bl	80005f8 <__aeabi_dmul>
 800c45c:	3501      	adds	r5, #1
 800c45e:	4680      	mov	r8, r0
 800c460:	4689      	mov	r9, r1
 800c462:	107f      	asrs	r7, r7, #1
 800c464:	3608      	adds	r6, #8
 800c466:	e7e5      	b.n	800c434 <_dtoa_r+0x36c>
 800c468:	f000 809b 	beq.w	800c5a2 <_dtoa_r+0x4da>
 800c46c:	9b00      	ldr	r3, [sp, #0]
 800c46e:	4f9d      	ldr	r7, [pc, #628]	; (800c6e4 <_dtoa_r+0x61c>)
 800c470:	425e      	negs	r6, r3
 800c472:	4b9b      	ldr	r3, [pc, #620]	; (800c6e0 <_dtoa_r+0x618>)
 800c474:	f006 020f 	and.w	r2, r6, #15
 800c478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	ec51 0b19 	vmov	r0, r1, d9
 800c484:	f7f4 f8b8 	bl	80005f8 <__aeabi_dmul>
 800c488:	1136      	asrs	r6, r6, #4
 800c48a:	4682      	mov	sl, r0
 800c48c:	468b      	mov	fp, r1
 800c48e:	2300      	movs	r3, #0
 800c490:	2502      	movs	r5, #2
 800c492:	2e00      	cmp	r6, #0
 800c494:	d17a      	bne.n	800c58c <_dtoa_r+0x4c4>
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1d3      	bne.n	800c442 <_dtoa_r+0x37a>
 800c49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 8082 	beq.w	800c5a6 <_dtoa_r+0x4de>
 800c4a2:	4b91      	ldr	r3, [pc, #580]	; (800c6e8 <_dtoa_r+0x620>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	4650      	mov	r0, sl
 800c4a8:	4659      	mov	r1, fp
 800c4aa:	f7f4 fb17 	bl	8000adc <__aeabi_dcmplt>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d079      	beq.n	800c5a6 <_dtoa_r+0x4de>
 800c4b2:	9b03      	ldr	r3, [sp, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d076      	beq.n	800c5a6 <_dtoa_r+0x4de>
 800c4b8:	9b02      	ldr	r3, [sp, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	dd36      	ble.n	800c52c <_dtoa_r+0x464>
 800c4be:	9b00      	ldr	r3, [sp, #0]
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	4659      	mov	r1, fp
 800c4c4:	1e5f      	subs	r7, r3, #1
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	4b88      	ldr	r3, [pc, #544]	; (800c6ec <_dtoa_r+0x624>)
 800c4ca:	f7f4 f895 	bl	80005f8 <__aeabi_dmul>
 800c4ce:	9e02      	ldr	r6, [sp, #8]
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	468b      	mov	fp, r1
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	f7f4 f824 	bl	8000524 <__aeabi_i2d>
 800c4dc:	4652      	mov	r2, sl
 800c4de:	465b      	mov	r3, fp
 800c4e0:	f7f4 f88a 	bl	80005f8 <__aeabi_dmul>
 800c4e4:	4b82      	ldr	r3, [pc, #520]	; (800c6f0 <_dtoa_r+0x628>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f7f3 fed0 	bl	800028c <__adddf3>
 800c4ec:	46d0      	mov	r8, sl
 800c4ee:	46d9      	mov	r9, fp
 800c4f0:	4682      	mov	sl, r0
 800c4f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c4f6:	2e00      	cmp	r6, #0
 800c4f8:	d158      	bne.n	800c5ac <_dtoa_r+0x4e4>
 800c4fa:	4b7e      	ldr	r3, [pc, #504]	; (800c6f4 <_dtoa_r+0x62c>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	4640      	mov	r0, r8
 800c500:	4649      	mov	r1, r9
 800c502:	f7f3 fec1 	bl	8000288 <__aeabi_dsub>
 800c506:	4652      	mov	r2, sl
 800c508:	465b      	mov	r3, fp
 800c50a:	4680      	mov	r8, r0
 800c50c:	4689      	mov	r9, r1
 800c50e:	f7f4 fb03 	bl	8000b18 <__aeabi_dcmpgt>
 800c512:	2800      	cmp	r0, #0
 800c514:	f040 8295 	bne.w	800ca42 <_dtoa_r+0x97a>
 800c518:	4652      	mov	r2, sl
 800c51a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c51e:	4640      	mov	r0, r8
 800c520:	4649      	mov	r1, r9
 800c522:	f7f4 fadb 	bl	8000adc <__aeabi_dcmplt>
 800c526:	2800      	cmp	r0, #0
 800c528:	f040 8289 	bne.w	800ca3e <_dtoa_r+0x976>
 800c52c:	ec5b ab19 	vmov	sl, fp, d9
 800c530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c532:	2b00      	cmp	r3, #0
 800c534:	f2c0 8148 	blt.w	800c7c8 <_dtoa_r+0x700>
 800c538:	9a00      	ldr	r2, [sp, #0]
 800c53a:	2a0e      	cmp	r2, #14
 800c53c:	f300 8144 	bgt.w	800c7c8 <_dtoa_r+0x700>
 800c540:	4b67      	ldr	r3, [pc, #412]	; (800c6e0 <_dtoa_r+0x618>)
 800c542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c546:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f280 80d5 	bge.w	800c6fc <_dtoa_r+0x634>
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f300 80d1 	bgt.w	800c6fc <_dtoa_r+0x634>
 800c55a:	f040 826f 	bne.w	800ca3c <_dtoa_r+0x974>
 800c55e:	4b65      	ldr	r3, [pc, #404]	; (800c6f4 <_dtoa_r+0x62c>)
 800c560:	2200      	movs	r2, #0
 800c562:	4640      	mov	r0, r8
 800c564:	4649      	mov	r1, r9
 800c566:	f7f4 f847 	bl	80005f8 <__aeabi_dmul>
 800c56a:	4652      	mov	r2, sl
 800c56c:	465b      	mov	r3, fp
 800c56e:	f7f4 fac9 	bl	8000b04 <__aeabi_dcmpge>
 800c572:	9e03      	ldr	r6, [sp, #12]
 800c574:	4637      	mov	r7, r6
 800c576:	2800      	cmp	r0, #0
 800c578:	f040 8245 	bne.w	800ca06 <_dtoa_r+0x93e>
 800c57c:	9d01      	ldr	r5, [sp, #4]
 800c57e:	2331      	movs	r3, #49	; 0x31
 800c580:	f805 3b01 	strb.w	r3, [r5], #1
 800c584:	9b00      	ldr	r3, [sp, #0]
 800c586:	3301      	adds	r3, #1
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	e240      	b.n	800ca0e <_dtoa_r+0x946>
 800c58c:	07f2      	lsls	r2, r6, #31
 800c58e:	d505      	bpl.n	800c59c <_dtoa_r+0x4d4>
 800c590:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c594:	f7f4 f830 	bl	80005f8 <__aeabi_dmul>
 800c598:	3501      	adds	r5, #1
 800c59a:	2301      	movs	r3, #1
 800c59c:	1076      	asrs	r6, r6, #1
 800c59e:	3708      	adds	r7, #8
 800c5a0:	e777      	b.n	800c492 <_dtoa_r+0x3ca>
 800c5a2:	2502      	movs	r5, #2
 800c5a4:	e779      	b.n	800c49a <_dtoa_r+0x3d2>
 800c5a6:	9f00      	ldr	r7, [sp, #0]
 800c5a8:	9e03      	ldr	r6, [sp, #12]
 800c5aa:	e794      	b.n	800c4d6 <_dtoa_r+0x40e>
 800c5ac:	9901      	ldr	r1, [sp, #4]
 800c5ae:	4b4c      	ldr	r3, [pc, #304]	; (800c6e0 <_dtoa_r+0x618>)
 800c5b0:	4431      	add	r1, r6
 800c5b2:	910d      	str	r1, [sp, #52]	; 0x34
 800c5b4:	9908      	ldr	r1, [sp, #32]
 800c5b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5be:	2900      	cmp	r1, #0
 800c5c0:	d043      	beq.n	800c64a <_dtoa_r+0x582>
 800c5c2:	494d      	ldr	r1, [pc, #308]	; (800c6f8 <_dtoa_r+0x630>)
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	f7f4 f941 	bl	800084c <__aeabi_ddiv>
 800c5ca:	4652      	mov	r2, sl
 800c5cc:	465b      	mov	r3, fp
 800c5ce:	f7f3 fe5b 	bl	8000288 <__aeabi_dsub>
 800c5d2:	9d01      	ldr	r5, [sp, #4]
 800c5d4:	4682      	mov	sl, r0
 800c5d6:	468b      	mov	fp, r1
 800c5d8:	4649      	mov	r1, r9
 800c5da:	4640      	mov	r0, r8
 800c5dc:	f7f4 fabc 	bl	8000b58 <__aeabi_d2iz>
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	f7f3 ff9f 	bl	8000524 <__aeabi_i2d>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4640      	mov	r0, r8
 800c5ec:	4649      	mov	r1, r9
 800c5ee:	f7f3 fe4b 	bl	8000288 <__aeabi_dsub>
 800c5f2:	3630      	adds	r6, #48	; 0x30
 800c5f4:	f805 6b01 	strb.w	r6, [r5], #1
 800c5f8:	4652      	mov	r2, sl
 800c5fa:	465b      	mov	r3, fp
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	f7f4 fa6c 	bl	8000adc <__aeabi_dcmplt>
 800c604:	2800      	cmp	r0, #0
 800c606:	d163      	bne.n	800c6d0 <_dtoa_r+0x608>
 800c608:	4642      	mov	r2, r8
 800c60a:	464b      	mov	r3, r9
 800c60c:	4936      	ldr	r1, [pc, #216]	; (800c6e8 <_dtoa_r+0x620>)
 800c60e:	2000      	movs	r0, #0
 800c610:	f7f3 fe3a 	bl	8000288 <__aeabi_dsub>
 800c614:	4652      	mov	r2, sl
 800c616:	465b      	mov	r3, fp
 800c618:	f7f4 fa60 	bl	8000adc <__aeabi_dcmplt>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	f040 80b5 	bne.w	800c78c <_dtoa_r+0x6c4>
 800c622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c624:	429d      	cmp	r5, r3
 800c626:	d081      	beq.n	800c52c <_dtoa_r+0x464>
 800c628:	4b30      	ldr	r3, [pc, #192]	; (800c6ec <_dtoa_r+0x624>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	4650      	mov	r0, sl
 800c62e:	4659      	mov	r1, fp
 800c630:	f7f3 ffe2 	bl	80005f8 <__aeabi_dmul>
 800c634:	4b2d      	ldr	r3, [pc, #180]	; (800c6ec <_dtoa_r+0x624>)
 800c636:	4682      	mov	sl, r0
 800c638:	468b      	mov	fp, r1
 800c63a:	4640      	mov	r0, r8
 800c63c:	4649      	mov	r1, r9
 800c63e:	2200      	movs	r2, #0
 800c640:	f7f3 ffda 	bl	80005f8 <__aeabi_dmul>
 800c644:	4680      	mov	r8, r0
 800c646:	4689      	mov	r9, r1
 800c648:	e7c6      	b.n	800c5d8 <_dtoa_r+0x510>
 800c64a:	4650      	mov	r0, sl
 800c64c:	4659      	mov	r1, fp
 800c64e:	f7f3 ffd3 	bl	80005f8 <__aeabi_dmul>
 800c652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c654:	9d01      	ldr	r5, [sp, #4]
 800c656:	930f      	str	r3, [sp, #60]	; 0x3c
 800c658:	4682      	mov	sl, r0
 800c65a:	468b      	mov	fp, r1
 800c65c:	4649      	mov	r1, r9
 800c65e:	4640      	mov	r0, r8
 800c660:	f7f4 fa7a 	bl	8000b58 <__aeabi_d2iz>
 800c664:	4606      	mov	r6, r0
 800c666:	f7f3 ff5d 	bl	8000524 <__aeabi_i2d>
 800c66a:	3630      	adds	r6, #48	; 0x30
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	4640      	mov	r0, r8
 800c672:	4649      	mov	r1, r9
 800c674:	f7f3 fe08 	bl	8000288 <__aeabi_dsub>
 800c678:	f805 6b01 	strb.w	r6, [r5], #1
 800c67c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c67e:	429d      	cmp	r5, r3
 800c680:	4680      	mov	r8, r0
 800c682:	4689      	mov	r9, r1
 800c684:	f04f 0200 	mov.w	r2, #0
 800c688:	d124      	bne.n	800c6d4 <_dtoa_r+0x60c>
 800c68a:	4b1b      	ldr	r3, [pc, #108]	; (800c6f8 <_dtoa_r+0x630>)
 800c68c:	4650      	mov	r0, sl
 800c68e:	4659      	mov	r1, fp
 800c690:	f7f3 fdfc 	bl	800028c <__adddf3>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4640      	mov	r0, r8
 800c69a:	4649      	mov	r1, r9
 800c69c:	f7f4 fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d173      	bne.n	800c78c <_dtoa_r+0x6c4>
 800c6a4:	4652      	mov	r2, sl
 800c6a6:	465b      	mov	r3, fp
 800c6a8:	4913      	ldr	r1, [pc, #76]	; (800c6f8 <_dtoa_r+0x630>)
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	f7f3 fdec 	bl	8000288 <__aeabi_dsub>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4640      	mov	r0, r8
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	f7f4 fa10 	bl	8000adc <__aeabi_dcmplt>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	f43f af35 	beq.w	800c52c <_dtoa_r+0x464>
 800c6c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c6c4:	1e6b      	subs	r3, r5, #1
 800c6c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6cc:	2b30      	cmp	r3, #48	; 0x30
 800c6ce:	d0f8      	beq.n	800c6c2 <_dtoa_r+0x5fa>
 800c6d0:	9700      	str	r7, [sp, #0]
 800c6d2:	e049      	b.n	800c768 <_dtoa_r+0x6a0>
 800c6d4:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <_dtoa_r+0x624>)
 800c6d6:	f7f3 ff8f 	bl	80005f8 <__aeabi_dmul>
 800c6da:	4680      	mov	r8, r0
 800c6dc:	4689      	mov	r9, r1
 800c6de:	e7bd      	b.n	800c65c <_dtoa_r+0x594>
 800c6e0:	0800ee88 	.word	0x0800ee88
 800c6e4:	0800ee60 	.word	0x0800ee60
 800c6e8:	3ff00000 	.word	0x3ff00000
 800c6ec:	40240000 	.word	0x40240000
 800c6f0:	401c0000 	.word	0x401c0000
 800c6f4:	40140000 	.word	0x40140000
 800c6f8:	3fe00000 	.word	0x3fe00000
 800c6fc:	9d01      	ldr	r5, [sp, #4]
 800c6fe:	4656      	mov	r6, sl
 800c700:	465f      	mov	r7, fp
 800c702:	4642      	mov	r2, r8
 800c704:	464b      	mov	r3, r9
 800c706:	4630      	mov	r0, r6
 800c708:	4639      	mov	r1, r7
 800c70a:	f7f4 f89f 	bl	800084c <__aeabi_ddiv>
 800c70e:	f7f4 fa23 	bl	8000b58 <__aeabi_d2iz>
 800c712:	4682      	mov	sl, r0
 800c714:	f7f3 ff06 	bl	8000524 <__aeabi_i2d>
 800c718:	4642      	mov	r2, r8
 800c71a:	464b      	mov	r3, r9
 800c71c:	f7f3 ff6c 	bl	80005f8 <__aeabi_dmul>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4630      	mov	r0, r6
 800c726:	4639      	mov	r1, r7
 800c728:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c72c:	f7f3 fdac 	bl	8000288 <__aeabi_dsub>
 800c730:	f805 6b01 	strb.w	r6, [r5], #1
 800c734:	9e01      	ldr	r6, [sp, #4]
 800c736:	9f03      	ldr	r7, [sp, #12]
 800c738:	1bae      	subs	r6, r5, r6
 800c73a:	42b7      	cmp	r7, r6
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	d135      	bne.n	800c7ae <_dtoa_r+0x6e6>
 800c742:	f7f3 fda3 	bl	800028c <__adddf3>
 800c746:	4642      	mov	r2, r8
 800c748:	464b      	mov	r3, r9
 800c74a:	4606      	mov	r6, r0
 800c74c:	460f      	mov	r7, r1
 800c74e:	f7f4 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 800c752:	b9d0      	cbnz	r0, 800c78a <_dtoa_r+0x6c2>
 800c754:	4642      	mov	r2, r8
 800c756:	464b      	mov	r3, r9
 800c758:	4630      	mov	r0, r6
 800c75a:	4639      	mov	r1, r7
 800c75c:	f7f4 f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c760:	b110      	cbz	r0, 800c768 <_dtoa_r+0x6a0>
 800c762:	f01a 0f01 	tst.w	sl, #1
 800c766:	d110      	bne.n	800c78a <_dtoa_r+0x6c2>
 800c768:	4620      	mov	r0, r4
 800c76a:	ee18 1a10 	vmov	r1, s16
 800c76e:	f000 fbc5 	bl	800cefc <_Bfree>
 800c772:	2300      	movs	r3, #0
 800c774:	9800      	ldr	r0, [sp, #0]
 800c776:	702b      	strb	r3, [r5, #0]
 800c778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c77a:	3001      	adds	r0, #1
 800c77c:	6018      	str	r0, [r3, #0]
 800c77e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c780:	2b00      	cmp	r3, #0
 800c782:	f43f acf1 	beq.w	800c168 <_dtoa_r+0xa0>
 800c786:	601d      	str	r5, [r3, #0]
 800c788:	e4ee      	b.n	800c168 <_dtoa_r+0xa0>
 800c78a:	9f00      	ldr	r7, [sp, #0]
 800c78c:	462b      	mov	r3, r5
 800c78e:	461d      	mov	r5, r3
 800c790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c794:	2a39      	cmp	r2, #57	; 0x39
 800c796:	d106      	bne.n	800c7a6 <_dtoa_r+0x6de>
 800c798:	9a01      	ldr	r2, [sp, #4]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d1f7      	bne.n	800c78e <_dtoa_r+0x6c6>
 800c79e:	9901      	ldr	r1, [sp, #4]
 800c7a0:	2230      	movs	r2, #48	; 0x30
 800c7a2:	3701      	adds	r7, #1
 800c7a4:	700a      	strb	r2, [r1, #0]
 800c7a6:	781a      	ldrb	r2, [r3, #0]
 800c7a8:	3201      	adds	r2, #1
 800c7aa:	701a      	strb	r2, [r3, #0]
 800c7ac:	e790      	b.n	800c6d0 <_dtoa_r+0x608>
 800c7ae:	4ba6      	ldr	r3, [pc, #664]	; (800ca48 <_dtoa_r+0x980>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f7f3 ff21 	bl	80005f8 <__aeabi_dmul>
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	460f      	mov	r7, r1
 800c7be:	f7f4 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d09d      	beq.n	800c702 <_dtoa_r+0x63a>
 800c7c6:	e7cf      	b.n	800c768 <_dtoa_r+0x6a0>
 800c7c8:	9a08      	ldr	r2, [sp, #32]
 800c7ca:	2a00      	cmp	r2, #0
 800c7cc:	f000 80d7 	beq.w	800c97e <_dtoa_r+0x8b6>
 800c7d0:	9a06      	ldr	r2, [sp, #24]
 800c7d2:	2a01      	cmp	r2, #1
 800c7d4:	f300 80ba 	bgt.w	800c94c <_dtoa_r+0x884>
 800c7d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7da:	2a00      	cmp	r2, #0
 800c7dc:	f000 80b2 	beq.w	800c944 <_dtoa_r+0x87c>
 800c7e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c7e4:	9e07      	ldr	r6, [sp, #28]
 800c7e6:	9d04      	ldr	r5, [sp, #16]
 800c7e8:	9a04      	ldr	r2, [sp, #16]
 800c7ea:	441a      	add	r2, r3
 800c7ec:	9204      	str	r2, [sp, #16]
 800c7ee:	9a05      	ldr	r2, [sp, #20]
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	441a      	add	r2, r3
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	9205      	str	r2, [sp, #20]
 800c7f8:	f000 fc38 	bl	800d06c <__i2b>
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	2d00      	cmp	r5, #0
 800c800:	dd0c      	ble.n	800c81c <_dtoa_r+0x754>
 800c802:	9b05      	ldr	r3, [sp, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	dd09      	ble.n	800c81c <_dtoa_r+0x754>
 800c808:	42ab      	cmp	r3, r5
 800c80a:	9a04      	ldr	r2, [sp, #16]
 800c80c:	bfa8      	it	ge
 800c80e:	462b      	movge	r3, r5
 800c810:	1ad2      	subs	r2, r2, r3
 800c812:	9204      	str	r2, [sp, #16]
 800c814:	9a05      	ldr	r2, [sp, #20]
 800c816:	1aed      	subs	r5, r5, r3
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	9305      	str	r3, [sp, #20]
 800c81c:	9b07      	ldr	r3, [sp, #28]
 800c81e:	b31b      	cbz	r3, 800c868 <_dtoa_r+0x7a0>
 800c820:	9b08      	ldr	r3, [sp, #32]
 800c822:	2b00      	cmp	r3, #0
 800c824:	f000 80af 	beq.w	800c986 <_dtoa_r+0x8be>
 800c828:	2e00      	cmp	r6, #0
 800c82a:	dd13      	ble.n	800c854 <_dtoa_r+0x78c>
 800c82c:	4639      	mov	r1, r7
 800c82e:	4632      	mov	r2, r6
 800c830:	4620      	mov	r0, r4
 800c832:	f000 fcdb 	bl	800d1ec <__pow5mult>
 800c836:	ee18 2a10 	vmov	r2, s16
 800c83a:	4601      	mov	r1, r0
 800c83c:	4607      	mov	r7, r0
 800c83e:	4620      	mov	r0, r4
 800c840:	f000 fc2a 	bl	800d098 <__multiply>
 800c844:	ee18 1a10 	vmov	r1, s16
 800c848:	4680      	mov	r8, r0
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 fb56 	bl	800cefc <_Bfree>
 800c850:	ee08 8a10 	vmov	s16, r8
 800c854:	9b07      	ldr	r3, [sp, #28]
 800c856:	1b9a      	subs	r2, r3, r6
 800c858:	d006      	beq.n	800c868 <_dtoa_r+0x7a0>
 800c85a:	ee18 1a10 	vmov	r1, s16
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 fcc4 	bl	800d1ec <__pow5mult>
 800c864:	ee08 0a10 	vmov	s16, r0
 800c868:	2101      	movs	r1, #1
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 fbfe 	bl	800d06c <__i2b>
 800c870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c872:	2b00      	cmp	r3, #0
 800c874:	4606      	mov	r6, r0
 800c876:	f340 8088 	ble.w	800c98a <_dtoa_r+0x8c2>
 800c87a:	461a      	mov	r2, r3
 800c87c:	4601      	mov	r1, r0
 800c87e:	4620      	mov	r0, r4
 800c880:	f000 fcb4 	bl	800d1ec <__pow5mult>
 800c884:	9b06      	ldr	r3, [sp, #24]
 800c886:	2b01      	cmp	r3, #1
 800c888:	4606      	mov	r6, r0
 800c88a:	f340 8081 	ble.w	800c990 <_dtoa_r+0x8c8>
 800c88e:	f04f 0800 	mov.w	r8, #0
 800c892:	6933      	ldr	r3, [r6, #16]
 800c894:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c898:	6918      	ldr	r0, [r3, #16]
 800c89a:	f000 fb97 	bl	800cfcc <__hi0bits>
 800c89e:	f1c0 0020 	rsb	r0, r0, #32
 800c8a2:	9b05      	ldr	r3, [sp, #20]
 800c8a4:	4418      	add	r0, r3
 800c8a6:	f010 001f 	ands.w	r0, r0, #31
 800c8aa:	f000 8092 	beq.w	800c9d2 <_dtoa_r+0x90a>
 800c8ae:	f1c0 0320 	rsb	r3, r0, #32
 800c8b2:	2b04      	cmp	r3, #4
 800c8b4:	f340 808a 	ble.w	800c9cc <_dtoa_r+0x904>
 800c8b8:	f1c0 001c 	rsb	r0, r0, #28
 800c8bc:	9b04      	ldr	r3, [sp, #16]
 800c8be:	4403      	add	r3, r0
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	9b05      	ldr	r3, [sp, #20]
 800c8c4:	4403      	add	r3, r0
 800c8c6:	4405      	add	r5, r0
 800c8c8:	9305      	str	r3, [sp, #20]
 800c8ca:	9b04      	ldr	r3, [sp, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	dd07      	ble.n	800c8e0 <_dtoa_r+0x818>
 800c8d0:	ee18 1a10 	vmov	r1, s16
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 fce2 	bl	800d2a0 <__lshift>
 800c8dc:	ee08 0a10 	vmov	s16, r0
 800c8e0:	9b05      	ldr	r3, [sp, #20]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	dd05      	ble.n	800c8f2 <_dtoa_r+0x82a>
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 fcd8 	bl	800d2a0 <__lshift>
 800c8f0:	4606      	mov	r6, r0
 800c8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d06e      	beq.n	800c9d6 <_dtoa_r+0x90e>
 800c8f8:	ee18 0a10 	vmov	r0, s16
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	f000 fd3f 	bl	800d380 <__mcmp>
 800c902:	2800      	cmp	r0, #0
 800c904:	da67      	bge.n	800c9d6 <_dtoa_r+0x90e>
 800c906:	9b00      	ldr	r3, [sp, #0]
 800c908:	3b01      	subs	r3, #1
 800c90a:	ee18 1a10 	vmov	r1, s16
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	220a      	movs	r2, #10
 800c912:	2300      	movs	r3, #0
 800c914:	4620      	mov	r0, r4
 800c916:	f000 fb13 	bl	800cf40 <__multadd>
 800c91a:	9b08      	ldr	r3, [sp, #32]
 800c91c:	ee08 0a10 	vmov	s16, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 81b1 	beq.w	800cc88 <_dtoa_r+0xbc0>
 800c926:	2300      	movs	r3, #0
 800c928:	4639      	mov	r1, r7
 800c92a:	220a      	movs	r2, #10
 800c92c:	4620      	mov	r0, r4
 800c92e:	f000 fb07 	bl	800cf40 <__multadd>
 800c932:	9b02      	ldr	r3, [sp, #8]
 800c934:	2b00      	cmp	r3, #0
 800c936:	4607      	mov	r7, r0
 800c938:	f300 808e 	bgt.w	800ca58 <_dtoa_r+0x990>
 800c93c:	9b06      	ldr	r3, [sp, #24]
 800c93e:	2b02      	cmp	r3, #2
 800c940:	dc51      	bgt.n	800c9e6 <_dtoa_r+0x91e>
 800c942:	e089      	b.n	800ca58 <_dtoa_r+0x990>
 800c944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c94a:	e74b      	b.n	800c7e4 <_dtoa_r+0x71c>
 800c94c:	9b03      	ldr	r3, [sp, #12]
 800c94e:	1e5e      	subs	r6, r3, #1
 800c950:	9b07      	ldr	r3, [sp, #28]
 800c952:	42b3      	cmp	r3, r6
 800c954:	bfbf      	itttt	lt
 800c956:	9b07      	ldrlt	r3, [sp, #28]
 800c958:	9607      	strlt	r6, [sp, #28]
 800c95a:	1af2      	sublt	r2, r6, r3
 800c95c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c95e:	bfb6      	itet	lt
 800c960:	189b      	addlt	r3, r3, r2
 800c962:	1b9e      	subge	r6, r3, r6
 800c964:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c966:	9b03      	ldr	r3, [sp, #12]
 800c968:	bfb8      	it	lt
 800c96a:	2600      	movlt	r6, #0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	bfb7      	itett	lt
 800c970:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c974:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c978:	1a9d      	sublt	r5, r3, r2
 800c97a:	2300      	movlt	r3, #0
 800c97c:	e734      	b.n	800c7e8 <_dtoa_r+0x720>
 800c97e:	9e07      	ldr	r6, [sp, #28]
 800c980:	9d04      	ldr	r5, [sp, #16]
 800c982:	9f08      	ldr	r7, [sp, #32]
 800c984:	e73b      	b.n	800c7fe <_dtoa_r+0x736>
 800c986:	9a07      	ldr	r2, [sp, #28]
 800c988:	e767      	b.n	800c85a <_dtoa_r+0x792>
 800c98a:	9b06      	ldr	r3, [sp, #24]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	dc18      	bgt.n	800c9c2 <_dtoa_r+0x8fa>
 800c990:	f1ba 0f00 	cmp.w	sl, #0
 800c994:	d115      	bne.n	800c9c2 <_dtoa_r+0x8fa>
 800c996:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c99a:	b993      	cbnz	r3, 800c9c2 <_dtoa_r+0x8fa>
 800c99c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9a0:	0d1b      	lsrs	r3, r3, #20
 800c9a2:	051b      	lsls	r3, r3, #20
 800c9a4:	b183      	cbz	r3, 800c9c8 <_dtoa_r+0x900>
 800c9a6:	9b04      	ldr	r3, [sp, #16]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	9304      	str	r3, [sp, #16]
 800c9ac:	9b05      	ldr	r3, [sp, #20]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	9305      	str	r3, [sp, #20]
 800c9b2:	f04f 0801 	mov.w	r8, #1
 800c9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f47f af6a 	bne.w	800c892 <_dtoa_r+0x7ca>
 800c9be:	2001      	movs	r0, #1
 800c9c0:	e76f      	b.n	800c8a2 <_dtoa_r+0x7da>
 800c9c2:	f04f 0800 	mov.w	r8, #0
 800c9c6:	e7f6      	b.n	800c9b6 <_dtoa_r+0x8ee>
 800c9c8:	4698      	mov	r8, r3
 800c9ca:	e7f4      	b.n	800c9b6 <_dtoa_r+0x8ee>
 800c9cc:	f43f af7d 	beq.w	800c8ca <_dtoa_r+0x802>
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	301c      	adds	r0, #28
 800c9d4:	e772      	b.n	800c8bc <_dtoa_r+0x7f4>
 800c9d6:	9b03      	ldr	r3, [sp, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	dc37      	bgt.n	800ca4c <_dtoa_r+0x984>
 800c9dc:	9b06      	ldr	r3, [sp, #24]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	dd34      	ble.n	800ca4c <_dtoa_r+0x984>
 800c9e2:	9b03      	ldr	r3, [sp, #12]
 800c9e4:	9302      	str	r3, [sp, #8]
 800c9e6:	9b02      	ldr	r3, [sp, #8]
 800c9e8:	b96b      	cbnz	r3, 800ca06 <_dtoa_r+0x93e>
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	2205      	movs	r2, #5
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f000 faa6 	bl	800cf40 <__multadd>
 800c9f4:	4601      	mov	r1, r0
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	ee18 0a10 	vmov	r0, s16
 800c9fc:	f000 fcc0 	bl	800d380 <__mcmp>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	f73f adbb 	bgt.w	800c57c <_dtoa_r+0x4b4>
 800ca06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca08:	9d01      	ldr	r5, [sp, #4]
 800ca0a:	43db      	mvns	r3, r3
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	f04f 0800 	mov.w	r8, #0
 800ca12:	4631      	mov	r1, r6
 800ca14:	4620      	mov	r0, r4
 800ca16:	f000 fa71 	bl	800cefc <_Bfree>
 800ca1a:	2f00      	cmp	r7, #0
 800ca1c:	f43f aea4 	beq.w	800c768 <_dtoa_r+0x6a0>
 800ca20:	f1b8 0f00 	cmp.w	r8, #0
 800ca24:	d005      	beq.n	800ca32 <_dtoa_r+0x96a>
 800ca26:	45b8      	cmp	r8, r7
 800ca28:	d003      	beq.n	800ca32 <_dtoa_r+0x96a>
 800ca2a:	4641      	mov	r1, r8
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 fa65 	bl	800cefc <_Bfree>
 800ca32:	4639      	mov	r1, r7
 800ca34:	4620      	mov	r0, r4
 800ca36:	f000 fa61 	bl	800cefc <_Bfree>
 800ca3a:	e695      	b.n	800c768 <_dtoa_r+0x6a0>
 800ca3c:	2600      	movs	r6, #0
 800ca3e:	4637      	mov	r7, r6
 800ca40:	e7e1      	b.n	800ca06 <_dtoa_r+0x93e>
 800ca42:	9700      	str	r7, [sp, #0]
 800ca44:	4637      	mov	r7, r6
 800ca46:	e599      	b.n	800c57c <_dtoa_r+0x4b4>
 800ca48:	40240000 	.word	0x40240000
 800ca4c:	9b08      	ldr	r3, [sp, #32]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 80ca 	beq.w	800cbe8 <_dtoa_r+0xb20>
 800ca54:	9b03      	ldr	r3, [sp, #12]
 800ca56:	9302      	str	r3, [sp, #8]
 800ca58:	2d00      	cmp	r5, #0
 800ca5a:	dd05      	ble.n	800ca68 <_dtoa_r+0x9a0>
 800ca5c:	4639      	mov	r1, r7
 800ca5e:	462a      	mov	r2, r5
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 fc1d 	bl	800d2a0 <__lshift>
 800ca66:	4607      	mov	r7, r0
 800ca68:	f1b8 0f00 	cmp.w	r8, #0
 800ca6c:	d05b      	beq.n	800cb26 <_dtoa_r+0xa5e>
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fa03 	bl	800ce7c <_Balloc>
 800ca76:	4605      	mov	r5, r0
 800ca78:	b928      	cbnz	r0, 800ca86 <_dtoa_r+0x9be>
 800ca7a:	4b87      	ldr	r3, [pc, #540]	; (800cc98 <_dtoa_r+0xbd0>)
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ca82:	f7ff bb3b 	b.w	800c0fc <_dtoa_r+0x34>
 800ca86:	693a      	ldr	r2, [r7, #16]
 800ca88:	3202      	adds	r2, #2
 800ca8a:	0092      	lsls	r2, r2, #2
 800ca8c:	f107 010c 	add.w	r1, r7, #12
 800ca90:	300c      	adds	r0, #12
 800ca92:	f7fe fc78 	bl	800b386 <memcpy>
 800ca96:	2201      	movs	r2, #1
 800ca98:	4629      	mov	r1, r5
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f000 fc00 	bl	800d2a0 <__lshift>
 800caa0:	9b01      	ldr	r3, [sp, #4]
 800caa2:	f103 0901 	add.w	r9, r3, #1
 800caa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800caaa:	4413      	add	r3, r2
 800caac:	9305      	str	r3, [sp, #20]
 800caae:	f00a 0301 	and.w	r3, sl, #1
 800cab2:	46b8      	mov	r8, r7
 800cab4:	9304      	str	r3, [sp, #16]
 800cab6:	4607      	mov	r7, r0
 800cab8:	4631      	mov	r1, r6
 800caba:	ee18 0a10 	vmov	r0, s16
 800cabe:	f7ff fa77 	bl	800bfb0 <quorem>
 800cac2:	4641      	mov	r1, r8
 800cac4:	9002      	str	r0, [sp, #8]
 800cac6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800caca:	ee18 0a10 	vmov	r0, s16
 800cace:	f000 fc57 	bl	800d380 <__mcmp>
 800cad2:	463a      	mov	r2, r7
 800cad4:	9003      	str	r0, [sp, #12]
 800cad6:	4631      	mov	r1, r6
 800cad8:	4620      	mov	r0, r4
 800cada:	f000 fc6d 	bl	800d3b8 <__mdiff>
 800cade:	68c2      	ldr	r2, [r0, #12]
 800cae0:	f109 3bff 	add.w	fp, r9, #4294967295
 800cae4:	4605      	mov	r5, r0
 800cae6:	bb02      	cbnz	r2, 800cb2a <_dtoa_r+0xa62>
 800cae8:	4601      	mov	r1, r0
 800caea:	ee18 0a10 	vmov	r0, s16
 800caee:	f000 fc47 	bl	800d380 <__mcmp>
 800caf2:	4602      	mov	r2, r0
 800caf4:	4629      	mov	r1, r5
 800caf6:	4620      	mov	r0, r4
 800caf8:	9207      	str	r2, [sp, #28]
 800cafa:	f000 f9ff 	bl	800cefc <_Bfree>
 800cafe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cb02:	ea43 0102 	orr.w	r1, r3, r2
 800cb06:	9b04      	ldr	r3, [sp, #16]
 800cb08:	430b      	orrs	r3, r1
 800cb0a:	464d      	mov	r5, r9
 800cb0c:	d10f      	bne.n	800cb2e <_dtoa_r+0xa66>
 800cb0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb12:	d02a      	beq.n	800cb6a <_dtoa_r+0xaa2>
 800cb14:	9b03      	ldr	r3, [sp, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	dd02      	ble.n	800cb20 <_dtoa_r+0xa58>
 800cb1a:	9b02      	ldr	r3, [sp, #8]
 800cb1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cb20:	f88b a000 	strb.w	sl, [fp]
 800cb24:	e775      	b.n	800ca12 <_dtoa_r+0x94a>
 800cb26:	4638      	mov	r0, r7
 800cb28:	e7ba      	b.n	800caa0 <_dtoa_r+0x9d8>
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	e7e2      	b.n	800caf4 <_dtoa_r+0xa2c>
 800cb2e:	9b03      	ldr	r3, [sp, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	db04      	blt.n	800cb3e <_dtoa_r+0xa76>
 800cb34:	9906      	ldr	r1, [sp, #24]
 800cb36:	430b      	orrs	r3, r1
 800cb38:	9904      	ldr	r1, [sp, #16]
 800cb3a:	430b      	orrs	r3, r1
 800cb3c:	d122      	bne.n	800cb84 <_dtoa_r+0xabc>
 800cb3e:	2a00      	cmp	r2, #0
 800cb40:	ddee      	ble.n	800cb20 <_dtoa_r+0xa58>
 800cb42:	ee18 1a10 	vmov	r1, s16
 800cb46:	2201      	movs	r2, #1
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f000 fba9 	bl	800d2a0 <__lshift>
 800cb4e:	4631      	mov	r1, r6
 800cb50:	ee08 0a10 	vmov	s16, r0
 800cb54:	f000 fc14 	bl	800d380 <__mcmp>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	dc03      	bgt.n	800cb64 <_dtoa_r+0xa9c>
 800cb5c:	d1e0      	bne.n	800cb20 <_dtoa_r+0xa58>
 800cb5e:	f01a 0f01 	tst.w	sl, #1
 800cb62:	d0dd      	beq.n	800cb20 <_dtoa_r+0xa58>
 800cb64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb68:	d1d7      	bne.n	800cb1a <_dtoa_r+0xa52>
 800cb6a:	2339      	movs	r3, #57	; 0x39
 800cb6c:	f88b 3000 	strb.w	r3, [fp]
 800cb70:	462b      	mov	r3, r5
 800cb72:	461d      	mov	r5, r3
 800cb74:	3b01      	subs	r3, #1
 800cb76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb7a:	2a39      	cmp	r2, #57	; 0x39
 800cb7c:	d071      	beq.n	800cc62 <_dtoa_r+0xb9a>
 800cb7e:	3201      	adds	r2, #1
 800cb80:	701a      	strb	r2, [r3, #0]
 800cb82:	e746      	b.n	800ca12 <_dtoa_r+0x94a>
 800cb84:	2a00      	cmp	r2, #0
 800cb86:	dd07      	ble.n	800cb98 <_dtoa_r+0xad0>
 800cb88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb8c:	d0ed      	beq.n	800cb6a <_dtoa_r+0xaa2>
 800cb8e:	f10a 0301 	add.w	r3, sl, #1
 800cb92:	f88b 3000 	strb.w	r3, [fp]
 800cb96:	e73c      	b.n	800ca12 <_dtoa_r+0x94a>
 800cb98:	9b05      	ldr	r3, [sp, #20]
 800cb9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cb9e:	4599      	cmp	r9, r3
 800cba0:	d047      	beq.n	800cc32 <_dtoa_r+0xb6a>
 800cba2:	ee18 1a10 	vmov	r1, s16
 800cba6:	2300      	movs	r3, #0
 800cba8:	220a      	movs	r2, #10
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f000 f9c8 	bl	800cf40 <__multadd>
 800cbb0:	45b8      	cmp	r8, r7
 800cbb2:	ee08 0a10 	vmov	s16, r0
 800cbb6:	f04f 0300 	mov.w	r3, #0
 800cbba:	f04f 020a 	mov.w	r2, #10
 800cbbe:	4641      	mov	r1, r8
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	d106      	bne.n	800cbd2 <_dtoa_r+0xb0a>
 800cbc4:	f000 f9bc 	bl	800cf40 <__multadd>
 800cbc8:	4680      	mov	r8, r0
 800cbca:	4607      	mov	r7, r0
 800cbcc:	f109 0901 	add.w	r9, r9, #1
 800cbd0:	e772      	b.n	800cab8 <_dtoa_r+0x9f0>
 800cbd2:	f000 f9b5 	bl	800cf40 <__multadd>
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	4680      	mov	r8, r0
 800cbda:	2300      	movs	r3, #0
 800cbdc:	220a      	movs	r2, #10
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 f9ae 	bl	800cf40 <__multadd>
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	e7f1      	b.n	800cbcc <_dtoa_r+0xb04>
 800cbe8:	9b03      	ldr	r3, [sp, #12]
 800cbea:	9302      	str	r3, [sp, #8]
 800cbec:	9d01      	ldr	r5, [sp, #4]
 800cbee:	ee18 0a10 	vmov	r0, s16
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	f7ff f9dc 	bl	800bfb0 <quorem>
 800cbf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cbfc:	9b01      	ldr	r3, [sp, #4]
 800cbfe:	f805 ab01 	strb.w	sl, [r5], #1
 800cc02:	1aea      	subs	r2, r5, r3
 800cc04:	9b02      	ldr	r3, [sp, #8]
 800cc06:	4293      	cmp	r3, r2
 800cc08:	dd09      	ble.n	800cc1e <_dtoa_r+0xb56>
 800cc0a:	ee18 1a10 	vmov	r1, s16
 800cc0e:	2300      	movs	r3, #0
 800cc10:	220a      	movs	r2, #10
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 f994 	bl	800cf40 <__multadd>
 800cc18:	ee08 0a10 	vmov	s16, r0
 800cc1c:	e7e7      	b.n	800cbee <_dtoa_r+0xb26>
 800cc1e:	9b02      	ldr	r3, [sp, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	bfc8      	it	gt
 800cc24:	461d      	movgt	r5, r3
 800cc26:	9b01      	ldr	r3, [sp, #4]
 800cc28:	bfd8      	it	le
 800cc2a:	2501      	movle	r5, #1
 800cc2c:	441d      	add	r5, r3
 800cc2e:	f04f 0800 	mov.w	r8, #0
 800cc32:	ee18 1a10 	vmov	r1, s16
 800cc36:	2201      	movs	r2, #1
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f000 fb31 	bl	800d2a0 <__lshift>
 800cc3e:	4631      	mov	r1, r6
 800cc40:	ee08 0a10 	vmov	s16, r0
 800cc44:	f000 fb9c 	bl	800d380 <__mcmp>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	dc91      	bgt.n	800cb70 <_dtoa_r+0xaa8>
 800cc4c:	d102      	bne.n	800cc54 <_dtoa_r+0xb8c>
 800cc4e:	f01a 0f01 	tst.w	sl, #1
 800cc52:	d18d      	bne.n	800cb70 <_dtoa_r+0xaa8>
 800cc54:	462b      	mov	r3, r5
 800cc56:	461d      	mov	r5, r3
 800cc58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc5c:	2a30      	cmp	r2, #48	; 0x30
 800cc5e:	d0fa      	beq.n	800cc56 <_dtoa_r+0xb8e>
 800cc60:	e6d7      	b.n	800ca12 <_dtoa_r+0x94a>
 800cc62:	9a01      	ldr	r2, [sp, #4]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d184      	bne.n	800cb72 <_dtoa_r+0xaaa>
 800cc68:	9b00      	ldr	r3, [sp, #0]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	2331      	movs	r3, #49	; 0x31
 800cc70:	7013      	strb	r3, [r2, #0]
 800cc72:	e6ce      	b.n	800ca12 <_dtoa_r+0x94a>
 800cc74:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <_dtoa_r+0xbd4>)
 800cc76:	f7ff ba95 	b.w	800c1a4 <_dtoa_r+0xdc>
 800cc7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f47f aa6e 	bne.w	800c15e <_dtoa_r+0x96>
 800cc82:	4b07      	ldr	r3, [pc, #28]	; (800cca0 <_dtoa_r+0xbd8>)
 800cc84:	f7ff ba8e 	b.w	800c1a4 <_dtoa_r+0xdc>
 800cc88:	9b02      	ldr	r3, [sp, #8]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dcae      	bgt.n	800cbec <_dtoa_r+0xb24>
 800cc8e:	9b06      	ldr	r3, [sp, #24]
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	f73f aea8 	bgt.w	800c9e6 <_dtoa_r+0x91e>
 800cc96:	e7a9      	b.n	800cbec <_dtoa_r+0xb24>
 800cc98:	0800edf3 	.word	0x0800edf3
 800cc9c:	0800ed50 	.word	0x0800ed50
 800cca0:	0800ed74 	.word	0x0800ed74

0800cca4 <__sflush_r>:
 800cca4:	898a      	ldrh	r2, [r1, #12]
 800cca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccaa:	4605      	mov	r5, r0
 800ccac:	0710      	lsls	r0, r2, #28
 800ccae:	460c      	mov	r4, r1
 800ccb0:	d458      	bmi.n	800cd64 <__sflush_r+0xc0>
 800ccb2:	684b      	ldr	r3, [r1, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	dc05      	bgt.n	800ccc4 <__sflush_r+0x20>
 800ccb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	dc02      	bgt.n	800ccc4 <__sflush_r+0x20>
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccc6:	2e00      	cmp	r6, #0
 800ccc8:	d0f9      	beq.n	800ccbe <__sflush_r+0x1a>
 800ccca:	2300      	movs	r3, #0
 800cccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccd0:	682f      	ldr	r7, [r5, #0]
 800ccd2:	602b      	str	r3, [r5, #0]
 800ccd4:	d032      	beq.n	800cd3c <__sflush_r+0x98>
 800ccd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	075a      	lsls	r2, r3, #29
 800ccdc:	d505      	bpl.n	800ccea <__sflush_r+0x46>
 800ccde:	6863      	ldr	r3, [r4, #4]
 800cce0:	1ac0      	subs	r0, r0, r3
 800cce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cce4:	b10b      	cbz	r3, 800ccea <__sflush_r+0x46>
 800cce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cce8:	1ac0      	subs	r0, r0, r3
 800ccea:	2300      	movs	r3, #0
 800ccec:	4602      	mov	r2, r0
 800ccee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccf0:	6a21      	ldr	r1, [r4, #32]
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	47b0      	blx	r6
 800ccf6:	1c43      	adds	r3, r0, #1
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	d106      	bne.n	800cd0a <__sflush_r+0x66>
 800ccfc:	6829      	ldr	r1, [r5, #0]
 800ccfe:	291d      	cmp	r1, #29
 800cd00:	d82c      	bhi.n	800cd5c <__sflush_r+0xb8>
 800cd02:	4a2a      	ldr	r2, [pc, #168]	; (800cdac <__sflush_r+0x108>)
 800cd04:	40ca      	lsrs	r2, r1
 800cd06:	07d6      	lsls	r6, r2, #31
 800cd08:	d528      	bpl.n	800cd5c <__sflush_r+0xb8>
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	6062      	str	r2, [r4, #4]
 800cd0e:	04d9      	lsls	r1, r3, #19
 800cd10:	6922      	ldr	r2, [r4, #16]
 800cd12:	6022      	str	r2, [r4, #0]
 800cd14:	d504      	bpl.n	800cd20 <__sflush_r+0x7c>
 800cd16:	1c42      	adds	r2, r0, #1
 800cd18:	d101      	bne.n	800cd1e <__sflush_r+0x7a>
 800cd1a:	682b      	ldr	r3, [r5, #0]
 800cd1c:	b903      	cbnz	r3, 800cd20 <__sflush_r+0x7c>
 800cd1e:	6560      	str	r0, [r4, #84]	; 0x54
 800cd20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd22:	602f      	str	r7, [r5, #0]
 800cd24:	2900      	cmp	r1, #0
 800cd26:	d0ca      	beq.n	800ccbe <__sflush_r+0x1a>
 800cd28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd2c:	4299      	cmp	r1, r3
 800cd2e:	d002      	beq.n	800cd36 <__sflush_r+0x92>
 800cd30:	4628      	mov	r0, r5
 800cd32:	f000 fc3d 	bl	800d5b0 <_free_r>
 800cd36:	2000      	movs	r0, #0
 800cd38:	6360      	str	r0, [r4, #52]	; 0x34
 800cd3a:	e7c1      	b.n	800ccc0 <__sflush_r+0x1c>
 800cd3c:	6a21      	ldr	r1, [r4, #32]
 800cd3e:	2301      	movs	r3, #1
 800cd40:	4628      	mov	r0, r5
 800cd42:	47b0      	blx	r6
 800cd44:	1c41      	adds	r1, r0, #1
 800cd46:	d1c7      	bne.n	800ccd8 <__sflush_r+0x34>
 800cd48:	682b      	ldr	r3, [r5, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0c4      	beq.n	800ccd8 <__sflush_r+0x34>
 800cd4e:	2b1d      	cmp	r3, #29
 800cd50:	d001      	beq.n	800cd56 <__sflush_r+0xb2>
 800cd52:	2b16      	cmp	r3, #22
 800cd54:	d101      	bne.n	800cd5a <__sflush_r+0xb6>
 800cd56:	602f      	str	r7, [r5, #0]
 800cd58:	e7b1      	b.n	800ccbe <__sflush_r+0x1a>
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd60:	81a3      	strh	r3, [r4, #12]
 800cd62:	e7ad      	b.n	800ccc0 <__sflush_r+0x1c>
 800cd64:	690f      	ldr	r7, [r1, #16]
 800cd66:	2f00      	cmp	r7, #0
 800cd68:	d0a9      	beq.n	800ccbe <__sflush_r+0x1a>
 800cd6a:	0793      	lsls	r3, r2, #30
 800cd6c:	680e      	ldr	r6, [r1, #0]
 800cd6e:	bf08      	it	eq
 800cd70:	694b      	ldreq	r3, [r1, #20]
 800cd72:	600f      	str	r7, [r1, #0]
 800cd74:	bf18      	it	ne
 800cd76:	2300      	movne	r3, #0
 800cd78:	eba6 0807 	sub.w	r8, r6, r7
 800cd7c:	608b      	str	r3, [r1, #8]
 800cd7e:	f1b8 0f00 	cmp.w	r8, #0
 800cd82:	dd9c      	ble.n	800ccbe <__sflush_r+0x1a>
 800cd84:	6a21      	ldr	r1, [r4, #32]
 800cd86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd88:	4643      	mov	r3, r8
 800cd8a:	463a      	mov	r2, r7
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	47b0      	blx	r6
 800cd90:	2800      	cmp	r0, #0
 800cd92:	dc06      	bgt.n	800cda2 <__sflush_r+0xfe>
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cda0:	e78e      	b.n	800ccc0 <__sflush_r+0x1c>
 800cda2:	4407      	add	r7, r0
 800cda4:	eba8 0800 	sub.w	r8, r8, r0
 800cda8:	e7e9      	b.n	800cd7e <__sflush_r+0xda>
 800cdaa:	bf00      	nop
 800cdac:	20400001 	.word	0x20400001

0800cdb0 <_fflush_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	690b      	ldr	r3, [r1, #16]
 800cdb4:	4605      	mov	r5, r0
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	b913      	cbnz	r3, 800cdc0 <_fflush_r+0x10>
 800cdba:	2500      	movs	r5, #0
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	bd38      	pop	{r3, r4, r5, pc}
 800cdc0:	b118      	cbz	r0, 800cdca <_fflush_r+0x1a>
 800cdc2:	6983      	ldr	r3, [r0, #24]
 800cdc4:	b90b      	cbnz	r3, 800cdca <_fflush_r+0x1a>
 800cdc6:	f7fe fa19 	bl	800b1fc <__sinit>
 800cdca:	4b14      	ldr	r3, [pc, #80]	; (800ce1c <_fflush_r+0x6c>)
 800cdcc:	429c      	cmp	r4, r3
 800cdce:	d11b      	bne.n	800ce08 <_fflush_r+0x58>
 800cdd0:	686c      	ldr	r4, [r5, #4]
 800cdd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d0ef      	beq.n	800cdba <_fflush_r+0xa>
 800cdda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cddc:	07d0      	lsls	r0, r2, #31
 800cdde:	d404      	bmi.n	800cdea <_fflush_r+0x3a>
 800cde0:	0599      	lsls	r1, r3, #22
 800cde2:	d402      	bmi.n	800cdea <_fflush_r+0x3a>
 800cde4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cde6:	f7fe facc 	bl	800b382 <__retarget_lock_acquire_recursive>
 800cdea:	4628      	mov	r0, r5
 800cdec:	4621      	mov	r1, r4
 800cdee:	f7ff ff59 	bl	800cca4 <__sflush_r>
 800cdf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdf4:	07da      	lsls	r2, r3, #31
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	d4e0      	bmi.n	800cdbc <_fflush_r+0xc>
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	059b      	lsls	r3, r3, #22
 800cdfe:	d4dd      	bmi.n	800cdbc <_fflush_r+0xc>
 800ce00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce02:	f7fe fabf 	bl	800b384 <__retarget_lock_release_recursive>
 800ce06:	e7d9      	b.n	800cdbc <_fflush_r+0xc>
 800ce08:	4b05      	ldr	r3, [pc, #20]	; (800ce20 <_fflush_r+0x70>)
 800ce0a:	429c      	cmp	r4, r3
 800ce0c:	d101      	bne.n	800ce12 <_fflush_r+0x62>
 800ce0e:	68ac      	ldr	r4, [r5, #8]
 800ce10:	e7df      	b.n	800cdd2 <_fflush_r+0x22>
 800ce12:	4b04      	ldr	r3, [pc, #16]	; (800ce24 <_fflush_r+0x74>)
 800ce14:	429c      	cmp	r4, r3
 800ce16:	bf08      	it	eq
 800ce18:	68ec      	ldreq	r4, [r5, #12]
 800ce1a:	e7da      	b.n	800cdd2 <_fflush_r+0x22>
 800ce1c:	0800ecfc 	.word	0x0800ecfc
 800ce20:	0800ed1c 	.word	0x0800ed1c
 800ce24:	0800ecdc 	.word	0x0800ecdc

0800ce28 <_localeconv_r>:
 800ce28:	4800      	ldr	r0, [pc, #0]	; (800ce2c <_localeconv_r+0x4>)
 800ce2a:	4770      	bx	lr
 800ce2c:	20000168 	.word	0x20000168

0800ce30 <_lseek_r>:
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	4d07      	ldr	r5, [pc, #28]	; (800ce50 <_lseek_r+0x20>)
 800ce34:	4604      	mov	r4, r0
 800ce36:	4608      	mov	r0, r1
 800ce38:	4611      	mov	r1, r2
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	602a      	str	r2, [r5, #0]
 800ce3e:	461a      	mov	r2, r3
 800ce40:	f7f6 fbb0 	bl	80035a4 <_lseek>
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	d102      	bne.n	800ce4e <_lseek_r+0x1e>
 800ce48:	682b      	ldr	r3, [r5, #0]
 800ce4a:	b103      	cbz	r3, 800ce4e <_lseek_r+0x1e>
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	bd38      	pop	{r3, r4, r5, pc}
 800ce50:	200052ec 	.word	0x200052ec

0800ce54 <malloc>:
 800ce54:	4b02      	ldr	r3, [pc, #8]	; (800ce60 <malloc+0xc>)
 800ce56:	4601      	mov	r1, r0
 800ce58:	6818      	ldr	r0, [r3, #0]
 800ce5a:	f7fe bacb 	b.w	800b3f4 <_malloc_r>
 800ce5e:	bf00      	nop
 800ce60:	20000014 	.word	0x20000014

0800ce64 <__malloc_lock>:
 800ce64:	4801      	ldr	r0, [pc, #4]	; (800ce6c <__malloc_lock+0x8>)
 800ce66:	f7fe ba8c 	b.w	800b382 <__retarget_lock_acquire_recursive>
 800ce6a:	bf00      	nop
 800ce6c:	200052e0 	.word	0x200052e0

0800ce70 <__malloc_unlock>:
 800ce70:	4801      	ldr	r0, [pc, #4]	; (800ce78 <__malloc_unlock+0x8>)
 800ce72:	f7fe ba87 	b.w	800b384 <__retarget_lock_release_recursive>
 800ce76:	bf00      	nop
 800ce78:	200052e0 	.word	0x200052e0

0800ce7c <_Balloc>:
 800ce7c:	b570      	push	{r4, r5, r6, lr}
 800ce7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce80:	4604      	mov	r4, r0
 800ce82:	460d      	mov	r5, r1
 800ce84:	b976      	cbnz	r6, 800cea4 <_Balloc+0x28>
 800ce86:	2010      	movs	r0, #16
 800ce88:	f7ff ffe4 	bl	800ce54 <malloc>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	6260      	str	r0, [r4, #36]	; 0x24
 800ce90:	b920      	cbnz	r0, 800ce9c <_Balloc+0x20>
 800ce92:	4b18      	ldr	r3, [pc, #96]	; (800cef4 <_Balloc+0x78>)
 800ce94:	4818      	ldr	r0, [pc, #96]	; (800cef8 <_Balloc+0x7c>)
 800ce96:	2166      	movs	r1, #102	; 0x66
 800ce98:	f000 fd44 	bl	800d924 <__assert_func>
 800ce9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cea0:	6006      	str	r6, [r0, #0]
 800cea2:	60c6      	str	r6, [r0, #12]
 800cea4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cea6:	68f3      	ldr	r3, [r6, #12]
 800cea8:	b183      	cbz	r3, 800cecc <_Balloc+0x50>
 800ceaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ceb2:	b9b8      	cbnz	r0, 800cee4 <_Balloc+0x68>
 800ceb4:	2101      	movs	r1, #1
 800ceb6:	fa01 f605 	lsl.w	r6, r1, r5
 800ceba:	1d72      	adds	r2, r6, #5
 800cebc:	0092      	lsls	r2, r2, #2
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 fb60 	bl	800d584 <_calloc_r>
 800cec4:	b160      	cbz	r0, 800cee0 <_Balloc+0x64>
 800cec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ceca:	e00e      	b.n	800ceea <_Balloc+0x6e>
 800cecc:	2221      	movs	r2, #33	; 0x21
 800cece:	2104      	movs	r1, #4
 800ced0:	4620      	mov	r0, r4
 800ced2:	f000 fb57 	bl	800d584 <_calloc_r>
 800ced6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced8:	60f0      	str	r0, [r6, #12]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1e4      	bne.n	800ceaa <_Balloc+0x2e>
 800cee0:	2000      	movs	r0, #0
 800cee2:	bd70      	pop	{r4, r5, r6, pc}
 800cee4:	6802      	ldr	r2, [r0, #0]
 800cee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ceea:	2300      	movs	r3, #0
 800ceec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cef0:	e7f7      	b.n	800cee2 <_Balloc+0x66>
 800cef2:	bf00      	nop
 800cef4:	0800ed81 	.word	0x0800ed81
 800cef8:	0800ee04 	.word	0x0800ee04

0800cefc <_Bfree>:
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf00:	4605      	mov	r5, r0
 800cf02:	460c      	mov	r4, r1
 800cf04:	b976      	cbnz	r6, 800cf24 <_Bfree+0x28>
 800cf06:	2010      	movs	r0, #16
 800cf08:	f7ff ffa4 	bl	800ce54 <malloc>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	6268      	str	r0, [r5, #36]	; 0x24
 800cf10:	b920      	cbnz	r0, 800cf1c <_Bfree+0x20>
 800cf12:	4b09      	ldr	r3, [pc, #36]	; (800cf38 <_Bfree+0x3c>)
 800cf14:	4809      	ldr	r0, [pc, #36]	; (800cf3c <_Bfree+0x40>)
 800cf16:	218a      	movs	r1, #138	; 0x8a
 800cf18:	f000 fd04 	bl	800d924 <__assert_func>
 800cf1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf20:	6006      	str	r6, [r0, #0]
 800cf22:	60c6      	str	r6, [r0, #12]
 800cf24:	b13c      	cbz	r4, 800cf36 <_Bfree+0x3a>
 800cf26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf28:	6862      	ldr	r2, [r4, #4]
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf30:	6021      	str	r1, [r4, #0]
 800cf32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf36:	bd70      	pop	{r4, r5, r6, pc}
 800cf38:	0800ed81 	.word	0x0800ed81
 800cf3c:	0800ee04 	.word	0x0800ee04

0800cf40 <__multadd>:
 800cf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf44:	690d      	ldr	r5, [r1, #16]
 800cf46:	4607      	mov	r7, r0
 800cf48:	460c      	mov	r4, r1
 800cf4a:	461e      	mov	r6, r3
 800cf4c:	f101 0c14 	add.w	ip, r1, #20
 800cf50:	2000      	movs	r0, #0
 800cf52:	f8dc 3000 	ldr.w	r3, [ip]
 800cf56:	b299      	uxth	r1, r3
 800cf58:	fb02 6101 	mla	r1, r2, r1, r6
 800cf5c:	0c1e      	lsrs	r6, r3, #16
 800cf5e:	0c0b      	lsrs	r3, r1, #16
 800cf60:	fb02 3306 	mla	r3, r2, r6, r3
 800cf64:	b289      	uxth	r1, r1
 800cf66:	3001      	adds	r0, #1
 800cf68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf6c:	4285      	cmp	r5, r0
 800cf6e:	f84c 1b04 	str.w	r1, [ip], #4
 800cf72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf76:	dcec      	bgt.n	800cf52 <__multadd+0x12>
 800cf78:	b30e      	cbz	r6, 800cfbe <__multadd+0x7e>
 800cf7a:	68a3      	ldr	r3, [r4, #8]
 800cf7c:	42ab      	cmp	r3, r5
 800cf7e:	dc19      	bgt.n	800cfb4 <__multadd+0x74>
 800cf80:	6861      	ldr	r1, [r4, #4]
 800cf82:	4638      	mov	r0, r7
 800cf84:	3101      	adds	r1, #1
 800cf86:	f7ff ff79 	bl	800ce7c <_Balloc>
 800cf8a:	4680      	mov	r8, r0
 800cf8c:	b928      	cbnz	r0, 800cf9a <__multadd+0x5a>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	4b0c      	ldr	r3, [pc, #48]	; (800cfc4 <__multadd+0x84>)
 800cf92:	480d      	ldr	r0, [pc, #52]	; (800cfc8 <__multadd+0x88>)
 800cf94:	21b5      	movs	r1, #181	; 0xb5
 800cf96:	f000 fcc5 	bl	800d924 <__assert_func>
 800cf9a:	6922      	ldr	r2, [r4, #16]
 800cf9c:	3202      	adds	r2, #2
 800cf9e:	f104 010c 	add.w	r1, r4, #12
 800cfa2:	0092      	lsls	r2, r2, #2
 800cfa4:	300c      	adds	r0, #12
 800cfa6:	f7fe f9ee 	bl	800b386 <memcpy>
 800cfaa:	4621      	mov	r1, r4
 800cfac:	4638      	mov	r0, r7
 800cfae:	f7ff ffa5 	bl	800cefc <_Bfree>
 800cfb2:	4644      	mov	r4, r8
 800cfb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfb8:	3501      	adds	r5, #1
 800cfba:	615e      	str	r6, [r3, #20]
 800cfbc:	6125      	str	r5, [r4, #16]
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc4:	0800edf3 	.word	0x0800edf3
 800cfc8:	0800ee04 	.word	0x0800ee04

0800cfcc <__hi0bits>:
 800cfcc:	0c03      	lsrs	r3, r0, #16
 800cfce:	041b      	lsls	r3, r3, #16
 800cfd0:	b9d3      	cbnz	r3, 800d008 <__hi0bits+0x3c>
 800cfd2:	0400      	lsls	r0, r0, #16
 800cfd4:	2310      	movs	r3, #16
 800cfd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cfda:	bf04      	itt	eq
 800cfdc:	0200      	lsleq	r0, r0, #8
 800cfde:	3308      	addeq	r3, #8
 800cfe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cfe4:	bf04      	itt	eq
 800cfe6:	0100      	lsleq	r0, r0, #4
 800cfe8:	3304      	addeq	r3, #4
 800cfea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cfee:	bf04      	itt	eq
 800cff0:	0080      	lsleq	r0, r0, #2
 800cff2:	3302      	addeq	r3, #2
 800cff4:	2800      	cmp	r0, #0
 800cff6:	db05      	blt.n	800d004 <__hi0bits+0x38>
 800cff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cffc:	f103 0301 	add.w	r3, r3, #1
 800d000:	bf08      	it	eq
 800d002:	2320      	moveq	r3, #32
 800d004:	4618      	mov	r0, r3
 800d006:	4770      	bx	lr
 800d008:	2300      	movs	r3, #0
 800d00a:	e7e4      	b.n	800cfd6 <__hi0bits+0xa>

0800d00c <__lo0bits>:
 800d00c:	6803      	ldr	r3, [r0, #0]
 800d00e:	f013 0207 	ands.w	r2, r3, #7
 800d012:	4601      	mov	r1, r0
 800d014:	d00b      	beq.n	800d02e <__lo0bits+0x22>
 800d016:	07da      	lsls	r2, r3, #31
 800d018:	d423      	bmi.n	800d062 <__lo0bits+0x56>
 800d01a:	0798      	lsls	r0, r3, #30
 800d01c:	bf49      	itett	mi
 800d01e:	085b      	lsrmi	r3, r3, #1
 800d020:	089b      	lsrpl	r3, r3, #2
 800d022:	2001      	movmi	r0, #1
 800d024:	600b      	strmi	r3, [r1, #0]
 800d026:	bf5c      	itt	pl
 800d028:	600b      	strpl	r3, [r1, #0]
 800d02a:	2002      	movpl	r0, #2
 800d02c:	4770      	bx	lr
 800d02e:	b298      	uxth	r0, r3
 800d030:	b9a8      	cbnz	r0, 800d05e <__lo0bits+0x52>
 800d032:	0c1b      	lsrs	r3, r3, #16
 800d034:	2010      	movs	r0, #16
 800d036:	b2da      	uxtb	r2, r3
 800d038:	b90a      	cbnz	r2, 800d03e <__lo0bits+0x32>
 800d03a:	3008      	adds	r0, #8
 800d03c:	0a1b      	lsrs	r3, r3, #8
 800d03e:	071a      	lsls	r2, r3, #28
 800d040:	bf04      	itt	eq
 800d042:	091b      	lsreq	r3, r3, #4
 800d044:	3004      	addeq	r0, #4
 800d046:	079a      	lsls	r2, r3, #30
 800d048:	bf04      	itt	eq
 800d04a:	089b      	lsreq	r3, r3, #2
 800d04c:	3002      	addeq	r0, #2
 800d04e:	07da      	lsls	r2, r3, #31
 800d050:	d403      	bmi.n	800d05a <__lo0bits+0x4e>
 800d052:	085b      	lsrs	r3, r3, #1
 800d054:	f100 0001 	add.w	r0, r0, #1
 800d058:	d005      	beq.n	800d066 <__lo0bits+0x5a>
 800d05a:	600b      	str	r3, [r1, #0]
 800d05c:	4770      	bx	lr
 800d05e:	4610      	mov	r0, r2
 800d060:	e7e9      	b.n	800d036 <__lo0bits+0x2a>
 800d062:	2000      	movs	r0, #0
 800d064:	4770      	bx	lr
 800d066:	2020      	movs	r0, #32
 800d068:	4770      	bx	lr
	...

0800d06c <__i2b>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	460c      	mov	r4, r1
 800d070:	2101      	movs	r1, #1
 800d072:	f7ff ff03 	bl	800ce7c <_Balloc>
 800d076:	4602      	mov	r2, r0
 800d078:	b928      	cbnz	r0, 800d086 <__i2b+0x1a>
 800d07a:	4b05      	ldr	r3, [pc, #20]	; (800d090 <__i2b+0x24>)
 800d07c:	4805      	ldr	r0, [pc, #20]	; (800d094 <__i2b+0x28>)
 800d07e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d082:	f000 fc4f 	bl	800d924 <__assert_func>
 800d086:	2301      	movs	r3, #1
 800d088:	6144      	str	r4, [r0, #20]
 800d08a:	6103      	str	r3, [r0, #16]
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	bf00      	nop
 800d090:	0800edf3 	.word	0x0800edf3
 800d094:	0800ee04 	.word	0x0800ee04

0800d098 <__multiply>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	4691      	mov	r9, r2
 800d09e:	690a      	ldr	r2, [r1, #16]
 800d0a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	bfb8      	it	lt
 800d0a8:	460b      	movlt	r3, r1
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	bfbc      	itt	lt
 800d0ae:	464c      	movlt	r4, r9
 800d0b0:	4699      	movlt	r9, r3
 800d0b2:	6927      	ldr	r7, [r4, #16]
 800d0b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d0b8:	68a3      	ldr	r3, [r4, #8]
 800d0ba:	6861      	ldr	r1, [r4, #4]
 800d0bc:	eb07 060a 	add.w	r6, r7, sl
 800d0c0:	42b3      	cmp	r3, r6
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	bfb8      	it	lt
 800d0c6:	3101      	addlt	r1, #1
 800d0c8:	f7ff fed8 	bl	800ce7c <_Balloc>
 800d0cc:	b930      	cbnz	r0, 800d0dc <__multiply+0x44>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	4b44      	ldr	r3, [pc, #272]	; (800d1e4 <__multiply+0x14c>)
 800d0d2:	4845      	ldr	r0, [pc, #276]	; (800d1e8 <__multiply+0x150>)
 800d0d4:	f240 115d 	movw	r1, #349	; 0x15d
 800d0d8:	f000 fc24 	bl	800d924 <__assert_func>
 800d0dc:	f100 0514 	add.w	r5, r0, #20
 800d0e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0e4:	462b      	mov	r3, r5
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	4543      	cmp	r3, r8
 800d0ea:	d321      	bcc.n	800d130 <__multiply+0x98>
 800d0ec:	f104 0314 	add.w	r3, r4, #20
 800d0f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d0f4:	f109 0314 	add.w	r3, r9, #20
 800d0f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d0fc:	9202      	str	r2, [sp, #8]
 800d0fe:	1b3a      	subs	r2, r7, r4
 800d100:	3a15      	subs	r2, #21
 800d102:	f022 0203 	bic.w	r2, r2, #3
 800d106:	3204      	adds	r2, #4
 800d108:	f104 0115 	add.w	r1, r4, #21
 800d10c:	428f      	cmp	r7, r1
 800d10e:	bf38      	it	cc
 800d110:	2204      	movcc	r2, #4
 800d112:	9201      	str	r2, [sp, #4]
 800d114:	9a02      	ldr	r2, [sp, #8]
 800d116:	9303      	str	r3, [sp, #12]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d80c      	bhi.n	800d136 <__multiply+0x9e>
 800d11c:	2e00      	cmp	r6, #0
 800d11e:	dd03      	ble.n	800d128 <__multiply+0x90>
 800d120:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d124:	2b00      	cmp	r3, #0
 800d126:	d05a      	beq.n	800d1de <__multiply+0x146>
 800d128:	6106      	str	r6, [r0, #16]
 800d12a:	b005      	add	sp, #20
 800d12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d130:	f843 2b04 	str.w	r2, [r3], #4
 800d134:	e7d8      	b.n	800d0e8 <__multiply+0x50>
 800d136:	f8b3 a000 	ldrh.w	sl, [r3]
 800d13a:	f1ba 0f00 	cmp.w	sl, #0
 800d13e:	d024      	beq.n	800d18a <__multiply+0xf2>
 800d140:	f104 0e14 	add.w	lr, r4, #20
 800d144:	46a9      	mov	r9, r5
 800d146:	f04f 0c00 	mov.w	ip, #0
 800d14a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d14e:	f8d9 1000 	ldr.w	r1, [r9]
 800d152:	fa1f fb82 	uxth.w	fp, r2
 800d156:	b289      	uxth	r1, r1
 800d158:	fb0a 110b 	mla	r1, sl, fp, r1
 800d15c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d160:	f8d9 2000 	ldr.w	r2, [r9]
 800d164:	4461      	add	r1, ip
 800d166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d16a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d16e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d172:	b289      	uxth	r1, r1
 800d174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d178:	4577      	cmp	r7, lr
 800d17a:	f849 1b04 	str.w	r1, [r9], #4
 800d17e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d182:	d8e2      	bhi.n	800d14a <__multiply+0xb2>
 800d184:	9a01      	ldr	r2, [sp, #4]
 800d186:	f845 c002 	str.w	ip, [r5, r2]
 800d18a:	9a03      	ldr	r2, [sp, #12]
 800d18c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d190:	3304      	adds	r3, #4
 800d192:	f1b9 0f00 	cmp.w	r9, #0
 800d196:	d020      	beq.n	800d1da <__multiply+0x142>
 800d198:	6829      	ldr	r1, [r5, #0]
 800d19a:	f104 0c14 	add.w	ip, r4, #20
 800d19e:	46ae      	mov	lr, r5
 800d1a0:	f04f 0a00 	mov.w	sl, #0
 800d1a4:	f8bc b000 	ldrh.w	fp, [ip]
 800d1a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d1ac:	fb09 220b 	mla	r2, r9, fp, r2
 800d1b0:	4492      	add	sl, r2
 800d1b2:	b289      	uxth	r1, r1
 800d1b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d1b8:	f84e 1b04 	str.w	r1, [lr], #4
 800d1bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1c0:	f8be 1000 	ldrh.w	r1, [lr]
 800d1c4:	0c12      	lsrs	r2, r2, #16
 800d1c6:	fb09 1102 	mla	r1, r9, r2, r1
 800d1ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d1ce:	4567      	cmp	r7, ip
 800d1d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d1d4:	d8e6      	bhi.n	800d1a4 <__multiply+0x10c>
 800d1d6:	9a01      	ldr	r2, [sp, #4]
 800d1d8:	50a9      	str	r1, [r5, r2]
 800d1da:	3504      	adds	r5, #4
 800d1dc:	e79a      	b.n	800d114 <__multiply+0x7c>
 800d1de:	3e01      	subs	r6, #1
 800d1e0:	e79c      	b.n	800d11c <__multiply+0x84>
 800d1e2:	bf00      	nop
 800d1e4:	0800edf3 	.word	0x0800edf3
 800d1e8:	0800ee04 	.word	0x0800ee04

0800d1ec <__pow5mult>:
 800d1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1f0:	4615      	mov	r5, r2
 800d1f2:	f012 0203 	ands.w	r2, r2, #3
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	460f      	mov	r7, r1
 800d1fa:	d007      	beq.n	800d20c <__pow5mult+0x20>
 800d1fc:	4c25      	ldr	r4, [pc, #148]	; (800d294 <__pow5mult+0xa8>)
 800d1fe:	3a01      	subs	r2, #1
 800d200:	2300      	movs	r3, #0
 800d202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d206:	f7ff fe9b 	bl	800cf40 <__multadd>
 800d20a:	4607      	mov	r7, r0
 800d20c:	10ad      	asrs	r5, r5, #2
 800d20e:	d03d      	beq.n	800d28c <__pow5mult+0xa0>
 800d210:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d212:	b97c      	cbnz	r4, 800d234 <__pow5mult+0x48>
 800d214:	2010      	movs	r0, #16
 800d216:	f7ff fe1d 	bl	800ce54 <malloc>
 800d21a:	4602      	mov	r2, r0
 800d21c:	6270      	str	r0, [r6, #36]	; 0x24
 800d21e:	b928      	cbnz	r0, 800d22c <__pow5mult+0x40>
 800d220:	4b1d      	ldr	r3, [pc, #116]	; (800d298 <__pow5mult+0xac>)
 800d222:	481e      	ldr	r0, [pc, #120]	; (800d29c <__pow5mult+0xb0>)
 800d224:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d228:	f000 fb7c 	bl	800d924 <__assert_func>
 800d22c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d230:	6004      	str	r4, [r0, #0]
 800d232:	60c4      	str	r4, [r0, #12]
 800d234:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d23c:	b94c      	cbnz	r4, 800d252 <__pow5mult+0x66>
 800d23e:	f240 2171 	movw	r1, #625	; 0x271
 800d242:	4630      	mov	r0, r6
 800d244:	f7ff ff12 	bl	800d06c <__i2b>
 800d248:	2300      	movs	r3, #0
 800d24a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d24e:	4604      	mov	r4, r0
 800d250:	6003      	str	r3, [r0, #0]
 800d252:	f04f 0900 	mov.w	r9, #0
 800d256:	07eb      	lsls	r3, r5, #31
 800d258:	d50a      	bpl.n	800d270 <__pow5mult+0x84>
 800d25a:	4639      	mov	r1, r7
 800d25c:	4622      	mov	r2, r4
 800d25e:	4630      	mov	r0, r6
 800d260:	f7ff ff1a 	bl	800d098 <__multiply>
 800d264:	4639      	mov	r1, r7
 800d266:	4680      	mov	r8, r0
 800d268:	4630      	mov	r0, r6
 800d26a:	f7ff fe47 	bl	800cefc <_Bfree>
 800d26e:	4647      	mov	r7, r8
 800d270:	106d      	asrs	r5, r5, #1
 800d272:	d00b      	beq.n	800d28c <__pow5mult+0xa0>
 800d274:	6820      	ldr	r0, [r4, #0]
 800d276:	b938      	cbnz	r0, 800d288 <__pow5mult+0x9c>
 800d278:	4622      	mov	r2, r4
 800d27a:	4621      	mov	r1, r4
 800d27c:	4630      	mov	r0, r6
 800d27e:	f7ff ff0b 	bl	800d098 <__multiply>
 800d282:	6020      	str	r0, [r4, #0]
 800d284:	f8c0 9000 	str.w	r9, [r0]
 800d288:	4604      	mov	r4, r0
 800d28a:	e7e4      	b.n	800d256 <__pow5mult+0x6a>
 800d28c:	4638      	mov	r0, r7
 800d28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d292:	bf00      	nop
 800d294:	0800ef50 	.word	0x0800ef50
 800d298:	0800ed81 	.word	0x0800ed81
 800d29c:	0800ee04 	.word	0x0800ee04

0800d2a0 <__lshift>:
 800d2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a4:	460c      	mov	r4, r1
 800d2a6:	6849      	ldr	r1, [r1, #4]
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2ae:	68a3      	ldr	r3, [r4, #8]
 800d2b0:	4607      	mov	r7, r0
 800d2b2:	4691      	mov	r9, r2
 800d2b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2b8:	f108 0601 	add.w	r6, r8, #1
 800d2bc:	42b3      	cmp	r3, r6
 800d2be:	db0b      	blt.n	800d2d8 <__lshift+0x38>
 800d2c0:	4638      	mov	r0, r7
 800d2c2:	f7ff fddb 	bl	800ce7c <_Balloc>
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	b948      	cbnz	r0, 800d2de <__lshift+0x3e>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	4b2a      	ldr	r3, [pc, #168]	; (800d378 <__lshift+0xd8>)
 800d2ce:	482b      	ldr	r0, [pc, #172]	; (800d37c <__lshift+0xdc>)
 800d2d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d2d4:	f000 fb26 	bl	800d924 <__assert_func>
 800d2d8:	3101      	adds	r1, #1
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	e7ee      	b.n	800d2bc <__lshift+0x1c>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	f100 0114 	add.w	r1, r0, #20
 800d2e4:	f100 0210 	add.w	r2, r0, #16
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	4553      	cmp	r3, sl
 800d2ec:	db37      	blt.n	800d35e <__lshift+0xbe>
 800d2ee:	6920      	ldr	r0, [r4, #16]
 800d2f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2f4:	f104 0314 	add.w	r3, r4, #20
 800d2f8:	f019 091f 	ands.w	r9, r9, #31
 800d2fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d300:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d304:	d02f      	beq.n	800d366 <__lshift+0xc6>
 800d306:	f1c9 0e20 	rsb	lr, r9, #32
 800d30a:	468a      	mov	sl, r1
 800d30c:	f04f 0c00 	mov.w	ip, #0
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	fa02 f209 	lsl.w	r2, r2, r9
 800d316:	ea42 020c 	orr.w	r2, r2, ip
 800d31a:	f84a 2b04 	str.w	r2, [sl], #4
 800d31e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d322:	4298      	cmp	r0, r3
 800d324:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d328:	d8f2      	bhi.n	800d310 <__lshift+0x70>
 800d32a:	1b03      	subs	r3, r0, r4
 800d32c:	3b15      	subs	r3, #21
 800d32e:	f023 0303 	bic.w	r3, r3, #3
 800d332:	3304      	adds	r3, #4
 800d334:	f104 0215 	add.w	r2, r4, #21
 800d338:	4290      	cmp	r0, r2
 800d33a:	bf38      	it	cc
 800d33c:	2304      	movcc	r3, #4
 800d33e:	f841 c003 	str.w	ip, [r1, r3]
 800d342:	f1bc 0f00 	cmp.w	ip, #0
 800d346:	d001      	beq.n	800d34c <__lshift+0xac>
 800d348:	f108 0602 	add.w	r6, r8, #2
 800d34c:	3e01      	subs	r6, #1
 800d34e:	4638      	mov	r0, r7
 800d350:	612e      	str	r6, [r5, #16]
 800d352:	4621      	mov	r1, r4
 800d354:	f7ff fdd2 	bl	800cefc <_Bfree>
 800d358:	4628      	mov	r0, r5
 800d35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d35e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d362:	3301      	adds	r3, #1
 800d364:	e7c1      	b.n	800d2ea <__lshift+0x4a>
 800d366:	3904      	subs	r1, #4
 800d368:	f853 2b04 	ldr.w	r2, [r3], #4
 800d36c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d370:	4298      	cmp	r0, r3
 800d372:	d8f9      	bhi.n	800d368 <__lshift+0xc8>
 800d374:	e7ea      	b.n	800d34c <__lshift+0xac>
 800d376:	bf00      	nop
 800d378:	0800edf3 	.word	0x0800edf3
 800d37c:	0800ee04 	.word	0x0800ee04

0800d380 <__mcmp>:
 800d380:	b530      	push	{r4, r5, lr}
 800d382:	6902      	ldr	r2, [r0, #16]
 800d384:	690c      	ldr	r4, [r1, #16]
 800d386:	1b12      	subs	r2, r2, r4
 800d388:	d10e      	bne.n	800d3a8 <__mcmp+0x28>
 800d38a:	f100 0314 	add.w	r3, r0, #20
 800d38e:	3114      	adds	r1, #20
 800d390:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d394:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d398:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d39c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d3a0:	42a5      	cmp	r5, r4
 800d3a2:	d003      	beq.n	800d3ac <__mcmp+0x2c>
 800d3a4:	d305      	bcc.n	800d3b2 <__mcmp+0x32>
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	bd30      	pop	{r4, r5, pc}
 800d3ac:	4283      	cmp	r3, r0
 800d3ae:	d3f3      	bcc.n	800d398 <__mcmp+0x18>
 800d3b0:	e7fa      	b.n	800d3a8 <__mcmp+0x28>
 800d3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b6:	e7f7      	b.n	800d3a8 <__mcmp+0x28>

0800d3b8 <__mdiff>:
 800d3b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3bc:	460c      	mov	r4, r1
 800d3be:	4606      	mov	r6, r0
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	4690      	mov	r8, r2
 800d3c6:	f7ff ffdb 	bl	800d380 <__mcmp>
 800d3ca:	1e05      	subs	r5, r0, #0
 800d3cc:	d110      	bne.n	800d3f0 <__mdiff+0x38>
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f7ff fd53 	bl	800ce7c <_Balloc>
 800d3d6:	b930      	cbnz	r0, 800d3e6 <__mdiff+0x2e>
 800d3d8:	4b3a      	ldr	r3, [pc, #232]	; (800d4c4 <__mdiff+0x10c>)
 800d3da:	4602      	mov	r2, r0
 800d3dc:	f240 2132 	movw	r1, #562	; 0x232
 800d3e0:	4839      	ldr	r0, [pc, #228]	; (800d4c8 <__mdiff+0x110>)
 800d3e2:	f000 fa9f 	bl	800d924 <__assert_func>
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f0:	bfa4      	itt	ge
 800d3f2:	4643      	movge	r3, r8
 800d3f4:	46a0      	movge	r8, r4
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3fc:	bfa6      	itte	ge
 800d3fe:	461c      	movge	r4, r3
 800d400:	2500      	movge	r5, #0
 800d402:	2501      	movlt	r5, #1
 800d404:	f7ff fd3a 	bl	800ce7c <_Balloc>
 800d408:	b920      	cbnz	r0, 800d414 <__mdiff+0x5c>
 800d40a:	4b2e      	ldr	r3, [pc, #184]	; (800d4c4 <__mdiff+0x10c>)
 800d40c:	4602      	mov	r2, r0
 800d40e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d412:	e7e5      	b.n	800d3e0 <__mdiff+0x28>
 800d414:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d418:	6926      	ldr	r6, [r4, #16]
 800d41a:	60c5      	str	r5, [r0, #12]
 800d41c:	f104 0914 	add.w	r9, r4, #20
 800d420:	f108 0514 	add.w	r5, r8, #20
 800d424:	f100 0e14 	add.w	lr, r0, #20
 800d428:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d42c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d430:	f108 0210 	add.w	r2, r8, #16
 800d434:	46f2      	mov	sl, lr
 800d436:	2100      	movs	r1, #0
 800d438:	f859 3b04 	ldr.w	r3, [r9], #4
 800d43c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d440:	fa1f f883 	uxth.w	r8, r3
 800d444:	fa11 f18b 	uxtah	r1, r1, fp
 800d448:	0c1b      	lsrs	r3, r3, #16
 800d44a:	eba1 0808 	sub.w	r8, r1, r8
 800d44e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d452:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d456:	fa1f f888 	uxth.w	r8, r8
 800d45a:	1419      	asrs	r1, r3, #16
 800d45c:	454e      	cmp	r6, r9
 800d45e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d462:	f84a 3b04 	str.w	r3, [sl], #4
 800d466:	d8e7      	bhi.n	800d438 <__mdiff+0x80>
 800d468:	1b33      	subs	r3, r6, r4
 800d46a:	3b15      	subs	r3, #21
 800d46c:	f023 0303 	bic.w	r3, r3, #3
 800d470:	3304      	adds	r3, #4
 800d472:	3415      	adds	r4, #21
 800d474:	42a6      	cmp	r6, r4
 800d476:	bf38      	it	cc
 800d478:	2304      	movcc	r3, #4
 800d47a:	441d      	add	r5, r3
 800d47c:	4473      	add	r3, lr
 800d47e:	469e      	mov	lr, r3
 800d480:	462e      	mov	r6, r5
 800d482:	4566      	cmp	r6, ip
 800d484:	d30e      	bcc.n	800d4a4 <__mdiff+0xec>
 800d486:	f10c 0203 	add.w	r2, ip, #3
 800d48a:	1b52      	subs	r2, r2, r5
 800d48c:	f022 0203 	bic.w	r2, r2, #3
 800d490:	3d03      	subs	r5, #3
 800d492:	45ac      	cmp	ip, r5
 800d494:	bf38      	it	cc
 800d496:	2200      	movcc	r2, #0
 800d498:	441a      	add	r2, r3
 800d49a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d49e:	b17b      	cbz	r3, 800d4c0 <__mdiff+0x108>
 800d4a0:	6107      	str	r7, [r0, #16]
 800d4a2:	e7a3      	b.n	800d3ec <__mdiff+0x34>
 800d4a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d4a8:	fa11 f288 	uxtah	r2, r1, r8
 800d4ac:	1414      	asrs	r4, r2, #16
 800d4ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d4b2:	b292      	uxth	r2, r2
 800d4b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d4b8:	f84e 2b04 	str.w	r2, [lr], #4
 800d4bc:	1421      	asrs	r1, r4, #16
 800d4be:	e7e0      	b.n	800d482 <__mdiff+0xca>
 800d4c0:	3f01      	subs	r7, #1
 800d4c2:	e7ea      	b.n	800d49a <__mdiff+0xe2>
 800d4c4:	0800edf3 	.word	0x0800edf3
 800d4c8:	0800ee04 	.word	0x0800ee04

0800d4cc <__d2b>:
 800d4cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4d0:	4689      	mov	r9, r1
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	ec57 6b10 	vmov	r6, r7, d0
 800d4d8:	4690      	mov	r8, r2
 800d4da:	f7ff fccf 	bl	800ce7c <_Balloc>
 800d4de:	4604      	mov	r4, r0
 800d4e0:	b930      	cbnz	r0, 800d4f0 <__d2b+0x24>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	4b25      	ldr	r3, [pc, #148]	; (800d57c <__d2b+0xb0>)
 800d4e6:	4826      	ldr	r0, [pc, #152]	; (800d580 <__d2b+0xb4>)
 800d4e8:	f240 310a 	movw	r1, #778	; 0x30a
 800d4ec:	f000 fa1a 	bl	800d924 <__assert_func>
 800d4f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d4f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d4f8:	bb35      	cbnz	r5, 800d548 <__d2b+0x7c>
 800d4fa:	2e00      	cmp	r6, #0
 800d4fc:	9301      	str	r3, [sp, #4]
 800d4fe:	d028      	beq.n	800d552 <__d2b+0x86>
 800d500:	4668      	mov	r0, sp
 800d502:	9600      	str	r6, [sp, #0]
 800d504:	f7ff fd82 	bl	800d00c <__lo0bits>
 800d508:	9900      	ldr	r1, [sp, #0]
 800d50a:	b300      	cbz	r0, 800d54e <__d2b+0x82>
 800d50c:	9a01      	ldr	r2, [sp, #4]
 800d50e:	f1c0 0320 	rsb	r3, r0, #32
 800d512:	fa02 f303 	lsl.w	r3, r2, r3
 800d516:	430b      	orrs	r3, r1
 800d518:	40c2      	lsrs	r2, r0
 800d51a:	6163      	str	r3, [r4, #20]
 800d51c:	9201      	str	r2, [sp, #4]
 800d51e:	9b01      	ldr	r3, [sp, #4]
 800d520:	61a3      	str	r3, [r4, #24]
 800d522:	2b00      	cmp	r3, #0
 800d524:	bf14      	ite	ne
 800d526:	2202      	movne	r2, #2
 800d528:	2201      	moveq	r2, #1
 800d52a:	6122      	str	r2, [r4, #16]
 800d52c:	b1d5      	cbz	r5, 800d564 <__d2b+0x98>
 800d52e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d532:	4405      	add	r5, r0
 800d534:	f8c9 5000 	str.w	r5, [r9]
 800d538:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d53c:	f8c8 0000 	str.w	r0, [r8]
 800d540:	4620      	mov	r0, r4
 800d542:	b003      	add	sp, #12
 800d544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d54c:	e7d5      	b.n	800d4fa <__d2b+0x2e>
 800d54e:	6161      	str	r1, [r4, #20]
 800d550:	e7e5      	b.n	800d51e <__d2b+0x52>
 800d552:	a801      	add	r0, sp, #4
 800d554:	f7ff fd5a 	bl	800d00c <__lo0bits>
 800d558:	9b01      	ldr	r3, [sp, #4]
 800d55a:	6163      	str	r3, [r4, #20]
 800d55c:	2201      	movs	r2, #1
 800d55e:	6122      	str	r2, [r4, #16]
 800d560:	3020      	adds	r0, #32
 800d562:	e7e3      	b.n	800d52c <__d2b+0x60>
 800d564:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d568:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d56c:	f8c9 0000 	str.w	r0, [r9]
 800d570:	6918      	ldr	r0, [r3, #16]
 800d572:	f7ff fd2b 	bl	800cfcc <__hi0bits>
 800d576:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d57a:	e7df      	b.n	800d53c <__d2b+0x70>
 800d57c:	0800edf3 	.word	0x0800edf3
 800d580:	0800ee04 	.word	0x0800ee04

0800d584 <_calloc_r>:
 800d584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d586:	fba1 2402 	umull	r2, r4, r1, r2
 800d58a:	b94c      	cbnz	r4, 800d5a0 <_calloc_r+0x1c>
 800d58c:	4611      	mov	r1, r2
 800d58e:	9201      	str	r2, [sp, #4]
 800d590:	f7fd ff30 	bl	800b3f4 <_malloc_r>
 800d594:	9a01      	ldr	r2, [sp, #4]
 800d596:	4605      	mov	r5, r0
 800d598:	b930      	cbnz	r0, 800d5a8 <_calloc_r+0x24>
 800d59a:	4628      	mov	r0, r5
 800d59c:	b003      	add	sp, #12
 800d59e:	bd30      	pop	{r4, r5, pc}
 800d5a0:	220c      	movs	r2, #12
 800d5a2:	6002      	str	r2, [r0, #0]
 800d5a4:	2500      	movs	r5, #0
 800d5a6:	e7f8      	b.n	800d59a <_calloc_r+0x16>
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	f7fd fefa 	bl	800b3a2 <memset>
 800d5ae:	e7f4      	b.n	800d59a <_calloc_r+0x16>

0800d5b0 <_free_r>:
 800d5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5b2:	2900      	cmp	r1, #0
 800d5b4:	d044      	beq.n	800d640 <_free_r+0x90>
 800d5b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5ba:	9001      	str	r0, [sp, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f1a1 0404 	sub.w	r4, r1, #4
 800d5c2:	bfb8      	it	lt
 800d5c4:	18e4      	addlt	r4, r4, r3
 800d5c6:	f7ff fc4d 	bl	800ce64 <__malloc_lock>
 800d5ca:	4a1e      	ldr	r2, [pc, #120]	; (800d644 <_free_r+0x94>)
 800d5cc:	9801      	ldr	r0, [sp, #4]
 800d5ce:	6813      	ldr	r3, [r2, #0]
 800d5d0:	b933      	cbnz	r3, 800d5e0 <_free_r+0x30>
 800d5d2:	6063      	str	r3, [r4, #4]
 800d5d4:	6014      	str	r4, [r2, #0]
 800d5d6:	b003      	add	sp, #12
 800d5d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5dc:	f7ff bc48 	b.w	800ce70 <__malloc_unlock>
 800d5e0:	42a3      	cmp	r3, r4
 800d5e2:	d908      	bls.n	800d5f6 <_free_r+0x46>
 800d5e4:	6825      	ldr	r5, [r4, #0]
 800d5e6:	1961      	adds	r1, r4, r5
 800d5e8:	428b      	cmp	r3, r1
 800d5ea:	bf01      	itttt	eq
 800d5ec:	6819      	ldreq	r1, [r3, #0]
 800d5ee:	685b      	ldreq	r3, [r3, #4]
 800d5f0:	1949      	addeq	r1, r1, r5
 800d5f2:	6021      	streq	r1, [r4, #0]
 800d5f4:	e7ed      	b.n	800d5d2 <_free_r+0x22>
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	b10b      	cbz	r3, 800d600 <_free_r+0x50>
 800d5fc:	42a3      	cmp	r3, r4
 800d5fe:	d9fa      	bls.n	800d5f6 <_free_r+0x46>
 800d600:	6811      	ldr	r1, [r2, #0]
 800d602:	1855      	adds	r5, r2, r1
 800d604:	42a5      	cmp	r5, r4
 800d606:	d10b      	bne.n	800d620 <_free_r+0x70>
 800d608:	6824      	ldr	r4, [r4, #0]
 800d60a:	4421      	add	r1, r4
 800d60c:	1854      	adds	r4, r2, r1
 800d60e:	42a3      	cmp	r3, r4
 800d610:	6011      	str	r1, [r2, #0]
 800d612:	d1e0      	bne.n	800d5d6 <_free_r+0x26>
 800d614:	681c      	ldr	r4, [r3, #0]
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	6053      	str	r3, [r2, #4]
 800d61a:	4421      	add	r1, r4
 800d61c:	6011      	str	r1, [r2, #0]
 800d61e:	e7da      	b.n	800d5d6 <_free_r+0x26>
 800d620:	d902      	bls.n	800d628 <_free_r+0x78>
 800d622:	230c      	movs	r3, #12
 800d624:	6003      	str	r3, [r0, #0]
 800d626:	e7d6      	b.n	800d5d6 <_free_r+0x26>
 800d628:	6825      	ldr	r5, [r4, #0]
 800d62a:	1961      	adds	r1, r4, r5
 800d62c:	428b      	cmp	r3, r1
 800d62e:	bf04      	itt	eq
 800d630:	6819      	ldreq	r1, [r3, #0]
 800d632:	685b      	ldreq	r3, [r3, #4]
 800d634:	6063      	str	r3, [r4, #4]
 800d636:	bf04      	itt	eq
 800d638:	1949      	addeq	r1, r1, r5
 800d63a:	6021      	streq	r1, [r4, #0]
 800d63c:	6054      	str	r4, [r2, #4]
 800d63e:	e7ca      	b.n	800d5d6 <_free_r+0x26>
 800d640:	b003      	add	sp, #12
 800d642:	bd30      	pop	{r4, r5, pc}
 800d644:	200052e4 	.word	0x200052e4

0800d648 <__ssputs_r>:
 800d648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d64c:	688e      	ldr	r6, [r1, #8]
 800d64e:	429e      	cmp	r6, r3
 800d650:	4682      	mov	sl, r0
 800d652:	460c      	mov	r4, r1
 800d654:	4690      	mov	r8, r2
 800d656:	461f      	mov	r7, r3
 800d658:	d838      	bhi.n	800d6cc <__ssputs_r+0x84>
 800d65a:	898a      	ldrh	r2, [r1, #12]
 800d65c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d660:	d032      	beq.n	800d6c8 <__ssputs_r+0x80>
 800d662:	6825      	ldr	r5, [r4, #0]
 800d664:	6909      	ldr	r1, [r1, #16]
 800d666:	eba5 0901 	sub.w	r9, r5, r1
 800d66a:	6965      	ldr	r5, [r4, #20]
 800d66c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d674:	3301      	adds	r3, #1
 800d676:	444b      	add	r3, r9
 800d678:	106d      	asrs	r5, r5, #1
 800d67a:	429d      	cmp	r5, r3
 800d67c:	bf38      	it	cc
 800d67e:	461d      	movcc	r5, r3
 800d680:	0553      	lsls	r3, r2, #21
 800d682:	d531      	bpl.n	800d6e8 <__ssputs_r+0xa0>
 800d684:	4629      	mov	r1, r5
 800d686:	f7fd feb5 	bl	800b3f4 <_malloc_r>
 800d68a:	4606      	mov	r6, r0
 800d68c:	b950      	cbnz	r0, 800d6a4 <__ssputs_r+0x5c>
 800d68e:	230c      	movs	r3, #12
 800d690:	f8ca 3000 	str.w	r3, [sl]
 800d694:	89a3      	ldrh	r3, [r4, #12]
 800d696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d69a:	81a3      	strh	r3, [r4, #12]
 800d69c:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6a4:	6921      	ldr	r1, [r4, #16]
 800d6a6:	464a      	mov	r2, r9
 800d6a8:	f7fd fe6d 	bl	800b386 <memcpy>
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6b6:	81a3      	strh	r3, [r4, #12]
 800d6b8:	6126      	str	r6, [r4, #16]
 800d6ba:	6165      	str	r5, [r4, #20]
 800d6bc:	444e      	add	r6, r9
 800d6be:	eba5 0509 	sub.w	r5, r5, r9
 800d6c2:	6026      	str	r6, [r4, #0]
 800d6c4:	60a5      	str	r5, [r4, #8]
 800d6c6:	463e      	mov	r6, r7
 800d6c8:	42be      	cmp	r6, r7
 800d6ca:	d900      	bls.n	800d6ce <__ssputs_r+0x86>
 800d6cc:	463e      	mov	r6, r7
 800d6ce:	6820      	ldr	r0, [r4, #0]
 800d6d0:	4632      	mov	r2, r6
 800d6d2:	4641      	mov	r1, r8
 800d6d4:	f000 f968 	bl	800d9a8 <memmove>
 800d6d8:	68a3      	ldr	r3, [r4, #8]
 800d6da:	1b9b      	subs	r3, r3, r6
 800d6dc:	60a3      	str	r3, [r4, #8]
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	4433      	add	r3, r6
 800d6e2:	6023      	str	r3, [r4, #0]
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	e7db      	b.n	800d6a0 <__ssputs_r+0x58>
 800d6e8:	462a      	mov	r2, r5
 800d6ea:	f000 f977 	bl	800d9dc <_realloc_r>
 800d6ee:	4606      	mov	r6, r0
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d1e1      	bne.n	800d6b8 <__ssputs_r+0x70>
 800d6f4:	6921      	ldr	r1, [r4, #16]
 800d6f6:	4650      	mov	r0, sl
 800d6f8:	f7ff ff5a 	bl	800d5b0 <_free_r>
 800d6fc:	e7c7      	b.n	800d68e <__ssputs_r+0x46>
	...

0800d700 <_svfiprintf_r>:
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	4698      	mov	r8, r3
 800d706:	898b      	ldrh	r3, [r1, #12]
 800d708:	061b      	lsls	r3, r3, #24
 800d70a:	b09d      	sub	sp, #116	; 0x74
 800d70c:	4607      	mov	r7, r0
 800d70e:	460d      	mov	r5, r1
 800d710:	4614      	mov	r4, r2
 800d712:	d50e      	bpl.n	800d732 <_svfiprintf_r+0x32>
 800d714:	690b      	ldr	r3, [r1, #16]
 800d716:	b963      	cbnz	r3, 800d732 <_svfiprintf_r+0x32>
 800d718:	2140      	movs	r1, #64	; 0x40
 800d71a:	f7fd fe6b 	bl	800b3f4 <_malloc_r>
 800d71e:	6028      	str	r0, [r5, #0]
 800d720:	6128      	str	r0, [r5, #16]
 800d722:	b920      	cbnz	r0, 800d72e <_svfiprintf_r+0x2e>
 800d724:	230c      	movs	r3, #12
 800d726:	603b      	str	r3, [r7, #0]
 800d728:	f04f 30ff 	mov.w	r0, #4294967295
 800d72c:	e0d1      	b.n	800d8d2 <_svfiprintf_r+0x1d2>
 800d72e:	2340      	movs	r3, #64	; 0x40
 800d730:	616b      	str	r3, [r5, #20]
 800d732:	2300      	movs	r3, #0
 800d734:	9309      	str	r3, [sp, #36]	; 0x24
 800d736:	2320      	movs	r3, #32
 800d738:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d73c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d740:	2330      	movs	r3, #48	; 0x30
 800d742:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d8ec <_svfiprintf_r+0x1ec>
 800d746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d74a:	f04f 0901 	mov.w	r9, #1
 800d74e:	4623      	mov	r3, r4
 800d750:	469a      	mov	sl, r3
 800d752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d756:	b10a      	cbz	r2, 800d75c <_svfiprintf_r+0x5c>
 800d758:	2a25      	cmp	r2, #37	; 0x25
 800d75a:	d1f9      	bne.n	800d750 <_svfiprintf_r+0x50>
 800d75c:	ebba 0b04 	subs.w	fp, sl, r4
 800d760:	d00b      	beq.n	800d77a <_svfiprintf_r+0x7a>
 800d762:	465b      	mov	r3, fp
 800d764:	4622      	mov	r2, r4
 800d766:	4629      	mov	r1, r5
 800d768:	4638      	mov	r0, r7
 800d76a:	f7ff ff6d 	bl	800d648 <__ssputs_r>
 800d76e:	3001      	adds	r0, #1
 800d770:	f000 80aa 	beq.w	800d8c8 <_svfiprintf_r+0x1c8>
 800d774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d776:	445a      	add	r2, fp
 800d778:	9209      	str	r2, [sp, #36]	; 0x24
 800d77a:	f89a 3000 	ldrb.w	r3, [sl]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f000 80a2 	beq.w	800d8c8 <_svfiprintf_r+0x1c8>
 800d784:	2300      	movs	r3, #0
 800d786:	f04f 32ff 	mov.w	r2, #4294967295
 800d78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d78e:	f10a 0a01 	add.w	sl, sl, #1
 800d792:	9304      	str	r3, [sp, #16]
 800d794:	9307      	str	r3, [sp, #28]
 800d796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d79a:	931a      	str	r3, [sp, #104]	; 0x68
 800d79c:	4654      	mov	r4, sl
 800d79e:	2205      	movs	r2, #5
 800d7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7a4:	4851      	ldr	r0, [pc, #324]	; (800d8ec <_svfiprintf_r+0x1ec>)
 800d7a6:	f7f2 fd1b 	bl	80001e0 <memchr>
 800d7aa:	9a04      	ldr	r2, [sp, #16]
 800d7ac:	b9d8      	cbnz	r0, 800d7e6 <_svfiprintf_r+0xe6>
 800d7ae:	06d0      	lsls	r0, r2, #27
 800d7b0:	bf44      	itt	mi
 800d7b2:	2320      	movmi	r3, #32
 800d7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7b8:	0711      	lsls	r1, r2, #28
 800d7ba:	bf44      	itt	mi
 800d7bc:	232b      	movmi	r3, #43	; 0x2b
 800d7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800d7c8:	d015      	beq.n	800d7f6 <_svfiprintf_r+0xf6>
 800d7ca:	9a07      	ldr	r2, [sp, #28]
 800d7cc:	4654      	mov	r4, sl
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	f04f 0c0a 	mov.w	ip, #10
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7da:	3b30      	subs	r3, #48	; 0x30
 800d7dc:	2b09      	cmp	r3, #9
 800d7de:	d94e      	bls.n	800d87e <_svfiprintf_r+0x17e>
 800d7e0:	b1b0      	cbz	r0, 800d810 <_svfiprintf_r+0x110>
 800d7e2:	9207      	str	r2, [sp, #28]
 800d7e4:	e014      	b.n	800d810 <_svfiprintf_r+0x110>
 800d7e6:	eba0 0308 	sub.w	r3, r0, r8
 800d7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	9304      	str	r3, [sp, #16]
 800d7f2:	46a2      	mov	sl, r4
 800d7f4:	e7d2      	b.n	800d79c <_svfiprintf_r+0x9c>
 800d7f6:	9b03      	ldr	r3, [sp, #12]
 800d7f8:	1d19      	adds	r1, r3, #4
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	9103      	str	r1, [sp, #12]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	bfbb      	ittet	lt
 800d802:	425b      	neglt	r3, r3
 800d804:	f042 0202 	orrlt.w	r2, r2, #2
 800d808:	9307      	strge	r3, [sp, #28]
 800d80a:	9307      	strlt	r3, [sp, #28]
 800d80c:	bfb8      	it	lt
 800d80e:	9204      	strlt	r2, [sp, #16]
 800d810:	7823      	ldrb	r3, [r4, #0]
 800d812:	2b2e      	cmp	r3, #46	; 0x2e
 800d814:	d10c      	bne.n	800d830 <_svfiprintf_r+0x130>
 800d816:	7863      	ldrb	r3, [r4, #1]
 800d818:	2b2a      	cmp	r3, #42	; 0x2a
 800d81a:	d135      	bne.n	800d888 <_svfiprintf_r+0x188>
 800d81c:	9b03      	ldr	r3, [sp, #12]
 800d81e:	1d1a      	adds	r2, r3, #4
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	9203      	str	r2, [sp, #12]
 800d824:	2b00      	cmp	r3, #0
 800d826:	bfb8      	it	lt
 800d828:	f04f 33ff 	movlt.w	r3, #4294967295
 800d82c:	3402      	adds	r4, #2
 800d82e:	9305      	str	r3, [sp, #20]
 800d830:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d8fc <_svfiprintf_r+0x1fc>
 800d834:	7821      	ldrb	r1, [r4, #0]
 800d836:	2203      	movs	r2, #3
 800d838:	4650      	mov	r0, sl
 800d83a:	f7f2 fcd1 	bl	80001e0 <memchr>
 800d83e:	b140      	cbz	r0, 800d852 <_svfiprintf_r+0x152>
 800d840:	2340      	movs	r3, #64	; 0x40
 800d842:	eba0 000a 	sub.w	r0, r0, sl
 800d846:	fa03 f000 	lsl.w	r0, r3, r0
 800d84a:	9b04      	ldr	r3, [sp, #16]
 800d84c:	4303      	orrs	r3, r0
 800d84e:	3401      	adds	r4, #1
 800d850:	9304      	str	r3, [sp, #16]
 800d852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d856:	4826      	ldr	r0, [pc, #152]	; (800d8f0 <_svfiprintf_r+0x1f0>)
 800d858:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d85c:	2206      	movs	r2, #6
 800d85e:	f7f2 fcbf 	bl	80001e0 <memchr>
 800d862:	2800      	cmp	r0, #0
 800d864:	d038      	beq.n	800d8d8 <_svfiprintf_r+0x1d8>
 800d866:	4b23      	ldr	r3, [pc, #140]	; (800d8f4 <_svfiprintf_r+0x1f4>)
 800d868:	bb1b      	cbnz	r3, 800d8b2 <_svfiprintf_r+0x1b2>
 800d86a:	9b03      	ldr	r3, [sp, #12]
 800d86c:	3307      	adds	r3, #7
 800d86e:	f023 0307 	bic.w	r3, r3, #7
 800d872:	3308      	adds	r3, #8
 800d874:	9303      	str	r3, [sp, #12]
 800d876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d878:	4433      	add	r3, r6
 800d87a:	9309      	str	r3, [sp, #36]	; 0x24
 800d87c:	e767      	b.n	800d74e <_svfiprintf_r+0x4e>
 800d87e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d882:	460c      	mov	r4, r1
 800d884:	2001      	movs	r0, #1
 800d886:	e7a5      	b.n	800d7d4 <_svfiprintf_r+0xd4>
 800d888:	2300      	movs	r3, #0
 800d88a:	3401      	adds	r4, #1
 800d88c:	9305      	str	r3, [sp, #20]
 800d88e:	4619      	mov	r1, r3
 800d890:	f04f 0c0a 	mov.w	ip, #10
 800d894:	4620      	mov	r0, r4
 800d896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d89a:	3a30      	subs	r2, #48	; 0x30
 800d89c:	2a09      	cmp	r2, #9
 800d89e:	d903      	bls.n	800d8a8 <_svfiprintf_r+0x1a8>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d0c5      	beq.n	800d830 <_svfiprintf_r+0x130>
 800d8a4:	9105      	str	r1, [sp, #20]
 800d8a6:	e7c3      	b.n	800d830 <_svfiprintf_r+0x130>
 800d8a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e7f0      	b.n	800d894 <_svfiprintf_r+0x194>
 800d8b2:	ab03      	add	r3, sp, #12
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	4b0f      	ldr	r3, [pc, #60]	; (800d8f8 <_svfiprintf_r+0x1f8>)
 800d8ba:	a904      	add	r1, sp, #16
 800d8bc:	4638      	mov	r0, r7
 800d8be:	f7fd fead 	bl	800b61c <_printf_float>
 800d8c2:	1c42      	adds	r2, r0, #1
 800d8c4:	4606      	mov	r6, r0
 800d8c6:	d1d6      	bne.n	800d876 <_svfiprintf_r+0x176>
 800d8c8:	89ab      	ldrh	r3, [r5, #12]
 800d8ca:	065b      	lsls	r3, r3, #25
 800d8cc:	f53f af2c 	bmi.w	800d728 <_svfiprintf_r+0x28>
 800d8d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8d2:	b01d      	add	sp, #116	; 0x74
 800d8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d8:	ab03      	add	r3, sp, #12
 800d8da:	9300      	str	r3, [sp, #0]
 800d8dc:	462a      	mov	r2, r5
 800d8de:	4b06      	ldr	r3, [pc, #24]	; (800d8f8 <_svfiprintf_r+0x1f8>)
 800d8e0:	a904      	add	r1, sp, #16
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	f7fe f93e 	bl	800bb64 <_printf_i>
 800d8e8:	e7eb      	b.n	800d8c2 <_svfiprintf_r+0x1c2>
 800d8ea:	bf00      	nop
 800d8ec:	0800ef5c 	.word	0x0800ef5c
 800d8f0:	0800ef66 	.word	0x0800ef66
 800d8f4:	0800b61d 	.word	0x0800b61d
 800d8f8:	0800d649 	.word	0x0800d649
 800d8fc:	0800ef62 	.word	0x0800ef62

0800d900 <_read_r>:
 800d900:	b538      	push	{r3, r4, r5, lr}
 800d902:	4d07      	ldr	r5, [pc, #28]	; (800d920 <_read_r+0x20>)
 800d904:	4604      	mov	r4, r0
 800d906:	4608      	mov	r0, r1
 800d908:	4611      	mov	r1, r2
 800d90a:	2200      	movs	r2, #0
 800d90c:	602a      	str	r2, [r5, #0]
 800d90e:	461a      	mov	r2, r3
 800d910:	f7f5 fde8 	bl	80034e4 <_read>
 800d914:	1c43      	adds	r3, r0, #1
 800d916:	d102      	bne.n	800d91e <_read_r+0x1e>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	b103      	cbz	r3, 800d91e <_read_r+0x1e>
 800d91c:	6023      	str	r3, [r4, #0]
 800d91e:	bd38      	pop	{r3, r4, r5, pc}
 800d920:	200052ec 	.word	0x200052ec

0800d924 <__assert_func>:
 800d924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d926:	4614      	mov	r4, r2
 800d928:	461a      	mov	r2, r3
 800d92a:	4b09      	ldr	r3, [pc, #36]	; (800d950 <__assert_func+0x2c>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4605      	mov	r5, r0
 800d930:	68d8      	ldr	r0, [r3, #12]
 800d932:	b14c      	cbz	r4, 800d948 <__assert_func+0x24>
 800d934:	4b07      	ldr	r3, [pc, #28]	; (800d954 <__assert_func+0x30>)
 800d936:	9100      	str	r1, [sp, #0]
 800d938:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d93c:	4906      	ldr	r1, [pc, #24]	; (800d958 <__assert_func+0x34>)
 800d93e:	462b      	mov	r3, r5
 800d940:	f000 f80e 	bl	800d960 <fiprintf>
 800d944:	f000 faa0 	bl	800de88 <abort>
 800d948:	4b04      	ldr	r3, [pc, #16]	; (800d95c <__assert_func+0x38>)
 800d94a:	461c      	mov	r4, r3
 800d94c:	e7f3      	b.n	800d936 <__assert_func+0x12>
 800d94e:	bf00      	nop
 800d950:	20000014 	.word	0x20000014
 800d954:	0800ef6d 	.word	0x0800ef6d
 800d958:	0800ef7a 	.word	0x0800ef7a
 800d95c:	0800efa8 	.word	0x0800efa8

0800d960 <fiprintf>:
 800d960:	b40e      	push	{r1, r2, r3}
 800d962:	b503      	push	{r0, r1, lr}
 800d964:	4601      	mov	r1, r0
 800d966:	ab03      	add	r3, sp, #12
 800d968:	4805      	ldr	r0, [pc, #20]	; (800d980 <fiprintf+0x20>)
 800d96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d96e:	6800      	ldr	r0, [r0, #0]
 800d970:	9301      	str	r3, [sp, #4]
 800d972:	f000 f88b 	bl	800da8c <_vfiprintf_r>
 800d976:	b002      	add	sp, #8
 800d978:	f85d eb04 	ldr.w	lr, [sp], #4
 800d97c:	b003      	add	sp, #12
 800d97e:	4770      	bx	lr
 800d980:	20000014 	.word	0x20000014

0800d984 <__ascii_mbtowc>:
 800d984:	b082      	sub	sp, #8
 800d986:	b901      	cbnz	r1, 800d98a <__ascii_mbtowc+0x6>
 800d988:	a901      	add	r1, sp, #4
 800d98a:	b142      	cbz	r2, 800d99e <__ascii_mbtowc+0x1a>
 800d98c:	b14b      	cbz	r3, 800d9a2 <__ascii_mbtowc+0x1e>
 800d98e:	7813      	ldrb	r3, [r2, #0]
 800d990:	600b      	str	r3, [r1, #0]
 800d992:	7812      	ldrb	r2, [r2, #0]
 800d994:	1e10      	subs	r0, r2, #0
 800d996:	bf18      	it	ne
 800d998:	2001      	movne	r0, #1
 800d99a:	b002      	add	sp, #8
 800d99c:	4770      	bx	lr
 800d99e:	4610      	mov	r0, r2
 800d9a0:	e7fb      	b.n	800d99a <__ascii_mbtowc+0x16>
 800d9a2:	f06f 0001 	mvn.w	r0, #1
 800d9a6:	e7f8      	b.n	800d99a <__ascii_mbtowc+0x16>

0800d9a8 <memmove>:
 800d9a8:	4288      	cmp	r0, r1
 800d9aa:	b510      	push	{r4, lr}
 800d9ac:	eb01 0402 	add.w	r4, r1, r2
 800d9b0:	d902      	bls.n	800d9b8 <memmove+0x10>
 800d9b2:	4284      	cmp	r4, r0
 800d9b4:	4623      	mov	r3, r4
 800d9b6:	d807      	bhi.n	800d9c8 <memmove+0x20>
 800d9b8:	1e43      	subs	r3, r0, #1
 800d9ba:	42a1      	cmp	r1, r4
 800d9bc:	d008      	beq.n	800d9d0 <memmove+0x28>
 800d9be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9c6:	e7f8      	b.n	800d9ba <memmove+0x12>
 800d9c8:	4402      	add	r2, r0
 800d9ca:	4601      	mov	r1, r0
 800d9cc:	428a      	cmp	r2, r1
 800d9ce:	d100      	bne.n	800d9d2 <memmove+0x2a>
 800d9d0:	bd10      	pop	{r4, pc}
 800d9d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9da:	e7f7      	b.n	800d9cc <memmove+0x24>

0800d9dc <_realloc_r>:
 800d9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e0:	4680      	mov	r8, r0
 800d9e2:	4614      	mov	r4, r2
 800d9e4:	460e      	mov	r6, r1
 800d9e6:	b921      	cbnz	r1, 800d9f2 <_realloc_r+0x16>
 800d9e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ec:	4611      	mov	r1, r2
 800d9ee:	f7fd bd01 	b.w	800b3f4 <_malloc_r>
 800d9f2:	b92a      	cbnz	r2, 800da00 <_realloc_r+0x24>
 800d9f4:	f7ff fddc 	bl	800d5b0 <_free_r>
 800d9f8:	4625      	mov	r5, r4
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da00:	f000 faae 	bl	800df60 <_malloc_usable_size_r>
 800da04:	4284      	cmp	r4, r0
 800da06:	4607      	mov	r7, r0
 800da08:	d802      	bhi.n	800da10 <_realloc_r+0x34>
 800da0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da0e:	d812      	bhi.n	800da36 <_realloc_r+0x5a>
 800da10:	4621      	mov	r1, r4
 800da12:	4640      	mov	r0, r8
 800da14:	f7fd fcee 	bl	800b3f4 <_malloc_r>
 800da18:	4605      	mov	r5, r0
 800da1a:	2800      	cmp	r0, #0
 800da1c:	d0ed      	beq.n	800d9fa <_realloc_r+0x1e>
 800da1e:	42bc      	cmp	r4, r7
 800da20:	4622      	mov	r2, r4
 800da22:	4631      	mov	r1, r6
 800da24:	bf28      	it	cs
 800da26:	463a      	movcs	r2, r7
 800da28:	f7fd fcad 	bl	800b386 <memcpy>
 800da2c:	4631      	mov	r1, r6
 800da2e:	4640      	mov	r0, r8
 800da30:	f7ff fdbe 	bl	800d5b0 <_free_r>
 800da34:	e7e1      	b.n	800d9fa <_realloc_r+0x1e>
 800da36:	4635      	mov	r5, r6
 800da38:	e7df      	b.n	800d9fa <_realloc_r+0x1e>

0800da3a <__sfputc_r>:
 800da3a:	6893      	ldr	r3, [r2, #8]
 800da3c:	3b01      	subs	r3, #1
 800da3e:	2b00      	cmp	r3, #0
 800da40:	b410      	push	{r4}
 800da42:	6093      	str	r3, [r2, #8]
 800da44:	da08      	bge.n	800da58 <__sfputc_r+0x1e>
 800da46:	6994      	ldr	r4, [r2, #24]
 800da48:	42a3      	cmp	r3, r4
 800da4a:	db01      	blt.n	800da50 <__sfputc_r+0x16>
 800da4c:	290a      	cmp	r1, #10
 800da4e:	d103      	bne.n	800da58 <__sfputc_r+0x1e>
 800da50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da54:	f000 b94a 	b.w	800dcec <__swbuf_r>
 800da58:	6813      	ldr	r3, [r2, #0]
 800da5a:	1c58      	adds	r0, r3, #1
 800da5c:	6010      	str	r0, [r2, #0]
 800da5e:	7019      	strb	r1, [r3, #0]
 800da60:	4608      	mov	r0, r1
 800da62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <__sfputs_r>:
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	4606      	mov	r6, r0
 800da6c:	460f      	mov	r7, r1
 800da6e:	4614      	mov	r4, r2
 800da70:	18d5      	adds	r5, r2, r3
 800da72:	42ac      	cmp	r4, r5
 800da74:	d101      	bne.n	800da7a <__sfputs_r+0x12>
 800da76:	2000      	movs	r0, #0
 800da78:	e007      	b.n	800da8a <__sfputs_r+0x22>
 800da7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da7e:	463a      	mov	r2, r7
 800da80:	4630      	mov	r0, r6
 800da82:	f7ff ffda 	bl	800da3a <__sfputc_r>
 800da86:	1c43      	adds	r3, r0, #1
 800da88:	d1f3      	bne.n	800da72 <__sfputs_r+0xa>
 800da8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da8c <_vfiprintf_r>:
 800da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da90:	460d      	mov	r5, r1
 800da92:	b09d      	sub	sp, #116	; 0x74
 800da94:	4614      	mov	r4, r2
 800da96:	4698      	mov	r8, r3
 800da98:	4606      	mov	r6, r0
 800da9a:	b118      	cbz	r0, 800daa4 <_vfiprintf_r+0x18>
 800da9c:	6983      	ldr	r3, [r0, #24]
 800da9e:	b90b      	cbnz	r3, 800daa4 <_vfiprintf_r+0x18>
 800daa0:	f7fd fbac 	bl	800b1fc <__sinit>
 800daa4:	4b89      	ldr	r3, [pc, #548]	; (800dccc <_vfiprintf_r+0x240>)
 800daa6:	429d      	cmp	r5, r3
 800daa8:	d11b      	bne.n	800dae2 <_vfiprintf_r+0x56>
 800daaa:	6875      	ldr	r5, [r6, #4]
 800daac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800daae:	07d9      	lsls	r1, r3, #31
 800dab0:	d405      	bmi.n	800dabe <_vfiprintf_r+0x32>
 800dab2:	89ab      	ldrh	r3, [r5, #12]
 800dab4:	059a      	lsls	r2, r3, #22
 800dab6:	d402      	bmi.n	800dabe <_vfiprintf_r+0x32>
 800dab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daba:	f7fd fc62 	bl	800b382 <__retarget_lock_acquire_recursive>
 800dabe:	89ab      	ldrh	r3, [r5, #12]
 800dac0:	071b      	lsls	r3, r3, #28
 800dac2:	d501      	bpl.n	800dac8 <_vfiprintf_r+0x3c>
 800dac4:	692b      	ldr	r3, [r5, #16]
 800dac6:	b9eb      	cbnz	r3, 800db04 <_vfiprintf_r+0x78>
 800dac8:	4629      	mov	r1, r5
 800daca:	4630      	mov	r0, r6
 800dacc:	f000 f96e 	bl	800ddac <__swsetup_r>
 800dad0:	b1c0      	cbz	r0, 800db04 <_vfiprintf_r+0x78>
 800dad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dad4:	07dc      	lsls	r4, r3, #31
 800dad6:	d50e      	bpl.n	800daf6 <_vfiprintf_r+0x6a>
 800dad8:	f04f 30ff 	mov.w	r0, #4294967295
 800dadc:	b01d      	add	sp, #116	; 0x74
 800dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae2:	4b7b      	ldr	r3, [pc, #492]	; (800dcd0 <_vfiprintf_r+0x244>)
 800dae4:	429d      	cmp	r5, r3
 800dae6:	d101      	bne.n	800daec <_vfiprintf_r+0x60>
 800dae8:	68b5      	ldr	r5, [r6, #8]
 800daea:	e7df      	b.n	800daac <_vfiprintf_r+0x20>
 800daec:	4b79      	ldr	r3, [pc, #484]	; (800dcd4 <_vfiprintf_r+0x248>)
 800daee:	429d      	cmp	r5, r3
 800daf0:	bf08      	it	eq
 800daf2:	68f5      	ldreq	r5, [r6, #12]
 800daf4:	e7da      	b.n	800daac <_vfiprintf_r+0x20>
 800daf6:	89ab      	ldrh	r3, [r5, #12]
 800daf8:	0598      	lsls	r0, r3, #22
 800dafa:	d4ed      	bmi.n	800dad8 <_vfiprintf_r+0x4c>
 800dafc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dafe:	f7fd fc41 	bl	800b384 <__retarget_lock_release_recursive>
 800db02:	e7e9      	b.n	800dad8 <_vfiprintf_r+0x4c>
 800db04:	2300      	movs	r3, #0
 800db06:	9309      	str	r3, [sp, #36]	; 0x24
 800db08:	2320      	movs	r3, #32
 800db0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800db12:	2330      	movs	r3, #48	; 0x30
 800db14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dcd8 <_vfiprintf_r+0x24c>
 800db18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db1c:	f04f 0901 	mov.w	r9, #1
 800db20:	4623      	mov	r3, r4
 800db22:	469a      	mov	sl, r3
 800db24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db28:	b10a      	cbz	r2, 800db2e <_vfiprintf_r+0xa2>
 800db2a:	2a25      	cmp	r2, #37	; 0x25
 800db2c:	d1f9      	bne.n	800db22 <_vfiprintf_r+0x96>
 800db2e:	ebba 0b04 	subs.w	fp, sl, r4
 800db32:	d00b      	beq.n	800db4c <_vfiprintf_r+0xc0>
 800db34:	465b      	mov	r3, fp
 800db36:	4622      	mov	r2, r4
 800db38:	4629      	mov	r1, r5
 800db3a:	4630      	mov	r0, r6
 800db3c:	f7ff ff94 	bl	800da68 <__sfputs_r>
 800db40:	3001      	adds	r0, #1
 800db42:	f000 80aa 	beq.w	800dc9a <_vfiprintf_r+0x20e>
 800db46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db48:	445a      	add	r2, fp
 800db4a:	9209      	str	r2, [sp, #36]	; 0x24
 800db4c:	f89a 3000 	ldrb.w	r3, [sl]
 800db50:	2b00      	cmp	r3, #0
 800db52:	f000 80a2 	beq.w	800dc9a <_vfiprintf_r+0x20e>
 800db56:	2300      	movs	r3, #0
 800db58:	f04f 32ff 	mov.w	r2, #4294967295
 800db5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db60:	f10a 0a01 	add.w	sl, sl, #1
 800db64:	9304      	str	r3, [sp, #16]
 800db66:	9307      	str	r3, [sp, #28]
 800db68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db6c:	931a      	str	r3, [sp, #104]	; 0x68
 800db6e:	4654      	mov	r4, sl
 800db70:	2205      	movs	r2, #5
 800db72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db76:	4858      	ldr	r0, [pc, #352]	; (800dcd8 <_vfiprintf_r+0x24c>)
 800db78:	f7f2 fb32 	bl	80001e0 <memchr>
 800db7c:	9a04      	ldr	r2, [sp, #16]
 800db7e:	b9d8      	cbnz	r0, 800dbb8 <_vfiprintf_r+0x12c>
 800db80:	06d1      	lsls	r1, r2, #27
 800db82:	bf44      	itt	mi
 800db84:	2320      	movmi	r3, #32
 800db86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db8a:	0713      	lsls	r3, r2, #28
 800db8c:	bf44      	itt	mi
 800db8e:	232b      	movmi	r3, #43	; 0x2b
 800db90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db94:	f89a 3000 	ldrb.w	r3, [sl]
 800db98:	2b2a      	cmp	r3, #42	; 0x2a
 800db9a:	d015      	beq.n	800dbc8 <_vfiprintf_r+0x13c>
 800db9c:	9a07      	ldr	r2, [sp, #28]
 800db9e:	4654      	mov	r4, sl
 800dba0:	2000      	movs	r0, #0
 800dba2:	f04f 0c0a 	mov.w	ip, #10
 800dba6:	4621      	mov	r1, r4
 800dba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbac:	3b30      	subs	r3, #48	; 0x30
 800dbae:	2b09      	cmp	r3, #9
 800dbb0:	d94e      	bls.n	800dc50 <_vfiprintf_r+0x1c4>
 800dbb2:	b1b0      	cbz	r0, 800dbe2 <_vfiprintf_r+0x156>
 800dbb4:	9207      	str	r2, [sp, #28]
 800dbb6:	e014      	b.n	800dbe2 <_vfiprintf_r+0x156>
 800dbb8:	eba0 0308 	sub.w	r3, r0, r8
 800dbbc:	fa09 f303 	lsl.w	r3, r9, r3
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	46a2      	mov	sl, r4
 800dbc6:	e7d2      	b.n	800db6e <_vfiprintf_r+0xe2>
 800dbc8:	9b03      	ldr	r3, [sp, #12]
 800dbca:	1d19      	adds	r1, r3, #4
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	9103      	str	r1, [sp, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	bfbb      	ittet	lt
 800dbd4:	425b      	neglt	r3, r3
 800dbd6:	f042 0202 	orrlt.w	r2, r2, #2
 800dbda:	9307      	strge	r3, [sp, #28]
 800dbdc:	9307      	strlt	r3, [sp, #28]
 800dbde:	bfb8      	it	lt
 800dbe0:	9204      	strlt	r2, [sp, #16]
 800dbe2:	7823      	ldrb	r3, [r4, #0]
 800dbe4:	2b2e      	cmp	r3, #46	; 0x2e
 800dbe6:	d10c      	bne.n	800dc02 <_vfiprintf_r+0x176>
 800dbe8:	7863      	ldrb	r3, [r4, #1]
 800dbea:	2b2a      	cmp	r3, #42	; 0x2a
 800dbec:	d135      	bne.n	800dc5a <_vfiprintf_r+0x1ce>
 800dbee:	9b03      	ldr	r3, [sp, #12]
 800dbf0:	1d1a      	adds	r2, r3, #4
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	9203      	str	r2, [sp, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	bfb8      	it	lt
 800dbfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbfe:	3402      	adds	r4, #2
 800dc00:	9305      	str	r3, [sp, #20]
 800dc02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dce8 <_vfiprintf_r+0x25c>
 800dc06:	7821      	ldrb	r1, [r4, #0]
 800dc08:	2203      	movs	r2, #3
 800dc0a:	4650      	mov	r0, sl
 800dc0c:	f7f2 fae8 	bl	80001e0 <memchr>
 800dc10:	b140      	cbz	r0, 800dc24 <_vfiprintf_r+0x198>
 800dc12:	2340      	movs	r3, #64	; 0x40
 800dc14:	eba0 000a 	sub.w	r0, r0, sl
 800dc18:	fa03 f000 	lsl.w	r0, r3, r0
 800dc1c:	9b04      	ldr	r3, [sp, #16]
 800dc1e:	4303      	orrs	r3, r0
 800dc20:	3401      	adds	r4, #1
 800dc22:	9304      	str	r3, [sp, #16]
 800dc24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc28:	482c      	ldr	r0, [pc, #176]	; (800dcdc <_vfiprintf_r+0x250>)
 800dc2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc2e:	2206      	movs	r2, #6
 800dc30:	f7f2 fad6 	bl	80001e0 <memchr>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d03f      	beq.n	800dcb8 <_vfiprintf_r+0x22c>
 800dc38:	4b29      	ldr	r3, [pc, #164]	; (800dce0 <_vfiprintf_r+0x254>)
 800dc3a:	bb1b      	cbnz	r3, 800dc84 <_vfiprintf_r+0x1f8>
 800dc3c:	9b03      	ldr	r3, [sp, #12]
 800dc3e:	3307      	adds	r3, #7
 800dc40:	f023 0307 	bic.w	r3, r3, #7
 800dc44:	3308      	adds	r3, #8
 800dc46:	9303      	str	r3, [sp, #12]
 800dc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc4a:	443b      	add	r3, r7
 800dc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc4e:	e767      	b.n	800db20 <_vfiprintf_r+0x94>
 800dc50:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc54:	460c      	mov	r4, r1
 800dc56:	2001      	movs	r0, #1
 800dc58:	e7a5      	b.n	800dba6 <_vfiprintf_r+0x11a>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	3401      	adds	r4, #1
 800dc5e:	9305      	str	r3, [sp, #20]
 800dc60:	4619      	mov	r1, r3
 800dc62:	f04f 0c0a 	mov.w	ip, #10
 800dc66:	4620      	mov	r0, r4
 800dc68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc6c:	3a30      	subs	r2, #48	; 0x30
 800dc6e:	2a09      	cmp	r2, #9
 800dc70:	d903      	bls.n	800dc7a <_vfiprintf_r+0x1ee>
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d0c5      	beq.n	800dc02 <_vfiprintf_r+0x176>
 800dc76:	9105      	str	r1, [sp, #20]
 800dc78:	e7c3      	b.n	800dc02 <_vfiprintf_r+0x176>
 800dc7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc7e:	4604      	mov	r4, r0
 800dc80:	2301      	movs	r3, #1
 800dc82:	e7f0      	b.n	800dc66 <_vfiprintf_r+0x1da>
 800dc84:	ab03      	add	r3, sp, #12
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	462a      	mov	r2, r5
 800dc8a:	4b16      	ldr	r3, [pc, #88]	; (800dce4 <_vfiprintf_r+0x258>)
 800dc8c:	a904      	add	r1, sp, #16
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f7fd fcc4 	bl	800b61c <_printf_float>
 800dc94:	4607      	mov	r7, r0
 800dc96:	1c78      	adds	r0, r7, #1
 800dc98:	d1d6      	bne.n	800dc48 <_vfiprintf_r+0x1bc>
 800dc9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc9c:	07d9      	lsls	r1, r3, #31
 800dc9e:	d405      	bmi.n	800dcac <_vfiprintf_r+0x220>
 800dca0:	89ab      	ldrh	r3, [r5, #12]
 800dca2:	059a      	lsls	r2, r3, #22
 800dca4:	d402      	bmi.n	800dcac <_vfiprintf_r+0x220>
 800dca6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dca8:	f7fd fb6c 	bl	800b384 <__retarget_lock_release_recursive>
 800dcac:	89ab      	ldrh	r3, [r5, #12]
 800dcae:	065b      	lsls	r3, r3, #25
 800dcb0:	f53f af12 	bmi.w	800dad8 <_vfiprintf_r+0x4c>
 800dcb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcb6:	e711      	b.n	800dadc <_vfiprintf_r+0x50>
 800dcb8:	ab03      	add	r3, sp, #12
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	462a      	mov	r2, r5
 800dcbe:	4b09      	ldr	r3, [pc, #36]	; (800dce4 <_vfiprintf_r+0x258>)
 800dcc0:	a904      	add	r1, sp, #16
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	f7fd ff4e 	bl	800bb64 <_printf_i>
 800dcc8:	e7e4      	b.n	800dc94 <_vfiprintf_r+0x208>
 800dcca:	bf00      	nop
 800dccc:	0800ecfc 	.word	0x0800ecfc
 800dcd0:	0800ed1c 	.word	0x0800ed1c
 800dcd4:	0800ecdc 	.word	0x0800ecdc
 800dcd8:	0800ef5c 	.word	0x0800ef5c
 800dcdc:	0800ef66 	.word	0x0800ef66
 800dce0:	0800b61d 	.word	0x0800b61d
 800dce4:	0800da69 	.word	0x0800da69
 800dce8:	0800ef62 	.word	0x0800ef62

0800dcec <__swbuf_r>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	460e      	mov	r6, r1
 800dcf0:	4614      	mov	r4, r2
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	b118      	cbz	r0, 800dcfe <__swbuf_r+0x12>
 800dcf6:	6983      	ldr	r3, [r0, #24]
 800dcf8:	b90b      	cbnz	r3, 800dcfe <__swbuf_r+0x12>
 800dcfa:	f7fd fa7f 	bl	800b1fc <__sinit>
 800dcfe:	4b21      	ldr	r3, [pc, #132]	; (800dd84 <__swbuf_r+0x98>)
 800dd00:	429c      	cmp	r4, r3
 800dd02:	d12b      	bne.n	800dd5c <__swbuf_r+0x70>
 800dd04:	686c      	ldr	r4, [r5, #4]
 800dd06:	69a3      	ldr	r3, [r4, #24]
 800dd08:	60a3      	str	r3, [r4, #8]
 800dd0a:	89a3      	ldrh	r3, [r4, #12]
 800dd0c:	071a      	lsls	r2, r3, #28
 800dd0e:	d52f      	bpl.n	800dd70 <__swbuf_r+0x84>
 800dd10:	6923      	ldr	r3, [r4, #16]
 800dd12:	b36b      	cbz	r3, 800dd70 <__swbuf_r+0x84>
 800dd14:	6923      	ldr	r3, [r4, #16]
 800dd16:	6820      	ldr	r0, [r4, #0]
 800dd18:	1ac0      	subs	r0, r0, r3
 800dd1a:	6963      	ldr	r3, [r4, #20]
 800dd1c:	b2f6      	uxtb	r6, r6
 800dd1e:	4283      	cmp	r3, r0
 800dd20:	4637      	mov	r7, r6
 800dd22:	dc04      	bgt.n	800dd2e <__swbuf_r+0x42>
 800dd24:	4621      	mov	r1, r4
 800dd26:	4628      	mov	r0, r5
 800dd28:	f7ff f842 	bl	800cdb0 <_fflush_r>
 800dd2c:	bb30      	cbnz	r0, 800dd7c <__swbuf_r+0x90>
 800dd2e:	68a3      	ldr	r3, [r4, #8]
 800dd30:	3b01      	subs	r3, #1
 800dd32:	60a3      	str	r3, [r4, #8]
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	1c5a      	adds	r2, r3, #1
 800dd38:	6022      	str	r2, [r4, #0]
 800dd3a:	701e      	strb	r6, [r3, #0]
 800dd3c:	6963      	ldr	r3, [r4, #20]
 800dd3e:	3001      	adds	r0, #1
 800dd40:	4283      	cmp	r3, r0
 800dd42:	d004      	beq.n	800dd4e <__swbuf_r+0x62>
 800dd44:	89a3      	ldrh	r3, [r4, #12]
 800dd46:	07db      	lsls	r3, r3, #31
 800dd48:	d506      	bpl.n	800dd58 <__swbuf_r+0x6c>
 800dd4a:	2e0a      	cmp	r6, #10
 800dd4c:	d104      	bne.n	800dd58 <__swbuf_r+0x6c>
 800dd4e:	4621      	mov	r1, r4
 800dd50:	4628      	mov	r0, r5
 800dd52:	f7ff f82d 	bl	800cdb0 <_fflush_r>
 800dd56:	b988      	cbnz	r0, 800dd7c <__swbuf_r+0x90>
 800dd58:	4638      	mov	r0, r7
 800dd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd5c:	4b0a      	ldr	r3, [pc, #40]	; (800dd88 <__swbuf_r+0x9c>)
 800dd5e:	429c      	cmp	r4, r3
 800dd60:	d101      	bne.n	800dd66 <__swbuf_r+0x7a>
 800dd62:	68ac      	ldr	r4, [r5, #8]
 800dd64:	e7cf      	b.n	800dd06 <__swbuf_r+0x1a>
 800dd66:	4b09      	ldr	r3, [pc, #36]	; (800dd8c <__swbuf_r+0xa0>)
 800dd68:	429c      	cmp	r4, r3
 800dd6a:	bf08      	it	eq
 800dd6c:	68ec      	ldreq	r4, [r5, #12]
 800dd6e:	e7ca      	b.n	800dd06 <__swbuf_r+0x1a>
 800dd70:	4621      	mov	r1, r4
 800dd72:	4628      	mov	r0, r5
 800dd74:	f000 f81a 	bl	800ddac <__swsetup_r>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d0cb      	beq.n	800dd14 <__swbuf_r+0x28>
 800dd7c:	f04f 37ff 	mov.w	r7, #4294967295
 800dd80:	e7ea      	b.n	800dd58 <__swbuf_r+0x6c>
 800dd82:	bf00      	nop
 800dd84:	0800ecfc 	.word	0x0800ecfc
 800dd88:	0800ed1c 	.word	0x0800ed1c
 800dd8c:	0800ecdc 	.word	0x0800ecdc

0800dd90 <__ascii_wctomb>:
 800dd90:	b149      	cbz	r1, 800dda6 <__ascii_wctomb+0x16>
 800dd92:	2aff      	cmp	r2, #255	; 0xff
 800dd94:	bf85      	ittet	hi
 800dd96:	238a      	movhi	r3, #138	; 0x8a
 800dd98:	6003      	strhi	r3, [r0, #0]
 800dd9a:	700a      	strbls	r2, [r1, #0]
 800dd9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800dda0:	bf98      	it	ls
 800dda2:	2001      	movls	r0, #1
 800dda4:	4770      	bx	lr
 800dda6:	4608      	mov	r0, r1
 800dda8:	4770      	bx	lr
	...

0800ddac <__swsetup_r>:
 800ddac:	4b32      	ldr	r3, [pc, #200]	; (800de78 <__swsetup_r+0xcc>)
 800ddae:	b570      	push	{r4, r5, r6, lr}
 800ddb0:	681d      	ldr	r5, [r3, #0]
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	460c      	mov	r4, r1
 800ddb6:	b125      	cbz	r5, 800ddc2 <__swsetup_r+0x16>
 800ddb8:	69ab      	ldr	r3, [r5, #24]
 800ddba:	b913      	cbnz	r3, 800ddc2 <__swsetup_r+0x16>
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f7fd fa1d 	bl	800b1fc <__sinit>
 800ddc2:	4b2e      	ldr	r3, [pc, #184]	; (800de7c <__swsetup_r+0xd0>)
 800ddc4:	429c      	cmp	r4, r3
 800ddc6:	d10f      	bne.n	800dde8 <__swsetup_r+0x3c>
 800ddc8:	686c      	ldr	r4, [r5, #4]
 800ddca:	89a3      	ldrh	r3, [r4, #12]
 800ddcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddd0:	0719      	lsls	r1, r3, #28
 800ddd2:	d42c      	bmi.n	800de2e <__swsetup_r+0x82>
 800ddd4:	06dd      	lsls	r5, r3, #27
 800ddd6:	d411      	bmi.n	800ddfc <__swsetup_r+0x50>
 800ddd8:	2309      	movs	r3, #9
 800ddda:	6033      	str	r3, [r6, #0]
 800dddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dde0:	81a3      	strh	r3, [r4, #12]
 800dde2:	f04f 30ff 	mov.w	r0, #4294967295
 800dde6:	e03e      	b.n	800de66 <__swsetup_r+0xba>
 800dde8:	4b25      	ldr	r3, [pc, #148]	; (800de80 <__swsetup_r+0xd4>)
 800ddea:	429c      	cmp	r4, r3
 800ddec:	d101      	bne.n	800ddf2 <__swsetup_r+0x46>
 800ddee:	68ac      	ldr	r4, [r5, #8]
 800ddf0:	e7eb      	b.n	800ddca <__swsetup_r+0x1e>
 800ddf2:	4b24      	ldr	r3, [pc, #144]	; (800de84 <__swsetup_r+0xd8>)
 800ddf4:	429c      	cmp	r4, r3
 800ddf6:	bf08      	it	eq
 800ddf8:	68ec      	ldreq	r4, [r5, #12]
 800ddfa:	e7e6      	b.n	800ddca <__swsetup_r+0x1e>
 800ddfc:	0758      	lsls	r0, r3, #29
 800ddfe:	d512      	bpl.n	800de26 <__swsetup_r+0x7a>
 800de00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de02:	b141      	cbz	r1, 800de16 <__swsetup_r+0x6a>
 800de04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de08:	4299      	cmp	r1, r3
 800de0a:	d002      	beq.n	800de12 <__swsetup_r+0x66>
 800de0c:	4630      	mov	r0, r6
 800de0e:	f7ff fbcf 	bl	800d5b0 <_free_r>
 800de12:	2300      	movs	r3, #0
 800de14:	6363      	str	r3, [r4, #52]	; 0x34
 800de16:	89a3      	ldrh	r3, [r4, #12]
 800de18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de1c:	81a3      	strh	r3, [r4, #12]
 800de1e:	2300      	movs	r3, #0
 800de20:	6063      	str	r3, [r4, #4]
 800de22:	6923      	ldr	r3, [r4, #16]
 800de24:	6023      	str	r3, [r4, #0]
 800de26:	89a3      	ldrh	r3, [r4, #12]
 800de28:	f043 0308 	orr.w	r3, r3, #8
 800de2c:	81a3      	strh	r3, [r4, #12]
 800de2e:	6923      	ldr	r3, [r4, #16]
 800de30:	b94b      	cbnz	r3, 800de46 <__swsetup_r+0x9a>
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de3c:	d003      	beq.n	800de46 <__swsetup_r+0x9a>
 800de3e:	4621      	mov	r1, r4
 800de40:	4630      	mov	r0, r6
 800de42:	f000 f84d 	bl	800dee0 <__smakebuf_r>
 800de46:	89a0      	ldrh	r0, [r4, #12]
 800de48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de4c:	f010 0301 	ands.w	r3, r0, #1
 800de50:	d00a      	beq.n	800de68 <__swsetup_r+0xbc>
 800de52:	2300      	movs	r3, #0
 800de54:	60a3      	str	r3, [r4, #8]
 800de56:	6963      	ldr	r3, [r4, #20]
 800de58:	425b      	negs	r3, r3
 800de5a:	61a3      	str	r3, [r4, #24]
 800de5c:	6923      	ldr	r3, [r4, #16]
 800de5e:	b943      	cbnz	r3, 800de72 <__swsetup_r+0xc6>
 800de60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de64:	d1ba      	bne.n	800dddc <__swsetup_r+0x30>
 800de66:	bd70      	pop	{r4, r5, r6, pc}
 800de68:	0781      	lsls	r1, r0, #30
 800de6a:	bf58      	it	pl
 800de6c:	6963      	ldrpl	r3, [r4, #20]
 800de6e:	60a3      	str	r3, [r4, #8]
 800de70:	e7f4      	b.n	800de5c <__swsetup_r+0xb0>
 800de72:	2000      	movs	r0, #0
 800de74:	e7f7      	b.n	800de66 <__swsetup_r+0xba>
 800de76:	bf00      	nop
 800de78:	20000014 	.word	0x20000014
 800de7c:	0800ecfc 	.word	0x0800ecfc
 800de80:	0800ed1c 	.word	0x0800ed1c
 800de84:	0800ecdc 	.word	0x0800ecdc

0800de88 <abort>:
 800de88:	b508      	push	{r3, lr}
 800de8a:	2006      	movs	r0, #6
 800de8c:	f000 f898 	bl	800dfc0 <raise>
 800de90:	2001      	movs	r0, #1
 800de92:	f7f5 fb1d 	bl	80034d0 <_exit>

0800de96 <__swhatbuf_r>:
 800de96:	b570      	push	{r4, r5, r6, lr}
 800de98:	460e      	mov	r6, r1
 800de9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de9e:	2900      	cmp	r1, #0
 800dea0:	b096      	sub	sp, #88	; 0x58
 800dea2:	4614      	mov	r4, r2
 800dea4:	461d      	mov	r5, r3
 800dea6:	da08      	bge.n	800deba <__swhatbuf_r+0x24>
 800dea8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	602a      	str	r2, [r5, #0]
 800deb0:	061a      	lsls	r2, r3, #24
 800deb2:	d410      	bmi.n	800ded6 <__swhatbuf_r+0x40>
 800deb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800deb8:	e00e      	b.n	800ded8 <__swhatbuf_r+0x42>
 800deba:	466a      	mov	r2, sp
 800debc:	f000 f89c 	bl	800dff8 <_fstat_r>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	dbf1      	blt.n	800dea8 <__swhatbuf_r+0x12>
 800dec4:	9a01      	ldr	r2, [sp, #4]
 800dec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800deca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dece:	425a      	negs	r2, r3
 800ded0:	415a      	adcs	r2, r3
 800ded2:	602a      	str	r2, [r5, #0]
 800ded4:	e7ee      	b.n	800deb4 <__swhatbuf_r+0x1e>
 800ded6:	2340      	movs	r3, #64	; 0x40
 800ded8:	2000      	movs	r0, #0
 800deda:	6023      	str	r3, [r4, #0]
 800dedc:	b016      	add	sp, #88	; 0x58
 800dede:	bd70      	pop	{r4, r5, r6, pc}

0800dee0 <__smakebuf_r>:
 800dee0:	898b      	ldrh	r3, [r1, #12]
 800dee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dee4:	079d      	lsls	r5, r3, #30
 800dee6:	4606      	mov	r6, r0
 800dee8:	460c      	mov	r4, r1
 800deea:	d507      	bpl.n	800defc <__smakebuf_r+0x1c>
 800deec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	6123      	str	r3, [r4, #16]
 800def4:	2301      	movs	r3, #1
 800def6:	6163      	str	r3, [r4, #20]
 800def8:	b002      	add	sp, #8
 800defa:	bd70      	pop	{r4, r5, r6, pc}
 800defc:	ab01      	add	r3, sp, #4
 800defe:	466a      	mov	r2, sp
 800df00:	f7ff ffc9 	bl	800de96 <__swhatbuf_r>
 800df04:	9900      	ldr	r1, [sp, #0]
 800df06:	4605      	mov	r5, r0
 800df08:	4630      	mov	r0, r6
 800df0a:	f7fd fa73 	bl	800b3f4 <_malloc_r>
 800df0e:	b948      	cbnz	r0, 800df24 <__smakebuf_r+0x44>
 800df10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df14:	059a      	lsls	r2, r3, #22
 800df16:	d4ef      	bmi.n	800def8 <__smakebuf_r+0x18>
 800df18:	f023 0303 	bic.w	r3, r3, #3
 800df1c:	f043 0302 	orr.w	r3, r3, #2
 800df20:	81a3      	strh	r3, [r4, #12]
 800df22:	e7e3      	b.n	800deec <__smakebuf_r+0xc>
 800df24:	4b0d      	ldr	r3, [pc, #52]	; (800df5c <__smakebuf_r+0x7c>)
 800df26:	62b3      	str	r3, [r6, #40]	; 0x28
 800df28:	89a3      	ldrh	r3, [r4, #12]
 800df2a:	6020      	str	r0, [r4, #0]
 800df2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df30:	81a3      	strh	r3, [r4, #12]
 800df32:	9b00      	ldr	r3, [sp, #0]
 800df34:	6163      	str	r3, [r4, #20]
 800df36:	9b01      	ldr	r3, [sp, #4]
 800df38:	6120      	str	r0, [r4, #16]
 800df3a:	b15b      	cbz	r3, 800df54 <__smakebuf_r+0x74>
 800df3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df40:	4630      	mov	r0, r6
 800df42:	f000 f86b 	bl	800e01c <_isatty_r>
 800df46:	b128      	cbz	r0, 800df54 <__smakebuf_r+0x74>
 800df48:	89a3      	ldrh	r3, [r4, #12]
 800df4a:	f023 0303 	bic.w	r3, r3, #3
 800df4e:	f043 0301 	orr.w	r3, r3, #1
 800df52:	81a3      	strh	r3, [r4, #12]
 800df54:	89a0      	ldrh	r0, [r4, #12]
 800df56:	4305      	orrs	r5, r0
 800df58:	81a5      	strh	r5, [r4, #12]
 800df5a:	e7cd      	b.n	800def8 <__smakebuf_r+0x18>
 800df5c:	0800b195 	.word	0x0800b195

0800df60 <_malloc_usable_size_r>:
 800df60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df64:	1f18      	subs	r0, r3, #4
 800df66:	2b00      	cmp	r3, #0
 800df68:	bfbc      	itt	lt
 800df6a:	580b      	ldrlt	r3, [r1, r0]
 800df6c:	18c0      	addlt	r0, r0, r3
 800df6e:	4770      	bx	lr

0800df70 <_raise_r>:
 800df70:	291f      	cmp	r1, #31
 800df72:	b538      	push	{r3, r4, r5, lr}
 800df74:	4604      	mov	r4, r0
 800df76:	460d      	mov	r5, r1
 800df78:	d904      	bls.n	800df84 <_raise_r+0x14>
 800df7a:	2316      	movs	r3, #22
 800df7c:	6003      	str	r3, [r0, #0]
 800df7e:	f04f 30ff 	mov.w	r0, #4294967295
 800df82:	bd38      	pop	{r3, r4, r5, pc}
 800df84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800df86:	b112      	cbz	r2, 800df8e <_raise_r+0x1e>
 800df88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df8c:	b94b      	cbnz	r3, 800dfa2 <_raise_r+0x32>
 800df8e:	4620      	mov	r0, r4
 800df90:	f000 f830 	bl	800dff4 <_getpid_r>
 800df94:	462a      	mov	r2, r5
 800df96:	4601      	mov	r1, r0
 800df98:	4620      	mov	r0, r4
 800df9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df9e:	f000 b817 	b.w	800dfd0 <_kill_r>
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d00a      	beq.n	800dfbc <_raise_r+0x4c>
 800dfa6:	1c59      	adds	r1, r3, #1
 800dfa8:	d103      	bne.n	800dfb2 <_raise_r+0x42>
 800dfaa:	2316      	movs	r3, #22
 800dfac:	6003      	str	r3, [r0, #0]
 800dfae:	2001      	movs	r0, #1
 800dfb0:	e7e7      	b.n	800df82 <_raise_r+0x12>
 800dfb2:	2400      	movs	r4, #0
 800dfb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dfb8:	4628      	mov	r0, r5
 800dfba:	4798      	blx	r3
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	e7e0      	b.n	800df82 <_raise_r+0x12>

0800dfc0 <raise>:
 800dfc0:	4b02      	ldr	r3, [pc, #8]	; (800dfcc <raise+0xc>)
 800dfc2:	4601      	mov	r1, r0
 800dfc4:	6818      	ldr	r0, [r3, #0]
 800dfc6:	f7ff bfd3 	b.w	800df70 <_raise_r>
 800dfca:	bf00      	nop
 800dfcc:	20000014 	.word	0x20000014

0800dfd0 <_kill_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	4d07      	ldr	r5, [pc, #28]	; (800dff0 <_kill_r+0x20>)
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	4608      	mov	r0, r1
 800dfda:	4611      	mov	r1, r2
 800dfdc:	602b      	str	r3, [r5, #0]
 800dfde:	f7f5 fa67 	bl	80034b0 <_kill>
 800dfe2:	1c43      	adds	r3, r0, #1
 800dfe4:	d102      	bne.n	800dfec <_kill_r+0x1c>
 800dfe6:	682b      	ldr	r3, [r5, #0]
 800dfe8:	b103      	cbz	r3, 800dfec <_kill_r+0x1c>
 800dfea:	6023      	str	r3, [r4, #0]
 800dfec:	bd38      	pop	{r3, r4, r5, pc}
 800dfee:	bf00      	nop
 800dff0:	200052ec 	.word	0x200052ec

0800dff4 <_getpid_r>:
 800dff4:	f7f5 ba54 	b.w	80034a0 <_getpid>

0800dff8 <_fstat_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4d07      	ldr	r5, [pc, #28]	; (800e018 <_fstat_r+0x20>)
 800dffc:	2300      	movs	r3, #0
 800dffe:	4604      	mov	r4, r0
 800e000:	4608      	mov	r0, r1
 800e002:	4611      	mov	r1, r2
 800e004:	602b      	str	r3, [r5, #0]
 800e006:	f7f5 fab2 	bl	800356e <_fstat>
 800e00a:	1c43      	adds	r3, r0, #1
 800e00c:	d102      	bne.n	800e014 <_fstat_r+0x1c>
 800e00e:	682b      	ldr	r3, [r5, #0]
 800e010:	b103      	cbz	r3, 800e014 <_fstat_r+0x1c>
 800e012:	6023      	str	r3, [r4, #0]
 800e014:	bd38      	pop	{r3, r4, r5, pc}
 800e016:	bf00      	nop
 800e018:	200052ec 	.word	0x200052ec

0800e01c <_isatty_r>:
 800e01c:	b538      	push	{r3, r4, r5, lr}
 800e01e:	4d06      	ldr	r5, [pc, #24]	; (800e038 <_isatty_r+0x1c>)
 800e020:	2300      	movs	r3, #0
 800e022:	4604      	mov	r4, r0
 800e024:	4608      	mov	r0, r1
 800e026:	602b      	str	r3, [r5, #0]
 800e028:	f7f5 fab1 	bl	800358e <_isatty>
 800e02c:	1c43      	adds	r3, r0, #1
 800e02e:	d102      	bne.n	800e036 <_isatty_r+0x1a>
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	b103      	cbz	r3, 800e036 <_isatty_r+0x1a>
 800e034:	6023      	str	r3, [r4, #0]
 800e036:	bd38      	pop	{r3, r4, r5, pc}
 800e038:	200052ec 	.word	0x200052ec

0800e03c <_init>:
 800e03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03e:	bf00      	nop
 800e040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e042:	bc08      	pop	{r3}
 800e044:	469e      	mov	lr, r3
 800e046:	4770      	bx	lr

0800e048 <_fini>:
 800e048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04a:	bf00      	nop
 800e04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e04e:	bc08      	pop	{r3}
 800e050:	469e      	mov	lr, r3
 800e052:	4770      	bx	lr
